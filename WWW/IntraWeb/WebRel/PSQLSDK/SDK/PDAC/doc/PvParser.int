unit pvparser;


interface

uses DB, Classes, SysUtils
{$Ifdef PvDelphi6Up}
  , Variants;
{$Else}
  ;
{$EndIf}

const
  ftcUnknown      = 0;
  ftcString       = 1;
  ftcSmallint     = 2;
  ftcInteger      = 3;
  ftcWord         = 4;
  ftcBoolean      = 5;
  ftcFloat        = 6;
  ftcCurrency     = 7;
  ftcBCD          = 8;
  ftcDate         = 9;
  ftcTime         = 10;
  ftcDateTime     = 11;
  ftcBytes        = 12;
  ftcVarBytes     = 13;
  ftcAutoInc      = 14;
  ftcBlob         = 15;
  ftcMemo         = 16;
  ftcGraphic      = 17;
  ftcFmtMemo      = 18;
  ftcParadoxOle   = 19;
  ftcDBaseOle     = 20;
  ftcTypedBinary  = 21;
  ftcCursor       = 22;

{$Ifdef PvDelphi4Up}
  ftcFixedChar    = 23;
  ftcWideString   = 24;
  ftcLargeint     = 25;
  ftcADT          = 26;
  ftcArray        = 27;
  ftcReference    = 28;
  ftcDataSet      = 29;
{$EndIf}
{$Ifdef PvDelphi5Up}
  ftcOraBlob      = 30;
  ftcOraClob			= 31;
  ftcVariant			= 32;
  ftcInterface		= 33;
  ftcIDispatch		= 34;
  ftcGuid			    = 35;
{$EndIf}
{$Ifdef PvDelphi6Up}
  ftcTimeStamp    = 36;
  ftcMTBcd        = 37;
{$EndIf}

(*
Delphi 6:
  TFieldType = (ftUnknown, ftString, ftSmallint, ftInteger, ftWord,
    ftBoolean, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime,
    ftBytes, ftVarBytes, ftAutoInc, ftBlob, ftMemo, ftGraphic, ftFmtMemo,
    ftParadoxOle, ftDBaseOle, ftTypedBinary, ftCursor, ftFixedChar, ftWideString,
    ftLargeint, ftADT, ftArray, ftReference, ftDataSet, ftOraBlob, ftOraClob,
    ftVariant, ftInterface, ftIDispatch, ftGuid, ftTimeStamp, ftFMTBcd);

*)


  FldTypeMap: array[TFieldType] of Byte = (ftcUnknown, ftcString, ftcSmallint, ftcInteger,
    ftcWord, ftcBoolean, ftcFloat, ftcCurrency, ftcBCD, ftcDate, ftcTime, ftcDateTime,
    ftcBytes, ftcVarBytes, ftcAutoInc, ftcBlob, ftcMemo, ftcGraphic, ftcFmtMemo,
    ftcParadoxOle, ftcDBaseOle, ftcTypedBinary, ftcCursor
{$Ifdef PvDelphi4Up}
    , ftcFixedChar, ftcWideString, ftcLargeint, ftcADT, ftcArray, ftcReference,
    ftcDataSet
{$EndIf}
{$Ifdef PvDelphi5Up}
    , ftcOraBlob, ftcOraClob,
    ftcVariant, ftcInterface, ftcIDispatch, ftcGuid
{$EndIf}
{$Ifdef PvDelphi6Up}
    , ftcTimeStamp, ftcMTBcd
{$EndIf}
    );

{$Ifdef PvDelphi4Up}
  FldTypeStringMap: array[0..ftcDataSet] of string =
{$Else}
  FldTypeStringMap: array[0..ftcCursor] of string =
{$EndIf}
    ('ftUnknown', 'ftString',
    'ftSmallint', 'ftInteger', 'ftWord', 'ftBoolean', 'ftFloat', 'ftCurrency',
    'ftBCD', 'ftDate', 'ftTime', 'ftDateTime', 'ftBytes', 'ftVarBytes', 'ftAutoInc',
    'ftBlob', 'ftMemo', 'ftGraphic', 'ftFmtMemo', 'ftParadoxOle', 'ftDBaseOle',
    'ftTypedBinary', 'ftCursor'
{$Ifdef PvDelphi4Up}
    , 'ftFixedChar', 'ftWideString', 'ftLargeint', 'ftADT', 'ftArray', 'ftReference',
    'ftDataSet'
{$EndIf}
    );

type
  pCANOp = ^tCANOp;
  tCANOp  = (
    canNOTDEFINED,                      {                                  (*) }
    canISBLANK,                         { CANUnary;  is operand blank.     (*) }
    canNOTBLANK,                        { CANUnary;  is operand not blank. (*) }
    canEQ,                              { CANBinary, CANCompare; equal.    (*) }
    canNE,                              { CANBinary; NOT equal.            (*) }
    canGT,                              { CANBinary; greater than.         (*) }
    canLT,                              { CANBinary; less than.            (*) }
    canGE,                              { CANBinary; greater or equal.     (*) }
    canLE,                              { CANBinary; less or equal.        (*) }
    canNOT,                             { CANUnary; NOT                    (*) }
    canAND,                             { CANBinary; AND                   (*) }
    canOR,                              { CANBinary; OR                    (*) }
    canTUPLE2,                          { CANUnary; Entire record is operand. }
    canFIELD2,                          { CANUnary; operand is field       (*) }
    canCONST2,                          { CANUnary; operand is constant    (*) }
    canMINUS,                           { CANUnary;  minus. }
    canADD,                             { CANBinary; addition. }
    canSUB,                             { CANBinary; subtraction. }
    canMUL,                             { CANBinary; multiplication. }
    canDIV,                             { CANBinary; division. }
    canMOD,                             { CANBinary; modulo division. }
    canREM,                             { CANBinary; remainder of division. }
    canSUM,                             { CANBinary, accumulate sum of. }
    canCOUNT,                           { CANBinary, accumulate count of. }
    canMIN,                             { CANBinary, find minimum of. }
    canMAX,                             { CANBinary, find maximum of. }
    canAVG,                             { CANBinary, find average of. }
    canCONT,                            { CANBinary; provides a link between two }
    canUDF2,                            { CANBinary; invokes a User defined fn }
    canCONTINUE2,                       { CANUnary; Stops evaluating records }
    canLIKE,                            { CANCompare, extended binary compare       (*) }
    canIN,                              { CANBinary field in list of values }
    canLIST2,                           { List of constant values of same type }
    canUPPER,                           { CANUnary: upper case }
    canLOWER,                           { CANUnary: lower case }
    canFUNC2,                           { CANFunc: Function }
    canLISTELEM2,                       { CANListElem: List Element }
    canASSIGN                           { CANBinary: Field assignment }
  );

  tNODEClass = (                        { Node Class }
    nodeNULL,                           { Null node                  (*) }
    nodeUNARY,                          { Node is a unary            (*) }
    nodeBINARY,                         { Node is a binary           (*) }
    nodeCOMPARE,                        { Node is a compare          (*) }
    nodeFIELD,                          { Node is a field            (*) }
    nodeCONST,                          { Node is a constant         (*) }
    nodeTUPLE,                          { Node is a record }
    nodeCONTINUE,                       { Node is a continue node    (*) }
    nodeUDF,                            { Node is a UDF node }
    nodeLIST,                           { Node is a LIST node }
    nodeFUNC,                           { Node is a Function node }
    nodeLISTELEM                        { Node is a List Element node }
  );

{ NODE definitions including misc data structures }
{-------------------------------------------------}

type
  pCANHdr = ^tCANHdr;
  tCANHdr = packed record                { Header part common to all     (*) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
  end;

  pCANUnary = ^tCANUnary;
  tCANUnary = packed record             { Unary Node                    (*) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iOperand1       : Word;             { Byte offset of Operand node }
  end;

  pCANBinary = ^tCANBinary;
  tCANBinary = packed record            { Binary Node                   (*) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iOperand1       : Word;             { Byte offset of Op1 }
    iOperand2       : Word;             { Byte offset of Op2 }
  end;

  pCANField = ^tCANField;
  tCANField = packed record             { Field }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iFieldNum       : Word;
    iNameOffset     : Word;             { Name offset in Literal pool }
  end;

  pCANConst = ^tCANConst;
  tCANConst = packed record             { Constant }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iType           : Word;             { Constant type. }
    iSize           : Word;             { Constant size. (in bytes) }
    iOffset         : Word;             { Offset in the literal pool. }
  end;

  pCANTuple = ^tCANTuple;
  tCANTuple = packed record             { Tuple (record) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iSize           : Word;             { Record size. (in bytes) }
  end;

  pCANContinue = ^tCANContinue;
  tCANContinue = packed record          { Break Node                    (*) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iContOperand    : Word;             { Continue if operand is true. }
  end;

  pCANCompare = ^tCANCompare;
  tCANCompare = packed record           { Extended compare Node (text fields) (*) }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;            { canLIKE, canEQ }
    bCaseInsensitive : WordBool;        { 3 val: UNKNOWN = "fastest", "native" }
    iPartialLen     : Word;             { Partial fieldlength (0 is full length) }
    iOperand1       : Word;             { Byte offset of Op1 }
    iOperand2       : Word;             { Byte offset of Op2 }
  end;

  pCANFunc = ^tCANFunc;
  tCANFunc = packed record              { Function }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iNameOffset     : Word;             { Name offset in Literal pool }
    iElemOffset     : Word;             { Offset of first List Element in Node pool }
  end;

  pCANListElem = ^tCANListElem;
  tCANListElem = packed record          { List Element }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iOffset         : Word;             { Arg offset in Node pool }
    iNextOffset     : Word;             { Offset in Node pool of next ListElem or 0 if end of list }
  end;

{This is the node to be used to pass User defined functions }
const
  iLangSQL           = 0;               { Common SQL dialect }
  iDbaseExpr         = 2;               { This is also the driver ID for dBASE }

type
  pCANUdf = ^tCANUdf;
  tCANUdf = packed record               { A user defined function }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iOffSzFuncName  : Word;             { Offset in literal pool to Function Name string(0 terminated) }
    iOperands       : Word;             { Byte offset of Operands (concatenated using canCONT) }
    iDrvDialect     : Word;             { Driver Dialect ID for UDF string supplied }
    iOffSzUDF       : Word;             { Offset in literal pool to UDF string (0 terminated) }
  end;

  pCANList = ^tCANList;
  tCANList = packed record             { List of Constants }
    nodeClass       : tNODEClass;
    canOp           : tCANOp;
    iType           : Word;            { Constant type. }
    iTotalSize      : Word;            { Total list size; }
    iElemSize       : Word;            { Size of each elem for fix-width types }
    iElems          : Word;            { Number of elements in list }
    iOffset         : Word;            { Offset in the literal pool to first elem. }
  end;

  pCANNode = ^CANNode;
  CANNode = packed record
    case Integer of
      0: (tCANHdr      : tCANHdr);
      1: (canUnary    : tCANUnary);
      2: (canBinary   : tCANBinary);
      3: (canField    : tCANField);
      4: (canConst    : tCANConst);
      5: (canTuple    : tCANTuple);
      6: (canContinue : tCANContinue);
      7: (canCompare  : tCANCompare);
      8: (canList     : tCANList);
      9: (canFunc     : tCANFunc);
     10: (canListElem : tCANListElem);
  end;

{ Linear exression tree}
{----------------------}

const
  CANEXPRVERSION     = 2;

type
  ppCANExpr = ^pCANExpr;
  pCANExpr  = ^tCANExpr;
  tCANExpr   = packed record             { Expression Tree }
    iVer            : Word;
    iTotalSize      : Word;             { Size of this structure }
    iNodes          : Word;             { Number of nodes }
    iNodeStart      : Word;             { Starting offet of Nodes in this }
    iLiteralStart   : Word;             { Starting offset of Literals in this }
  end;

//------------------------------------------------------------------------------

type

{ TFilterExpr }

  TParserOption = (poExtSyntax, poAggregate, poDefaultExpr, poUseOrigNames,
                   poFieldNameGiven, poFieldDepend);
  TParserOptions = set of TParserOption;

  TExprNodeKind = (enField, enConst, enOperator, enFunc);
  TExprScopeKind = (skField, skAgg, skConst);

  PExprNode = ^TExprNode;
  TExprNode = record
    FNext: PExprNode;
    FKind: TExprNodeKind;
    FPartial: Boolean;
    FOperator: tCANOp;
    FData: Variant;
    FLeft: PExprNode;
    FRight: PExprNode;
    FDataType: Integer;
    FDataSize: Integer;
    FArgs: TList;
    FScopeKind: TExprScopeKind;
  end;

  TFilterExpr = class
  private
    FDataSet: TDataSet;
    FOptions: TFilterOptions;
    FParserOptions: TParserOptions;
    FNodes: PExprNode;
    FExprBuffer: PCANExpr;
    FExprBufSize: Integer;
    FExprNodeSize: Integer;
    FExprDataSize: Integer;
    FFieldName: string;
    FDependentFields: TBits;
    function FieldFromNode(Node: PExprNode): TField;
    function GetExprData(Pos, Size: Integer): PChar;
    function PutConstBCD(const Value: Variant; Decimals: Integer): Integer;
    function PutConstBool(const Value: Variant): Integer;
    function PutConstDate(const Value: Variant): Integer;
    function PutConstDateTime(const Value: Variant): Integer;
    function PutConstFloat(const Value: Variant): Integer;
    function PutConstInt(DataType: Integer; const Value: Variant): Integer;
    function PutConstNode(DataType: Integer; Data: PChar;
      Size: Integer): Integer;
    function PutConstStr(const Value: string): Integer;
    function PutConstTime(const Value: Variant): Integer;
    function PutData(Data: PChar; Size: Integer): Integer;
    function PutExprNode(Node: PExprNode; ParentOp: tCANOp): Integer;
    function PutFieldNode(Field: TField; Node: PExprNode): Integer;
    function PutNode(NodeType: tNODEClass; OpType: tCANOp;
      OpCount: Integer): Integer;
    procedure SetNodeOp(Node, Index, Data: Integer);
    function PutConstant(Node: PExprNode): Integer;
    function GetFieldByName(Name: string) : TField;
  public
    constructor Create(DataSet: TDataSet; Options: TFilterOptions;
      ParseOptions: TParserOptions; const FieldName: string; DepFields: TBits);
    destructor Destroy; override;
    function NewCompareNode(Field: TField; Operator: tCANOp;
      const Value: Variant): PExprNode;
    function NewNode(Kind: TExprNodeKind; Operator: tCANOp;
      const Data: Variant; Left, Right: PExprNode): PExprNode;
    function GetFilterData(Root: PExprNode): PCANExpr;
    property DataSet: TDataSet write FDataSet;
  end;

{ TExprParser }

  TExprToken = (etEnd, etSymbol, etName, etLiteral,  etLParen, etRParen,
    etEQ, etNE, etGE, etLE, etGT, etLT, etADD, etSUB, etMUL, etDIV,
    etComma, etLIKE, etISNULL, etISNOTNULL, etIN);

  TExprParser = class
  private
    FFilter: TFilterExpr;
    FText: string;
    FSourcePtr: PChar;
    FTokenPtr: PChar;
    FTokenString: string;
    FStrTrue: string;
    FStrFalse: string;
    FToken: TExprToken;
    FPrevToken: TExprToken;
    FFilterData: PCANExpr;
    FNumericLit: Boolean;
    FDataSize: Integer;
    FParserOptions: TParserOptions;
    FFieldName: string;
    FDataSet: TDataSet;
    FDependentFields: TBits;
    procedure NextToken;
    function NextTokenIsLParen : Boolean;
    function ParseExpr: PExprNode;
    function ParseExpr2: PExprNode;
    function ParseExpr3: PExprNode;
    function ParseExpr4: PExprNode;
    function ParseExpr5: PExprNode;
    function ParseExpr6: PExprNode;
    function ParseExpr7: PExprNode;
    function TokenName: string;
    function TokenSymbolIs(const S: string): Boolean;
    function TokenSymbolIsFunc(const S: string) : Boolean;
    procedure GetFuncResultInfo(Node: PExprNode);
    procedure TypeCheckArithOp(Node: PExprNode);
    procedure GetScopeKind(Root, Left, Right : PExprNode);
  public
    constructor Create(DataSet: TDataSet; const Text: string;
      Options: TFilterOptions; ParserOptions: TParserOptions;
      const FieldName: string; DepFields: TBits);
    destructor Destroy; override;
    procedure SetExprParams(const Text: string; Options: TFilterOptions;
      ParserOptions: TParserOptions; const FieldName: string);
    property FilterData: PCANExpr read FFilterData;
    property DataSize: Integer read FDataSize;
  end;

{$Ifndef PvDelphi5Up}

{ TMasterDataLink }

  TMasterDataLink = class(TDataLink)
  private
    FDataSet: TDataSet;
    FFieldNames: string;
    FFields: TList;
    FOnMasterChange: TNotifyEvent;
    FOnMasterDisable: TNotifyEvent;
    procedure SetFieldNames(const Value: string);
  protected
    procedure ActiveChanged; override;
    procedure CheckBrowseMode; override;
    procedure LayoutChanged; override;
    procedure RecordChanged(Field: TField); override;
  public
    constructor Create(DataSet: TDataSet);
    destructor Destroy; override;
    property FieldNames: string read FFieldNames write SetFieldNames;
    property Fields: TList read FFields;
    property OnMasterChange: TNotifyEvent read FOnMasterChange write FOnMasterChange;
    property OnMasterDisable: TNotifyEvent read FOnMasterDisable write FOnMasterDisable;
  end;

{$Endif}

{ TConstraintItem }

  TConstraintItem = class(TCollectionItem)
  public
    FieldNum: integer;
    Expression: string;
    ErrorMessage: string;
    Parser: TExprParser;

    destructor Destroy; override;
  end;

{ TConstraintCollection }

  TConstraintCollection = class(TCollection)
  protected
    function GetItem(Index: Integer): TConstraintItem;
    procedure SetItem(Index: Integer; Value: TConstraintItem);
  public
    function Add: TConstraintItem;
    function FindItemID(ID: Integer): TConstraintItem;
{$Ifndef PvDelphi3}
    function Insert(Index: Integer): TConstraintItem;
{$EndIf}
    property Items[Index: Integer]: TConstraintItem read GetItem write SetItem; default;
  end;

{ TParseVerifier }

  PListStruct = ^TListStruct;
  TListStruct = record
    IsVariant: boolean;
    v: variant;
    Field: TField;
  end;

  TListStructList = class(TList)
  protected
    function Get(Index: Integer): PListStruct;
    procedure Put(Index: Integer; Item: PListStruct);
  public
    property Items[Index: Integer]: PListStruct read Get write Put; default;
    destructor Destroy; override;
  end;

  TRetStructType = ( rstVariant, rstField, rstList );

  TRetStruct = record
    StType: TRetStructType;
    v: variant;
    Field: TField;
    List: TListStructList;
  end;

  EStopOnContinueOperator = class(EAbort)
  end;

  TParseVerifier = class
  private
    FDataSet: TDataSet;
    FParseData: PChar;
    procedure ProceedNode(Cursor: integer; var Result: TRetStruct);
    procedure ProceedUnaryNode(pNode: pCANUnary; var Result: TRetStruct);
    procedure ProceedBinaryNode(pNode: pCANBinary; var Result: TRetStruct);
    procedure ProceedCompareNode(pNode: pCANCompare; var Result: TRetStruct);
    procedure ProceedConstNode(pNode: pCANConst; var Result: TRetStruct);
    procedure ProceedFieldNode(pNode: pCANField; var Result: TRetStruct);
    procedure ProceedContinueNode(pNode: pCANContinue; var Result: TRetStruct);
    procedure ProceedListNode(pNode: pCANListElem; var Result: TRetStruct);
  public
    constructor Create(DataSet: TDataSet; ParseData: PCANExpr);
    function Verify: boolean;
  end;

  TDsInfoReq = (
    dsNumSources,       { Callee fills in iNumElem for number of data sources }
    dsDefSources,       { Callee fills in  db,tbl to use as defaults }
    dsSource,           { Callee fills in iNumElem, caller fills in db/tbl }
    dsFieldSource,      { Caller fills in szSourceFldName, callee fills in }
                        {  db/tbl/orig fld name }
    dsFieldDefault,     { Caller fills in szSourceFldName, callee fills in }
                        {  szSQLExpr and szErrStr }
    dsFieldDomainExpr,  { Caller fills in szSourceFldName, callee fills in }
                        {  szSQLExpr and szErrStr }
    dsTblConstraint,    { Callee fills in iNumElem for number of rec constr }
    dsNumTblConstraint  { Caller fills in iNumElem, callee fills in }
                        {  szSQLExpr and szErrStr }
  );

  pDataSources = ^TDataSources;
  TDataSources = packed record
    iNumElem        : Word;       { Number of elements in list or indiv. elem }
    szDbName        : string;    {  individual elements are numbered 1..N }
    szTblName       : string;
    szSourceFldName : string;
    szOrigFldName   : string;
    szSQLExprImport : string;
    szSQLExprCustom : string;
    szErrStrImport  : string;
    szErrStrCustom  : string;
    bRequired       : boolean;
  end;

const varCompVariantIsNull = -100;

function VariantCompareCase(v1, v2: variant; CaseSens: boolean): integer;
function VariantCompare(v1, v2: variant): integer;
     {v1 > v2	    > 0
      v1 < v2	    < 0
      v1 = v2	    = 0
      v1 or v2 is null   = varCompVariantIsNull}

{$Ifndef PvDelphi4Up}
function Max(X, Y: Cardinal): Cardinal;
function Min(X, Y: Cardinal): Cardinal;
{$Endif}

implementation
