<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- 
<!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V4.1.1beta1//EN"
"D:/Eigene Dateien/Dokumente/DocBook/DOCBKX411/docbookx.dtd">
<?xml-stylesheet alternate="yes" type="text/xsl"
href="D:Eigene Dateien//Dokumente/DocBook/dbx115/docbook/xhtml/docbook.xsl"?>
 -->
<?xml-stylesheet alternate="yes" type="text/xsl" href="./style.xsl"?>
<book id="book">
<bookinfo>
<titleabbrev>XDOM 2.3.7</titleabbrev>
<title>Extended Document Object Model 2.3.7</title>
<subtitle>Delphi 3 Implementation</subtitle>
<author><firstname>Dieter</firstname><surname>Köhler</surname></author>
<pubdate>November 2000</pubdate>
<legalnotice>

<para>LICENSE</para>

<para>Copyright (c) 2000 by Dieter Köhler ("http://www.philo.de/homepage.htm")</para>

<para>
Definitions:
<itemizedlist>
  <listitem>"Package" refers to the collection of files distributed by the Copyright Holder, and derivatives of that collection of files created through textual modification.</listitem>
  <listitem>"Standard Version" refers to such a Package if it has not been modified, or has been modified in accordance with the wishes of the Copyright Holder.</listitem>
  <listitem>"Copyright Holder" is whoever is name in the copyright or copyrights for the package.</listitem>
  <listitem>"You" is you, if you're thinking about copying or distributing this Package.</listitem>
</itemizedlist>
</para>

<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Package"), to deal in the Package without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Package, and to permit persons to whom the Package is furnished to do so, subject to the following conditions:</para>

<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Package.</para>

<para>You may modify your copy of this Package in any way, provided that you insert a prominent notice in each changed file stating how and when you changed a file, and provided that you do at least one of the following:</para>

<para>a) allow the Copyright Holder to include your modifications in the Standard Version of the Package.</para>

<para>b) use the modified Package only within your corporation or organization.</para>

<para>c) rename the Package not using the expression XDOM, rename any non standard executables, units, and classes so the names do not conflict with standard executables, units, and classes, and provide a separate manual page that clearly documents how it differs from the standard version.</para>

<para>d) make other distribution arrangements with the Copyright Holder.</para>
         
<para>The name of the Copyright Holder may not be used to endorse or promote products derived from this Package without specific prior written permission.</para>

<para>THE PACKAGE IS PROVIDED <quote>AS IS</quote>, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE PACKAGE OR THE USE OR OTHER DEALINGS IN THE PACKAGE.</para>

</legalnotice>

<othercredit>
<contrib>Many thanks to all people who supported this project by sending bug reports and bug fixes, wrote articles or encouraged me in other ways. Special thanks to (in alphabetical order): Marco Bommeljé, David Burridge, David Butler, Vladimir Buzuev, Charlie Calvert, Marco Cantu', Bernard Eblin, Massimo Maria Ghisalberti, Hans-Eric Grönlund, Herbert Hrachovec, Eric H. Johnson, Li Ling, Mauricio Longo, Diego Novati, Pedro de Paz, Matthew Peebles, Ernst van der Pols, Lijun Qin, Jeff Rafter, John Romedahl, Miloslav Skácel, Dirk Speidel, Karl Waclawek, Marco Wobben, Eric Zurcher.</contrib>
</othercredit>
</bookinfo>

<preface>
<title>Preface</title>

<para>The eXtented Document Object Model (XDOM) is a Delphi 3 implementation of some parts of the Document Object Model (DOM) provided by the Word Wide Web Consortium (W3C).  Since XDOM deviates in a few aspects from the DOM it is a non-conforming DOM implementation.</para>

<para>Currently there exist two DOM versions: the basic DOM Level 1 (DOM1) and the more sophisticated DOM Level 2 (DOM2).  The respective specifications are: <quote>Document Object Model (Core) Level 1 Specification. Version 1.0. W3C Recommendation 1 October, 1998</quote> available at "http://www.w3.org/TR/REC-DOM-Level-1", and <quote>Document Object Model (DOM) Level 2 Specification. Version 1.0., W3C Recommendation 13 November 2000</quote> available at "http://www.w3.org/TR/DOM-Level-2".  Both are copyrighted (c) by the World Wide Web Consortium, (Massachusetts Institute of Technology, Institute National de Recherche en Informatique et en Automatique, Keio University), all rights reserved.</para>

<para>XDOM implements the full DOM1, the DOM2 Core, XML, Views and Traversal modules, and its own Content Model and Parser modules.  The DOM2 modifications and additions of DOM1 are indicated in this manual by a number-sign (#). In some respects the XDOM implementation does not completely follow the DOM specifications or some DOM methods have not been implemented yet. These modifications are indicated in the following text by an asterisk (*). The DOM specifications allow additional procedures and functions to improve the functionality of the implementation. In the following text this additions are indicated by a plus-sign (+). Due to the wide range of the additions this implementation was named eXtended Document Object Model (XDOM).</para>

<para>The latest version of this Software can be found at "http://www.philo.de/xml/". Please, report unknown bugs in the source code or in this documentation to the author via "service@philo.de" (make sure that you refer to the latest XDOM version). For known bugs, please consult the file 'buglist.txt' which accompanies this release of the 'Extended Document Object Model'. For all other matters, please post to the openxml mailing list. Instructions how to join the mailing list can be found at "http://www.philo.de/xml/" as well.</para>

</preface>


<chapter>
<title>Overview of the XDOM Interfaces</title>

  <sect1>
  <title>The XDOM Structure Model</title>

  <para>The XDOM presents documents as a hierarchy of node objects that also implement other, more specialized classes. Some types of nodes may have child nodes of various types, and others are leaf nodes that cannot have anything below them in the document structure. The node types, and which node types they may have as children, are as follows:</para>    
            
         <itemizedlist>
           <listitem>Attribute (TdomAttr)
             <itemizedlist>
               <listitem>EntityReference</listitem>
               <listitem>Text</listitem>
             </itemizedlist>
           </listitem>
           <listitem>CDATASection (TdomCDATASection)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Comment (TdomComment)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Document (TdomDocument) 
             <itemizedlist>
               <listitem>Comment</listitem>
               <listitem>DocumentType (maximum of one)</listitem>
               <listitem>Element (maximum of one)</listitem>
               <listitem>ProcessingInstruction</listitem>
             </itemizedlist>
           </listitem>  
           <listitem>DocumentFragment (TdomDocumentFragment)
             <itemizedlist>
               <listitem>CDATASection</listitem>
               <listitem>Comment</listitem>
               <listitem>DocumentType</listitem>
               <listitem>Element</listitem>
               <listitem>EntityReference</listitem>
               <listitem>ProcessingInstruction</listitem>
               <listitem>Text</listitem>
             </itemizedlist>
           </listitem>
           <listitem>DocumentType (TdomDocumentType)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Element (TdomElement)
             <itemizedlist>
               <listitem>CDATASection</listitem>
               <listitem>Comment</listitem>
               <listitem>EntityReference</listitem>
               <listitem>Element</listitem>
               <listitem>ProcessingInstruction</listitem>
               <listitem>Text</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Entity (TdomEntity)
             <itemizedlist>
               <listitem>CDATASection</listitem>
               <listitem>Comment</listitem>
               <listitem>Element</listitem>
               <listitem>EntityReference</listitem>
               <listitem>ProcessingInstruction</listitem>
               <listitem>Text</listitem>
             </itemizedlist>
           </listitem>
           <listitem>EntityReference (TdomEntityReference)
             <itemizedlist>
               <listitem>CDATASection</listitem>
               <listitem>Comment</listitem>
               <listitem>Element</listitem>
               <listitem>EntityReference</listitem>
               <listitem>ProcessingInstruction</listitem>
               <listitem>Text</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Notation (TdomNotation)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
           <listitem>ProcessingInstruction (TdomProcessingInstruction)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
           <listitem>Text (TdomText)
             <itemizedlist>
               <listitem>(no children)</listitem>
             </itemizedlist>
           </listitem>
         </itemizedlist>
            
  <para>The XDOM also specifies a TdomNodeList class to handle ordered lists of Nodes, such as the children of a node, or the elements returned by the TdomDocument.getElementsByTagName method, and also a TdomNamedNodeMape class to handle unordered sets of Nodes referenced by their name attribute, such as the Attributes of an Element. TdomNodeLists and TdomNamedNodeMaps in the XDOM are <quote>live</quote>, that is, changes to the underlying document structure are reflected in all relevant TdomNodeLists and TdomNamedNodeMaps. For example, if a XDOM user gets a TdomNodeList object containing the children of an element, then subsequently adds more children to that element (or removes children, or modifies them), those changes are automatically reflected in the TdomNodeList without further action on the user's part. Likewise changes to a node in the tree are reflected in all references to that node in TdomNodeLists and TdomNamedNodeMaps.</para>
  </sect1>

  <sect1>
  <title>The Class Hierarchy of the XDOM Core Nodes</title>
  <literallayout><emphasis>
TdomNode
  |__TdomAttr
  |__TdomCharacterData
  |    |__TdomComment
  |    |__TdomText
  |         |__TdomCDATASection
  |__TdomDocument
  |__TdomDocumentFragment
  |__TdomDocumentType
  |__TdomElement
  |__TdomEntity
  |__TdomEntityReference
  |__TdomNotation
  |__TdomProcessingInstruction

  </emphasis></literallayout>
  </sect1>

  <sect1>
  <title>Case Sensitivity in the XDOM</title>

  <para>The XDOM has many interfaces that imply string matching. XML is explicitly case sensitive. For the purposes of the XDOM, string matching takes place on a character code by character code basis, on the 16 bit value of a WideString. As such, the XDOM assumes that any normalizations will take place in the processor, before the XDOM structures are built.</para>

  </sect1>
</chapter>

<chapter>
<title>The Core</title>
  <sect1>
  <title>Exceptions</title>
         
  <para>XDOM operations only raise exceptions in <quote>exceptional</quote> circumstances, i.e. when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). In general, XDOM methods raise exceptions in ordinary processing situation, such as out-of-bound errors when using TdomNodeList.</para>

  <para>
  <itemizedlist>
    <listitem>
    <para>
    <synopsis><errorname>EdomException</errorname> = class(<errorname>Exception</errorname>);</synopsis>
    This is the fundamental class of all DOM exceptions.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EIndex_Size_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if index or size is negative, or greater than the allowed value.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EDomstring_Size_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if the specified range of text does not fit into a WideString.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EHierarchy_Request_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if any node is inserted somewhere it doesn't belong.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EWrong_Document_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if a node is used in a different document than the one that created it (that doesn't support it)
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Character_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an invalid name is specified.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENo_Data_Allowed_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if data is specified for a node which does not support data.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENo_Modification_Allowed_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to modify an object where modifications are not allowed.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENot_Found_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt was made to reference a node in a context where it does not exist.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENot_Supported_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if the implementation does not support the requested type of object or operation.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInuse_Attribute_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to add an attribute node that is already inuse elsewhere.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_State_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to use an object that is not, or no longer, usable.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ESyntax_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an invalid or illegal string is specified.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Modification_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to modify the type of the underlying object.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>ENamespace_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if an attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Access_Err</errorname> = class(<errorname>EdomException</errorname>);</synopsis>
    Raised if a parameter or an operation is not supported by the underlying object.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInuse_Node_Err</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    Raised if an attempt is made to add a node that is already inuse elsewhere. 
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInuse_Content_Model_Err</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    Raised if an attempt is made to associate a document with an internal content model that is already associated elsewhere. 
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EInvalid_Entity_Reference_Err</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    Raised if an illegal entity reference is found.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EUnknown_Document_Format_Err</errorname> = class(<errorname>EdomException</errorname>); (+)</synopsis>
    Raised if an attempt is made to retrive an unknown document format.
    </para>
    </listitem>

    <listitem>
    <para>
    <synopsis><errorname>EConversionStream</errorname> = class(<errorname>EStreamError</errorname>); (+)</synopsis>
    This is the fundamental class of all TConversionStream exceptions. 
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

  <sect1>
  <title>General Functions (+)</title>

  <para>In addition to the <quote>Document Object Model Level 2</quote> guidelines the DOM Delphi implemetation offers the following functions for extracting the prefix resp. local name of a qualified name as defined in the <quote>Namespaces in XML</quote> recommendation of the W3C (<quote>REC-xml-names-19990114</quote>). Both functions raise an EInvalid_Character_Err, if the specified qualified name contains an illegal value.</para>
		 
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function <emphasis>XMLExtractPrefix</emphasis>
	(const qualifiedName: wideString): wideString;
    </para>
    </listitem>

    <listitem>
    <para>
(+) function 
                     <emphasis>XMLExtractLocalName</emphasis>
                     (const qualifiedName: wideString): wideString;
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para>In addition to the <quote>Document Object Model Level 2</quote> guidelines the DOM Delphi implemetation offers the following functions for testing whether a WideChar S belongs to the respective xml character class. All functions return 'true' if S belongs to the class, otherwise they return 'false'. Since the value to be tested is always of type WideChar characters out of the interval [$10000;$10FFFF] cannot be tested. Instead you can either use their low or their high surrogate.</para>

  <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlWideSpace</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlLetter</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlBaseChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlIdeographic</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlCombiningChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlDigit</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlExtender</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNameChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPubidChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>

         <para>In addition to the <quote>Document Object Model Level 2</quote> guidelines the DOM Delphi implemetation offers the following functions for testing whether a WideString S belongs to the respective xml string type.  All functions return 'true' if S belongs to the type, otherwise they return 'false'.</para>

         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlS</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNmtoken</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Isdef</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEntityRef</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPEReference</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlReference</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEntityValue</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlAttValue</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlSystemLiteral</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPubidLiteral</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlCData</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlCharData</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPITarget</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlVersionNum</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlVersionNum</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEncName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlStringType</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlTokenizedType</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>

  <para>In addition to the <quote>Document Object Model (Core) Level 1</quote> guidelines the DOM Delphi implemetation offers the following functions for testing whether a WideChar S or a WideString S belongs to the respective XML-namespace string type.  All functions return 'true' if S belongs to the type, otherwise they return 'false'.</para>

         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNCNameChar</emphasis>
                     (const s: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNCName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlDefaultAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPrefixedAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNSAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlLocalPart</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPrefix</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlQName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>

  <para>In addition to the <quote>Document Object Model (Core) Level 1</quote> guidelines the DOM Delphi implemetation offers the following convertion functions:</para>

         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>ResolveCharRefs</emphasis>
                     (const S: WideString): wideString;
      <para>Resolves all character references in S.</para>
      Parameters:
      - S
         A UTF-16BE conformal wideString whoes character 
         references are to be resolved.

      Return Value:
         A UTF-16BE conformal wideString with resolved 
         character references. 

      Exceptions:		 
      - EConvertError
         This Delphi exception is raised if S contains an 
         invalid character, a non well-formed entity 
         reference, or an invalid character reference value.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
                     
(+) function 
                     <emphasis>XmlIntToCharRef</emphasis>
                     (const value: integer): wideString;
      <para>Converts an integer value into a character reference of the form '&amp;#value;'.</para>
      Parameters:
      - value
	 The integer value being transformed.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XmlCharRefToInt</emphasis>
                     (const S: WideString): integer;
                     <literallayout>
      Converts a character reference into its integer 
      value. A character reference has the form &amp;#n; 
      or &amp;#xh;, where n is a decimal number out of 
      the interval [0;1114111] or h is a hexadecimal 
      number out of the interval [0000;10FFFF]. The 
      character reference must also refer to a valid 
      xml-character. If that is not true an EConvertError 
      is raised.

      Parameters:
      - S
         The character reference being transformed.

      Return Value:
         The integer value of the character reference. 

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if S is not a 
          valid character reference value.
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XmlCharRefToStr</emphasis>
                     (const S: WideString): WideString;
                     <literallayout>
      Converts a character reference into a UTF-16BE 
      conformal wideString. A character reference has 
      the form &amp;#n; or &amp;#xh;, where n is a 
      decimal number out of the interval [0;1114111] 
      or h is a hexadecimal number out of the interval 
      [0000;10FFFF]. The character reference must also 
      refer to a valid xml-character. If that is not 
      true an EConvertError is raised. If the value of 
      the character reference exceeds $FFFF it is 
      transformed into a UTF-16BE surrogate.

      Parameters:
      - S
         The character reference being transformed.

      Return Value:
         A UTF-16BE conformal wideString of the 
         character reference. 

      Exceptions:		 
      - EConvertError
         This Delphi exception is raised if S is not 
         a valid character reference value.
		  </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>XmlStrToCharRef</emphasis>
                     (const S: WideString): WideString;
                     <literallayout>
      Converts a UTF-16BE conformal wideString into a 
      sequence of character references. 
      
      A character reference has the form &amp;#n; or 
      &amp;#xh;, where n is a decimal number out of the 
      interval [0;1114111] or h is a hexadecimal number 
      out of the interval [0000;10FFFF]. The character 
      reference must also refer to a valid xml-character. 
      If that is not true an EConvertError is raised.

      Parameters:
      - S
         The UTF-16BE conformal wideString being transformed.

      Return Value:
         A wideString consisting of a sequence of character 
         references.

      Exceptions:		 
      - EConvertError
         This Delphi exception is raised if S contains an 
         invalid xml-character.
         </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_1ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-1 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-1 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_2ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-2 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-2 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_3ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-3 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-3 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid ISO-8859-3 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_4ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-4 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-4 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_5ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-5 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-5 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid ISO-8859-5 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_6ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-6 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-6 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid ISO-8859-6 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_7ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-7 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-7 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid ISO-8859-7 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_8ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-8 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-8 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid ISO-8859-8 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_9ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-9 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-9 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_10ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-10 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-10 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_13ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-13 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-13 char to be converted.
      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_14ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-14 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-14 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_15ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a ISO-8859-15 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The ISO-8859-15 char to be converted.
      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>KOI8_RToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a KOI8-R char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The KOI8-R char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>cp10000_MacRomanToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a cp10000_MacRoman char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The cp10000_MacRoman char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid cp10000_MacRoman character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>cp1250ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a cp1250 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The cp1250 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid cp1250 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>cp1251ToUTF16Char</emphasis>
                     (const p: char):wideChar;
                     </para>
      <para>Converts a cp1251 char into a UTF-16BE wideChar.</para>

	<para><literallayout>
      Parameters:
      - p
         The cp1251 char to be converted.

      Return Value:
         The equivalent of 'p' as an UTF-16BE wideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'p' contains an 
          invalid cp1251 character.
	</literallayout></para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_1ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-1 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-1 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
	</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_2ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-2 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-2 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
	</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_3ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-3 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-3 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an 
          invalid ISO-8859-3 sequence.</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_4ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-4 string into a UTF-16BE WideString.
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-4 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
	</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_5ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-5 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-5 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an 
          invalid ISO-8859-5 sequence.
          </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_6ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-6 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-6 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an 
          invalid ISO-8859-6 sequence.
          </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_7ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-7 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-7 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an 
          invalid ISO-8859-7 sequence.
          </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_8ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-8 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-8 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an 
          invalid ISO-8859-8 sequence.
          </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_9ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-9 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-9 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
         </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_10ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-10 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-10 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.
      </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_13ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-13 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-13 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.
      </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_14ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-14 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-14 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
      </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>Iso8859_15ToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a ISO-8859-15 string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The ISO-8859-15 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString starting 
         with a byte order mark.
      </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>KOI8_RToUTF16Str</emphasis>
                     (const s: string):WideString;
                     <literallayout>
      Converts a KOI8-R string into a UTF-16BE WideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The KOI8-R string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.
		</literallayout>
                  </para>
               </listitem>

    <listitem>
    <para>
(+) function <emphasis>cp10000_MacRomanToUTF16Str</emphasis>
             (const s: string):WideString;
    <literallayout>
      Converts a cp10000_MacRoman string into a UTF-16BE 
      WideString. No special conversions (e.g. on line 
      breaks) are done.

      Parameters:
      - s
         The cp10000_MacRoman string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains 
          an invalid cp10000_MacRoman sequence.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function <emphasis>cp1250ToUTF16Str</emphasis>
             (const s: string):WideString;
    <literallayout>
      Converts a cp1250 string into a UTF-16BE wideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The cp1250 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains 
          an invalid cp1250 sequence.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function <emphasis>cp1251ToUTF16Str</emphasis>
             (const s: string):WideString;
    <literallayout>
      Converts a cp1251 string into a UTF-16BE wideString. 
      No special conversions (e.g. on line breaks) are done.

      Parameters:
      - s
         The cp1251 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains 
          an invalid cp1251 sequence.
    </literallayout>
    </para>
    </listitem>

    <listitem>
                  <para>
                     	  
(+) function <emphasis>UTF8ToUTF16BEStr</emphasis>
                     (const s: string): wideString;
                     <literallayout>
      Converts an UTF-8 string into an UTF-16BE 
      WideString. No special conversions (e.g. on 
      line breaks) and no XML-char checking are done.

      Parameters:
      - s
         The UTF-8 string to be converted.

      Return Value:
         The content of 's' as an UTF-16BE wideString 
         starting with a byte order mark.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' 
          contains an invalid UTF-8 sequence.
          </literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function <emphasis>UTF16BEToUTF8Str</emphasis>
                     (const ws: wideString; 
					  const expandLF: boolean): string;
                     <literallayout>
      Converts an UTF-16BE widestring into an UTF-8 
      encoded string (and expands LF to CR+LF if 
      expandLF is 'true').  The implementation is 
      optimized for code that contains mainly ASCII 
      characters (&lt;=#$7F) and little above 
      ASCII-chars.  The buffer for the Result is set 
      to the widestrings-length.  With each non-ASCII 
      character the Result-buffer is expanded (by the 
      Insert-function), which leads to performance 
      problems when one processes e.g. mainly Japanese 
      documents.

      Parameters:
      - ws
         The UTF-16BE wideString to be converted.
      - expandLF
         If 'true' all LF characters are being expand 
         to CR+LF.  If 'false' LF characters remain 
         unchanged.

      Return Value:
         The content of 'ws' as an UTF-8 string.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'ws' 
          contains an invalid UTF-16BE sequence.
          </literallayout>
                  </para>
               </listitem>

            </itemizedlist>
         </para>


  <para>In addition to the <quote>Document Object Model (Core) Level 1</quote> guidelines XDOM offers the following functions for UTF-16 surrogate treatment:</para>

  <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16HighSurrogate</emphasis>
                     (const value: integer): WideChar;
                     <literallayout>
      Extracts the high surrogate of a number out of the 
      interval [$10000;$10FFFF].

      Parameters:
      - value
         The number from which the high surrogate is to 
         be extracted.

      Return Value:
         The high surrogate as a WideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if value is 
          not contained in the interval [$10000;$10FFFF].
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16LowSurrogate</emphasis>
                     (const value: integer): WideChar;
                     <literallayout>
      Extracts the high surrogate of a number out of the 
      interval [$10000;$10FFFF].

      Parameters:
      - value
	 The number from which the low surrogate is to 
	 be extracted.

      Return Value:
         The low surrogate as a WideChar.

      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if value is not 
          contained in the interval [$10000;$10FFFF].
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16SurrogateToInt</emphasis>
                     (const highSurrogate, lowSurrogate: WideChar): integer;
                     <literallayout>
      Transforms a high surrogate plus a low surrogate 
      into an integer.

      Parameters:
      - highSurrogate
	 The high surrogate part of the integer.
      - lowSurrogate
	 The low surrogate part of the integer.

      Return Value:
         The integer value of the high surrogate plus 
         the low surrogate.

      Exceptions:		 
      - EConvertError
         This Delphi exception is raised if the ordinal 
         value of the highSurrogate is not contained in 
         the interval [$D800;$DBFF] or if the ordinal 
         value of the lowSurrogate is not contained in 
         the interval [$DC00;$DFFF].
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function <emphasis>IsUtf16HighSurrogate</emphasis>
                     (const S: WideChar): boolean;
    <literallayout>
      Tests whether the specified WideChar is a UTF16 
      high surrogate.

      Return Value:
         'True' if the specified WideChar is a UTF16 high 
         surrogate, otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function <emphasis>IsUtf16LowSurrogate</emphasis>
                     (const S: WideChar): boolean;
    <literallayout>
      Tests whether the specified WideChar is a UTF16 
      low surrogate.

      Return Value:
         'True' if the specified WideChar is a UTF16 
         low surrogate, otherwise 'false'.
    </literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>


  <sect1>
  <title>General Classes</title>

  <sect2>
  <title>TdomNodeType (+)</title>

  <para>TdomNodeType defines all valid node types of the DOM.</para>

  <para>Defined Constants:</para>
  <para>
  <itemizedlist>

    <listitem>
    <para><emphasis>ntUnknown</emphasis>
      The type of the node is not specified.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntElement_Node</emphasis>
      The node is a TdomElement.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntAttribute_Node</emphasis>
      The node is a TdomAttr.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntText_Node</emphasis>
      The node is a TdomText.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntCDATA_Section_Node</emphasis>
      The node is a TdomCDATASection.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntEntity_Reference_Node</emphasis>
      The node is a TdomEntityReference.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntEntity_Node</emphasis>
      The node is a TdomEntity.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntProcessing_Instruction_Node</emphasis>
      The node is a TdomProcessingInstruction.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntComment_Node</emphasis>
      The node is a TdomComment.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntDocument_Node</emphasis>
      The node is a TdomDocument.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntDocument_Type_Node</emphasis>
      The node is a TdomDocumentType.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntDocument_Fragment_Node</emphasis>
      The node is a TdomDocumentFragment.
    </para>
    </listitem>

    <listitem>
    <para><emphasis>ntNotation_Node</emphasis>
      The node is a TdomNotation.
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomNodeTypeSet (+)</title>

  <para>TdomNodeTypeSet = set of TdomNodeType;</para>
  <para>TdomNodeTypeSet defines a set of TdomNodeType instances.</para>
  </sect2>


  <sect2>
  <title>TdomEntityResolveOption (+)</title>

  <para>TdomEntityResolveOption defines constants which are used as parameters to control entity reference expansion during document validation.</para>
  <para><emphasis>Defined constants:</emphasis>
     erReplace, erExpand.
  </para>
  </sect2>


  <sect2>
  <title>TdomContentspecType (+)</title>

  <para>TdomContentspecType defines all valid content specification types of an element type declaration. </para>
  <para><emphasis>Defined constants:</emphasis>
     ctEmpty, ctAny, ctMixed, ctChildren.
  </para>
  </sect2>


  <sect2>
  <title>Document Format Classes (+)</title>

  <para>The following classes, pointers and variables are used to implement the registration of classes derived from the TdomDocument class.  For details see the description of the registerDocumentFormat and getDocumentClass methods of the TdomImplementation class.</para>

  <para>
<literallayout>
type
  TdomDocumentClass = class of TdomDocument;

  PdomDocumentFormat = ^TdomDocumentFormat;

  TdomDocumentFormat = record
    DocumentClass: TdomDocumentClass;
    NamespaceUri:  wideString;
    LocalName:     wideString;
    next:          PdomDocumentFormat;
  end;

var
  domDocumentFormatList: PdomDocumentFormat = nil;
</literallayout>
  </para>
  </sect2>


  <sect2>
  <title>TdomNameValueList = class (+)</title>

  <para>A TdomNameValueList is used to store name-value-pairs of wideStrings.  TdomNameValueList neither tests whether the specified name-value-pairs
  contain only legal XML characters nor performes any other well-formedness test.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property capacity: integer 
    <literallayout>
      The number of wideString pairs for which memory is 
      reserved. This is equivalent to the native Delphi 
      property 'TStringList.Capacity'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: integer (readonly)
    <literallayout>
      The number of wideStrings pairs in the list.
      This is equivalent to the native Delphi property 
      'TStringList.count'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property names[index: integer]: wideString (readonly)
    <literallayout>
      The 'name' part of wideString pair on the indexth 
      position in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property values[index: integer]: wideString (readonly)
    <literallayout>
      The 'value' part of wideString pair on the indexth 
      position in the list.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create;
    <literallayout>
      Creates a new TdomNameValueList object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    destructor destroy; override;
    <literallayout>
      Destroys a TdomNameValueList object.  Do not call
      'destroy' directly, but use 'free', inherited
      from TObject, instead.  Free tests whether the
      TdomNameValueList has not already been freed, and 
      only then calls 'destroy'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function add(const name,
                       value: wideString): integer; virtual;
    <literallayout>
      Adds a name-value-pair to the list.
      
      Parameters:
      - name
         The 'name' part of the name-value-pair to be added.
      - value
         The 'value' part of the name-value-pair to be added.
      
      Return value:
         The index of the newly added name-value-pair in the 
         list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure clear; virtual;
    <literallayout>
      Deletes all name-value-pair from the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure delete(const item: integer); virtual;
    <literallayout>
      Deletes a name-value-pair from the list.
      
      Parameters:
      - item
         The list index of the name-value-pair to be deleted.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure exchange(const index1,
                             index2: integer); virtual;
    <literallayout>
      Exchanges the position of the two specified 
      name-value-pair in the list.
      
      Parameters:
      - index1
         The list index of the first name-value-pair.
      - index2
         The list index of the second name-value-pair.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function indexOf(const name,
                           value: wideString): integer; virtual;
    <literallayout>
      Returns the position of the first name-value-pair
      in the list with the specified name and value.
      
      Parameters:
      - name
         The 'name' part of the name-value-pair.
      - value
         The 'value' part of the name-value-pair.
      
      Return value:
         The index of the specified name-value-pair in the 
         list, or -1 if non such pair exists.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function indexOfName(const name: wideString): integer; virtual;
    <literallayout>
      Returns the position of the first name-value-pair 
      in the list with the specified 'name' part.
      
      Parameters:
      - name
         The 'name' part of the name-value-pair.
      
      Return value:
         The index of the first name-value-pair in the 
         list with the specified name, or -1 if non such 
         pair exists.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure insert(const index: integer;
                     const name,
                           value: wideString); virtual;
    <literallayout>
      Inserts a name-value-pair at the specified position
      in the list.
      
      Parameters:
      - index
         The position where the name-value-pair is to 
         be inserted.
      - name
         The 'name' part of the name-value-pair to be 
         inserted.
      - value
         The 'value' part of the name-value-pair to be 
         inserted.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  </sect2>


  <sect2>
  <title>TdomCustomStr = class (+)</title>

  <para>TdomCustomStr is used by some XDOM classes to improve the performance of concating wideStrings. Do not use this class in your own applications, because its functionality might be changed in future XDOM versions.</para>
  </sect2>

  <sect2>
  <title>TdomWideStringStream = class(TStream) (+)</title>

  <para>TdomWideStringStream is a stream interface for wideStrings.  Its purpose is to avoid excessive memory re-allocations that occur with wideStrings because they are not reference counted.  Note that when the dataString property is accesses, the complete  wideString will be copied out.</para>
  </sect2>

  <sect2>
  <title>TConversionStream = class(TStream) (+)</title>

  <para>TConversionStream is an input/output stream for other streams. Its purpose is to transform data as they are written to or read from a target stream.</para>
  </sect2>

  <sect2>
  <title>TUTF16BEToUTF8Stream = class(TConversionStream) (+)</title>

  <para>TUTF16BEToUTF8Stream is a descendant from TConversionStream which converts an UTF-16BE stream into an UTF-8 encoded stream (and expands LF to CR+LF if its protected expandLF property is 'true').</para>
  </sect2>

  </sect1>


  <sect1>
  <title>TdomImplementation = class (*+)</title>
  <para>TdomImplementation provides a number of methods for performing operations that are independent of any particular instance of the document object model.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
(+) property cmExternalObjects: TdomCMNodeList (readonly)
    <literallayout>
      A list of all TdomCMExternalObjects that had been 
      created by this TdomImplementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property cmInternalObjects: TdomCMNodeList (readonly)
    <literallayout>
      A list of all TdomCMInternalObjects that had been 
      created by this TdomImplementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property cmObjects: TdomCMNodeList (readonly)
    <literallayout>
      A list of all TdomCMObjects that had been created 
      by this TdomImplementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property documents: TdomNodeList (readonly)
    <literallayout>
      A list of all TdomDocuments that had been created 
      by this TdomImplementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property documentTypes: TdomNodeList (readonly)
    <literallayout>
      A list of all TdomDocumentTypes which had been 
      created by this TdomImplementation and which are 
      currently not attached to any TdomDocument.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnExternalParsedEntity: TXmlParserEvent
    <literallayout>
      TXmlParserEvent = 
          procedure(      sender: TObject;
                    const parentSystemId: wideString;
                      var publicId,
                          systemId,
                          content: WideString;
                      var action: TXmlParserAction)
                   of object;

      This event is called when a declaration of an external
      parsed entity is found during document validation.

      Parameters:
      - sender
         The parser object that called the event.
      - parentSystemId
         The system identifier of the document which
         referred to the external parsed entity
         [this information is not sufficient to reliably 
         calculate the absolute URI of the external parsed
         entity if the property 'systemId' does only provide 
         a relative URI.  So a future XDOM release will 
         modify the definition of this parameter to provide 
         the system identifier of the file which declared 
         the entity].

      Var-Parameters:
      - publicId 
         The public identifier of the external parsed 
         entity as specified in its declaration, or an 
         empty string, if none is specified.  An event 
         method may modify it, e.g. to normalize public 
         identifiers or to retrieve a public identifier 
         from a system identifier.
      - systemId 
         The system identifier of the external parsed 
         entity as specified in its declaration, or an 
         empty string, if none is specified.  An event 
         method may modify it, e.g. to normalize system 
         identifiers or to retrieve a system identifier 
         if only a public identifier was specified.
      - content
         If 'action' is set to 'paOK' then the event routine 
         for OnExternalSubset must return the text of the 
         external parsed entity as an UTF-16BE encoded 
         wideString.  This means, that any character 
         encoding transformation must take place before the
         text is passed to the TdomImplementation using this
         event.  Likewise, if the original external parsed 
         entity starts with a text declaration, it must be 
         stripped off before passing it -- even if the 
         declared encoding was UTF-16.
      - action
         By default 'action' is set to 'paFail', which 
         means, that the requested external pased entity 
         could not be retrieved.  If the requested external 
         parsed entity is available, 'action' must be set 
         to 'paOK' and the content of the external parsed
         entity be returned via the 'content' parameter.  
         If 'action' is set to 'paRetry', the parser 
         immediately calls the event routine for 
         OnExternalParsedEntity again using the parameters 
         as they have been modified meanwhile.  When 
         setting 'action' to 'paRetry' one has to be 
         careful to avoid infinite loops.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(aOwner: TComponent); override;
    <literallayout>
      Creates a new TdomImplementation object. 
      Note, that TdomImplementation objects are 
      automatically being created when adding them 
      from the component's palette onto a form.

      Parameters:
      - AOwner
         The component that holds the new 
         TdomImplementation object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure Clear; virtual;
    <literallayout>
      Frees all TdomDocuments, TdomDocumentTypes, 
      TdomCMObjects, TdomCMExternalObjects and
      TdomCMInternalObjects that had been created 
      by this TdomImplementation.  If there are 
      TdomNodes, TdomNodeIterators, or 
      TdomTreeWalkers that belong to a TdomDocument 
      object to be freed, they are freed, too. 
      Afterwards, the 'cmExternalObjects', 
      'cmInternalObjects'. 'cmObjects', 'documents', 
      and 'documentTypes' lists are empty.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeCMExternalObject(var arg: TdomCMExternalObject); virtual;
    <literallayout>
      Removes the specified TdomCMExternalObject from 
      its associated TdomCMObject, frees it and sets
      'arg' to nil.

      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomCMExternalObject 
         is not contained in the 'cmExternalObjects' 
         list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeCMInternalObject(var arg: TdomCMInternalObject); virtual;
    <literallayout>
      Removes the specified TdomCMInternalObject from 
      its associated TdomCMObject, frees it and sets
      'arg' to nil.

      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomCMInternalObject 
         is not contained in the 'cmInternalObjects' 
         list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeCMObject(var arg: TdomCMObject); virtual;
    <literallayout>
      Removes the specified TdomCMObject from the 
      'cmObjects' list, frees it and sets 'arg to
      nil.

      Note, that freeing a TdomCMObject (or a document 
      with its associated TdomCMObject) will only 
      de-associate, but not free an external content 
      model which is associated with it. 
      
      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomCMObject is not 
         contained in the 'cmObjects' list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeDocument(var doc: TdomDocument); virtual;
    <literallayout>
      Removes the specified TdomDocument from the
      'documents' list, frees it and sets 'arg' to nil. 
      If there are TdomNode, TdomNodeIterator, or 
      TdomTreeWalker objects that belong to a 
      TdomDocument object to be freed, they are freed, 
      too.  If there is a TdomCMObject object
      associated with the document, it is freed as well;
      however, any external content model associated with 
      this TdomCMObject will not be freed, but only be 
      de-associated.

      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomDocument is 
         not contained in the 'documents' list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure FreeDocumentType(var docType: TdomDocumentType); virtual;
    <literallayout>
      Removes the specified TdomDocumentType from 
      the 'documentTypes' list, frees it and sets
      'docType' to nil. 

      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomDocumentType 
         is not contained in the 'documentTypes' 
         list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function createCMExternalObject(const pubId,
                                          sysId: wideString): TdomCMExternalObject; virtual;
    <literallayout>
      Creates an empty TdomCMExternalObject.

      Parameters:
      - pubId 
         The public identifier for the TdomCMExternalObject 
         object, or an empty wideString if none is provided. 
      - sysId 
         The system identifier for the TdomCMExternalObject 
         object, or an empty wideString if none is provided. 

      Return Value:
         A new TdomCMExternalObject object. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function createCMInternalObject(const pubId,
                                          sysId: wideString): TdomCMExternalObject; virtual;
    <literallayout>
      Creates an empty TdomCMInternalObject.
      
      Parameters:
      - pubId 
         The public identifier for the TdomCMInternalObject 
         object, or an empty wideString if none is provided. 
      - sysId 
         The system identifier for the TdomCMInternalObject 
         object, or an empty wideString if none is provided. 

      Return Value:
         A new TdomCMInternalObject object. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function createCMObject: TdomCMObject; virtual;
    <literallayout>
      Creates an empty TdomCMObject.
      
      Return Value:
         A new TdomCMObject object. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function createDocument(const name: WideString;
                                  doctype: TdomDocumentType): TdomDocument;
                                  virtual;
    <literallayout>
      Creates a TdomDocument with its document element 
      using a non-namespace aware method.*

      Parameters:
      - Name
         The name of the TdomElement to create.
      - doctype
         The type of document to be created or nil. 
         When doctype is not nil, its Node.ownerDocument 
         attribute is set to the document being created, 
         it is removed from the documentTypes list, and 
         it is further treated as if it had been created 
         by the new TdomDocument object.

      Return Value:
         A new TdomDocument object, or an object of a 
         class derived from TdomDocument if this class 
         has previously been registered with the 
         specified name (see the description of 
         RegisterDocumentFormat for more details). 

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified name contains an illegal 
         character.
      - EWrong_Document_Err
         Raised if doctype has already been used with a 
         different document or was created from a different 
         implementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function createDocumentNS(const namespaceURI,
                                    qualifiedName: WideString;
                                    doctype: TdomDocumentType): TdomDocument;
                                    virtual;
    <literallayout>
      Creates a TdomDocument with its document element 
      using a namespace aware method.

      Parameters:
      - NamespaceURI
         The namespace URI of the TdomElement to create.
      - QualifiedName
         The qualified name of the TdomElement to create.
      - doctype
         The type of document to be created or nil. 
         When doctype is not nil, its Node.ownerDocument 
         attribute is set to the document being created, 
         it is removed from the documentTypes list, and 
         it is further treated as if it had been created 
         by the new TdomDocument object.

      Return Value:
         A new TdomDocument object, or an object of a 
         class derived from TdomDocument if this class 
         has previously been registered with the specified 
         namespace URI and qualified name (see the 
         description of RegisterDocumentFormat for more 
         details).

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains 
         an illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if 
         the qualifiedName has a prefix and the 
         namespaceURI is an empty string, if the 
         qualifiedName has a prefix that is 'xml' and 
         the namespaceURI is different from 
         'http://wwww.w3.org/XML/1998/namespace' [*, 
         if the qualifiedName has a prefix that is 
         'xmlns' and the namespaceURI is different from 
         'http://www.w3.org/2000/xmlns/', or if the 
         qualifiedName is 'xmlns', and the namespaceURI 
         is different from 'http://www.w3.org/2000/xmlns/'].
      - EWrong_Document_Err
         Raised if doctype has already been used with 
         a different document or was created from a 
         different implementation.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>


<!-- The following two methods have been removed from this version of the XDOM, 
but will be reintroduced in a further release.

(#*)function createDocumentType(const name,
                                      publicId,
                                      systemId,
                                      intSubset: WideString): TdomDocumentType;
                                      virtual;
    <literallayout>
      Creates an empty TdomDocumentType using a 
      non-namespace aware method.* Entity declarations 
      and notations are not made available. Entity 
      reference expansions and default attribute 
      additions do not occur.

      Parameters:
      - Name
         The name of the document type to be created.
      - publicId 
         The public identifier of the document type.
      - systemId 
         The system identifier of the document type.
      - IntSubset
         The internal subset.
      Return Value:
         A new TdomDocumentType object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified name contains an illegal
         character.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function createDocumentTypeNS(const qualifiedName,
                                        publicId,
                                        systemId,
                                        intSubset: WideString): TdomDocumentType;
                                        virtual;
    <literallayout>
      Creates an empty TdomDocumentType using a 
      namespace aware method. Entity declarations 
      and notations are not made available. Entity 
      reference expansions and default attribute 
      additions do not occur.

      Parameters:
      - qualifiedName
         The qualified name of the document type 
         to be created.
      - publicId 
         The public identifier of the document type.
      - systemId 
         The system identifier of the document type.
      - IntSubset
         The internal subset.

      Return Value:
         A new TdomDocumentType object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name 
         contains an illegal character.
      - ENamespace_Err
         Raised if the specified qualified name is 
         malformed.
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
-->

    function HasFeature(const feature, version: WideString): boolean;
    <literallayout>
      Test if the DOM implementation implements a specific 
      feature. 

      Parameters:
      - feature
         The package name of the feature to test.
      - version
         This is the version number of the package name 
         to test.
 
      Return Value:
         'True' if the feature is implemented in the 
         specified version, 'false' otherwise.  If the 
         version is not specified, supporting any version 
         of the feature will cause the method to return 
         'true'.  In other words: This function in the 
         current XDOM returns 'true' if version is '1.0' 
         and feature is 'XML', or if version is '2.0' and
         feature is either 'XML' or 'TRAVERSAL' or 'VIEWS',
         or if version is an empty string and feature is 
         either 'XML' or 'TRAVERSAL' or 'VIEWS' -- in all
         other cases this funtion returns 'false'.
    </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function GetDocumentClass(const aNamespaceUri,
                                    aQualifiedName: wideString):
                                    TdomDocumentClass; virtual;
                     <literallayout>
      Retrieves the last TdomDocumentClass that had 
      been registered with the specified namespace 
      URI and local name.

      Parameters:
      - aNamespaceUri
         The namespace URI associated with the 
	 registered document class.
      - aQualifiedName
         The qualified name associated with the 
	 registered document class.

      Return Value:
         A class derived from TdomDocument which 
         is associated with the specified namespace 
         URI and qualified name.

      Exceptions:
      - EDocumentFormatUnknown
         Raised if there is no document class which 
         is associated with the specified namespace 
         URI and local name.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) class procedure RegisterDocumentFormat(const aNamespaceUri,
                                                 aQualifiedName: wideString;
                                                 aDocumentClass:
                                                 TdomDocumentClass); virtual;
    <literallayout>
      Registers a new document class to the global 
      list of registered document classes.  The list 
      being global means, that it is used from all 
      TdomImplementation objects of an application 
      simultaneously. The new TdomDocument object 
      returned by the createDocument(name, doctype) 
      method is of type aDocumentClass if 'name' 
      equals 'aQualifiedName' and 'aNamespaceUri' is 
      an empty string. The new TdomDocument object 
      returned by the createDocumentNS(namespaceURI, 
      qualifiedName, doctype) method is of type 
      aDocumentClass if 'name' equals 'aQualifiedName' 
      and 'namespaceURI' equals 'aNamespaceUri'. 
      Note, that this also effects the 
      TXmlToDomParser.fileToDom method.

      Use RegisterDocumentFormat if you want to 
      implement your own node types for special 
      purposes. For example if you want to implement 
      a special treatment of XHTML-anchors you can do 
      the following:
        1) Derive a new node type from TdomElement:
             type TxhtmlAnchor = class(TdomElement)
               ...
             end; 
        2) Derive a new node type from TdomDocument 
           including a factory method for TxhtmlAnchor 
           objects:
             type TxhtmlDocument = class(TdomDocument)
               ...
             public;
               ...
               function createAnchor: TxhtmlAnchor; virtual;
             end; 
        3) Register the new document class:
             MyDomImplementation.RegisterDocumentFormat(
                               '','html',TxhtmlDocument);
        4) Now you can create a new TxhtmlDocument and 
           use its factory method to create an anchor 
           object:
             procedure test(
                myDomImplementation: TdomImplementation);
             var
               myXhtmlDocument: TxhtmlDocument;
               myAnchor: TxhtmlAnchor; 
             begin 
               myXhtmlDocument:= 
                 TxhtmlDocument(
                   MyDomImplementation.createDocument(
                                           'html',nil)
                               );
               myAnchor:= 
                 myXhtmlDocument.createAnchor; 
             end;
        If you want to use the above example with 
        namespace aware functions you should bind it to 
        the XHTML1.0's namespace URI 
        "http://www.w3.org/1999/xhtml".

      Parameters:
      - aNamespaceUri
          The namespace URI associated with the document 
          class to be registered.
      - aQualifiedName
          The qualified name associated with the document 
          class to be registered.  The qualified name 
          'default' is internally used by XDOM and is 
          therefore illegal.
      - aDocumentClass
          The class derived from TdomDocumentto be 
          registered.
      Exceptions:
      - EInvalid_Access_Err 
          Raised if the illegal qualified name 'default', 
          which is reserved for internal use in XDOM, is 
          specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function SupportsDocumentFormat(const aNamespaceUri,
                                          aQualifiedName: wideString): boolean;
                                          virtual;
    <literallayout>
      Tests whether there is any document class registered 
      for the specified namespace URI and qualified name.

      Parameters:
      - aNamespaceUri
         The namespace URI associated with a registered 
         document class.
      - aQualifiedName
         The qualified name associated with a registered 
         document class.

      Return Value:
         If there is a document class which is associated 
         with the specified namespace URI and local name 
         'true' is returned, otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) class procedure UnregisterDocumentClass(const aDocumentClass:
TdomDocumentClass); virtual;
    <literallayout>
      Removes all references to the specified document 
      class from the global list of registered document 
      classes.  The list being global means, that it is 
      used from all TdomImplementation objects of an 
      application simultaneously. UnregisterDocumentClass 
      undoes all previous registrations of the specified 
      document class carried out by the method 
      RegisterDocumentFormat.

      Parameters:
      - aDocumentClass
         A class derived from TdomDocument whoes 
         references are being removed from the global 
         list of registered document classes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomNodeList = class</title>

  <para>TdomNodeList provides the abstraction of an ordered collection of nodes. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Length: integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance. 
      The range of valid child node indices is 0 to 
      length-1 inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function IndexOf(const Node: TdomNode): integer; virtual;
    <literallayout>
      Returns the index of the item Node in the 
      collection. If Node is not a member of the 
      collection, -1 is returned.

      Parameters:
      - Node
         The node whoes index is being retrieved.

      Return Value:
         The index position of the node in the 
         collection, or -1 if Node is not a member 
         of the collection.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
  <listitem>
  <para>
    constructor Create(const NodeList: TList);
    <literallayout>
      Creates a new instance of a TdomNodeList object.

      Parameters:
      - NodeList
         The collection of nodes which is to be 
         accessed by this TdomNodeList, given as a 
         TList.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Item(const index: integer): TdomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection. 
      If index is greater than or equal to the number 
      of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection

      Return Value:
         The node at the index position in the 
         collection, or nil if that is not a valid 
         index.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
</para>
</sect1>


  <sect1>
  <title>TdomElementsNodeList = class(TdomNodeList) (+)</title>

  <para>TdomElementsNodeList provides the abstraction of an ordered collection of TdomElement child nodes of a TdomDocument. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property Length: integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance. 
      The range of valid child node indices is 0 to 
      length-1 inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const QueryName: WideString; const StartElement:
TdomNode);
    <literallayout>
      Creates a new instance of a TdomElementsNodeList 
      object.

      Parameters:
      - QueryName
         The tagname of the TdomElement nodes that are 
         accessed through the TdomElementsNodeList. If 
         QueryName has the value '*' then every 
         TdomElement node is being retrieved.
      - StartElement
         The TdomElementsNodeList only retrieves the 
         TdomElement nodes which are descendants of the 
         StartElement.  The StartElement itself is not 
         being retrieved.  To retrieve all TdomElement 
         nodes the StartElement should be set to the
         TdomDocument object of a document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function IndexOf(const Node: TdomNode): integer; virtual;
    <literallayout>
      Returns the index of the item Node in the 
      collection.  If Node is not a member of the 
      collection, -1 is returned.

      Parameters:
      - Node
         The node whoes index is being retrieved.

      Return Value:
         The index position of the node in the 
         collection, or -1 if Node is not a member 
         of the collection.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function Item(const index: integer): TdomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection. 
      If index is greater than or equal to the 
      number of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection
      Return Value:
         The node at the index position in the 
         collection, or nil if that is not a valid 
         index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomElementsNodeListNS = class(TdomNodeList) (+)</title>

  <para>TdomElementsNodeListNS provides the abstraction of an ordered collection of TdomElement child nodes of a TdomDocument. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
 
    <listitem>
    <para>
(+) property Length: integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance. 
      The range of valid child node indices is 0 to 
      length-1 inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const QueryNamespaceURI,
                             QueryLocalName: WideString;
                       const StartElement: TdomNode); virtual;
    <literallayout>
      Creates a new instance of a TdomElementsNodeList 
      object;

      Parameters:
      - QueryNamespaceURI
         The namespace URI of the TdomElement nodes to 
         mach on.  The special value '*' matches all 
         namespaces.
      - QueryLocalName
         The local name of the TdomElement nodes to 
         mach on. The special value '*' matches all 
         local names.
      - StartElement
         The TdomElementsNodeList only retrieves the 
         TdomElement nodes which are descendants of 
         the StartElement.  The StartElement itself 
         is not being retrieved.  To retrieve all 
         TdomElement nodes the StartElement should be 
         set to the TdomDocument object of a document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function IndexOf(const Node: TdomNode): integer; virtual;
    <literallayout>
      Returns the index of the item Node in the 
      collection.  If Node is not a member of the 
      collection, -1 is returned.

      Parameters:
      - Node
         The node whoes index is being retrieved.

      Return Value:
         The index position of the node in the 
         collection, or -1 if Node is not a member 
         of the collection.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function Item(const index: integer): TdomNode; virtual;
    <literallayout>
      Returns the indexth item in the collection. 
      If index is greater than or equal to the 
      number of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection

      Return Value:
         The node at the index position in the 
         collection, or nil if that is not a valid 
         index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomSpecialNodeList = class(TdomNodeList) (+)</title>

  <para>TdomSpecialNodeList provides the abstraction of an ordered collection of nodes of a special node type. The items in the NodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property Length: integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance. 
      The range of valid child node indices is 0 to 
      length-1 inclusive.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function IndexOf(const Node: TdomNode): integer; override;
    <literallayout>
      Returns the index of the item Node in the 
      collection.  If Node is not a member of the 
      collection, -1 is returned.

      Parameters:
      - Node
         The node whoes index is being retrieved.

      Return Value:
         The index position of the node in the 
         collection, or -1 if Node is not a member 
         of the collection.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const NodeList: TList;
                       const AllowedNTs: TDomNodeTypeSet); virtual;
    <literallayout>
      Creates a new instance of a TdomNodeList 
      object;

      Parameters:
      - NodeList
         The collection of nodes which is to be 
         accessed by this TdomSpecialNodeList, 
         given as a TList.
      - AllowedNTs
         A set of TdomNodeType objects that indicates 
         which nodes from the TdomNodeList will be 
         accessible through the TdomSpecialNodeList.  
         Only those nodes of the NodeList which have 
         one of the indicated node types are being 
         returned by the TdomSpecialNodeList, the 
         others are being silently ignored.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function Item(const index: integer): TdomNode; override;
    <literallayout>
      Returns the indexth item in the collection. 
      If index is greater than or equal to the 
      number of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection

      Return Value:
         The node at the index position in the 
         collection, or nil if that is not a valid 
         index.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomNamedNodeMap = class(TdomNodeList) (#*)</title>

  <para>Objects implementing the TdomNamedNodeMap object are used to represent collections of nodes that can be accessed by name. TdomNamedNodeMap are not maintained in any particular order. Objects contained in an object implementing TdomNamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a TdomNamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.</para>
         
  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property isReadonly: boolean (readonly)
    <literallayout>
      Returns 'true' if the TdomNamedNodeMap
      object is readonly, otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: integer (readonly)
    <literallayout>
      The number of nodes in the NodeList instance. 
      The range of valid child node indices is 0 to 
      length-1 inclusive.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property namespaceAware: boolean
    <literallayout>
      This property is by default false. It can be 
      switched as long as the TdomNamedNodeMap has 
      no child nodes. If namespaceAware is true, 
      calling the following methods will lead to an
      ENamespace_Err exception: getNamedIndex, 
      getNamedItem, removeNamedItem, setNamedItem. 
      If namespaceAware is false, calling the 
      following methods will lead to an exception: 
      getNamedItemNS, removeNamedItemNS, setNamedItemNS. 
      Trying to modify namespaceAware while the 
      TdomNamedNodeMap has child nodes will raise a 
      ENo_Modification_Allowed_Err.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property ownerNode: TdomNode (readonly)
    <literallayout>
      The TdomNode which uses the TdomNamedNodeMap, 
      or nil if the TdomNamedNodeMap is not used by 
      a TdomNode.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) function getNamedIndex(const Name: WideString): integer; virtual;
    <literallayout>
      Returns the index of the Node identified by 
      its name. If there is no node named Name in 
      the list, -1 is returned.

      Exceptions:
      - ENamespace_Err 
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function removeItem(const Arg: TdomNode): TdomNode; virtual;
    <literallayout>
      Removes a node. [Not yet implemented: If the 
      removed node is a TdomAttr with a default 
      value it is immediately replaced.]

      Paramters:
      - Arg
         The node to remove.

      Return Value:
         The node removed from the list.

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if Arg is not in the list.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner, AOwnerNode: TdomNode; 
                       const NodeList: TList); virtual;
    <literallayout>
      Creates a new instance of a TdomNamedNodeMap object;

      Parameters:
      - AOwner
         The TdomNode that creates the TdomNamedNodeMap
      - AOwnerNode
         The TdomNode which uses the TdomNamedNodeMap, 
         or nil if the TdomNamedNodeMap is not used by 
         a TdomNode.
      - NodeList
         The collection of nodes which is to be accessed 
         by this TdomNamedNodeMap, given as a TList.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function getNamedItem(const name: WideString): TdomNode;
    <literallayout>
      Retrieves a node specified by name.

      Parameters:
      - Name
         Name of a node to retrieve.
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
      Return Value:
         A TdomNode (of any type) with the specified nodeName, 
         or nil if it does not identify any node in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function setNamedItem(const Arg: TdomNode): TdomNode; virtual;
    <literallayout>
      Adds a node using its nodeName property.  As the 
      nodeName property is used to derive the name which 
      the node must be stored under, multiple nodes of 
      certain types (those that have a "special" string 
      value) cannot be stored as the names would clash. 
      This is seen as preferable to allowing nodes to be 
      aliased. 

      Parameters:
      - arg
         A node to store in a named node map.  The node 
         will later be accessible using the value of the 
         'nodeName' property of the node.  If a node with 
         that name is already present in the map, it is 
         replaced by the new one.

      Return Value:
         If the new TdomNode replaces an existing node 
         the replaced tdomNode is returned, otherwise nil 
         is returned. 

      Exceptions:
      - EWrong_Document_Err 
         Raised if arg was created from a different 
         TdomDocument than the one that created the 
         TdomNamedNodeMap.
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedNodeMap is readonly.
      - EInuse_Attribute_Err (*)
         Raised if arg is a TdomAttr that is already an 
         attribute of another Element object [*that 
         means: if the ownerElement of the TdomAttr is
         neither nil nor identical with the ownerNode of 
         the map]. The DOM user must explicitly clone 
         Attr nodes to re-use them in other elements.
      - EInuse_Node_Err (+)
         Raised if arg is a TdomNode that is already a 
         child of a node (if its parentNode property is 
         not nil).
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function removeNamedItem(const Name: WideString): TdomNode; virtual;
    <literallayout>
      Removes a node specified by name.

      Parameters:
      - name
         The nodeName of the node to remove. [* not yet 
         implemented: When this TdomNamedNodeMap contains 
         the attribute attached to an element, as returned 
         by the attributes property of the TdomNode interface, 
         if the removed attribute is known to have a default 
         value, an attribute immediately appears containing 
         the default value as well as the corresponding 
         namespace URI, local name, and prefix when applicable]

      Return Value:
         The node removed from the map if such a name exists. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
         Raised if namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function item(const index: integer): TdomNode; virtual;
    <literallayout>
      Returns the indexth item in the map. If index is 
      greater than or equal to the number of nodes in 
      the map, nil is returned.

      Parameters:
      - index
         Index into the map.

      Return Value:
         The node at the indexth position in the 
         TdomNamedNodemmap, or nil if that is not a 
         valid index.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function getNamedItemNS(const namespaceURI,
                                  localName: WideString): TdomNode;
    <literallayout>
      Retrieves a node specified by local name and 
      namespace URI.

      Parameters:
      - namespaceURI
         The namespace URI of a node to retrieve.
      - localName
         The local name of a node to retrieve.

      Exceptions:
      - ENamespace_Err (+)
         Raised if namespaceAware is false.

      Return Value:
         A TdomNode (of any type) with the specified local 
         name and namespace URI, or nil if it does not 
         identify any node in the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function setNamedItemNS(const arg: TdomNode): TdomNode; virtual;
    <literallayout>
      Adds a node using its 'namespaceURI' and 'localName' 
      property.  If a node with that namespace URI and 
      that local name is already present in this map, it
      is replaced by the new one.

      Parameters:
      - arg
         A node to store in a named node map. The node 
         will later be accessible using the value of 
         the 'namespaceUri' and 'localName' property of 
         the node.  If a node with those namespace URI 
         and local name is already present in the map, it 
         is replaced by the new one.

      Return Value:
         If the new tdomNode replaces an existing node 
         the replaced tdomNode is returned, otherwise nil 
         is returned. 

      Exceptions:
      - EWrong_Document_Err 
         Raised if arg was created from a different 
         TdomDocument than the one that created the 
         TdomNamedNodeMap.
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedNodeMap is readonly.
      - EInuse_Attribute_Err (*)
         Raised if arg is a TdomAttr that is already an 
         attribute of another Element object [*that 
         means: if the ownerElement of the TdomAttr is
         neither nil nor identical with the ownerNode of 
         the map]. The XDOM user must explicitly clone Attr 
         nodes to re-use them in other elements.
      - EInuse_Node_Err (+)
         Raised if arg is a TdomNode that is already a 
         child of a node (if its parentNode property is not 
         nil).
      - ENamespace_Err (+)
         Raised if namespaceAware is false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function removeNamedItemNS(const namespaceURI,
                                     localName: WideString): TdomNode; virtual;
    <literallayout>
      Removes a node specified by local name and namespace 
      URI.

      Parameters:
      - namespaceURI
         The namespace URI of a node to remove.
      - localName
         The local name of a node to remove. [* Not yet 
         implemented: When this TdomNamedNodeMap contains 
         the attribute attached to an element, as returned 
         by the attributes property of the TdomNode interface, 
         if the removed attribute is known to have a default 
         value, an attribute immediately appears containing 
         the default value as well as the corresponding 
         namespace URI, local name, and prefix.]
      Return Value:
         The node removed from the map if such a local name 
         and namespaceURI exists. 
      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedNodeMap is readonly.
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
         Raised if namespaceAware is false.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomNode = class</title>

  <para>The TdomNode object is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects descending from TdomNode expose methods for dealing with children, not all objects descending from TdomNode may have children. For example, TdomText nodes may not have children, and adding children to such nodes results in a EdomException being raised.</para>

  <para>The attributes nodeName, nodeValue and attributes are included as a mechanism to get at node information without casting down to the specific derived interface. In cases where there is no obvious mapping of these attributes for a specific nodeType (e.g., nodeValue for an TdomElement or attributes for a TdomComment), this returns '' or nil respectivly.</para>

  <para>The values of nodeName, nodeValue, and attributes vary according to the node type as follows:</para>

  <para>
  <literallayout>

                         nodeName         nodeValue     attributes
=====================================================================
Attribute             name of attribute  value of          nil    
                                         attribute
---------------------------------------------------------------------
CDATASection          #cdata-section     content of the    nil
                                         CDATA Section
---------------------------------------------------------------------
Comment               #comment           content of the    nil
                                         comment
---------------------------------------------------------------------
Document              #document          ''                nil
---------------------------------------------------------------------
DocumentFragment      #document-fragment ''                nil
---------------------------------------------------------------------
DocumentType          document type name ''                nil
---------------------------------------------------------------------
Element               tagName            ''            NamedNodeMap
---------------------------------------------------------------------
Entity                entity name        ''                nil
---------------------------------------------------------------------
EntityReference       name of entity     ''                nil
                      referenced
---------------------------------------------------------------------
Notation              notation name      ''                nil
---------------------------------------------------------------------
ProcessingInstruction target             entire content    nil
                                         excluding the
                                         target
---------------------------------------------------------------------
Text                  #text              content of the    nil
                                         text node
  </literallayout>
  </para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Attributes: TdomNamedNodeMap (readonly)
    <literallayout>
      Provides access to a NamedNodeMap containing the 
      node's attributes (if it is an TdomElement) or 
      nil otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ChildNodes: TdomNodeList (readonly)
    <literallayout>
      A NodeList object that contains all children of 
      this node. If there are no children, this is a 
      NodeList containing no nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property code: WideString (readonly)
    <literallayout>
      Returns the cooresponding XML-code of the node 
      and all its children.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property FirstChild: TdomNode (readonly)
    <literallayout>
      The first child of a node. If there is no such 
      node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property isReadonly: boolean (readonly)
    <literallayout>
      Returns 'true' if the node is readonly,
      otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LastChild: TdomNode (readonly)
    <literallayout>
      The last child of a node. If there is no such 
      node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property LocalName: TdomNode (readonly)
    <literallayout>
      Returns the local part of the qualified name 
      of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NamespaceURI: WideString (readonly)
    <literallayout>
      The namespace URI given at creation time of 
      this node, or an empty wideString if it is 
      unspecified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextSibling: TdomNode (readonly)
    <literallayout>
      The node immediately following the current 
      node. If there is no such node, this returns 
      nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeName: WideString (readonly)
    <literallayout>
      The name of the node depends on its type; see 
      the table above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeType: TdomNodeType (readonly)
    <literallayout>
      A code representing the type of the underlying 
      object's type, as defined above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeValue: WideString (readonly)
    <literallayout>
      The value of this node, depending on its type; 
      see the table above. When it is defined to be
      an empty wideString, setting it has no effect.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerDocument: TdomDocument (readonly)
    <literallayout>
      Provides access to the Document object associated 
      with this Node. This is also the Document object 
      used to create new Nodes. When the Node is a 
      Document this is nil. When this node is a 
      TdomDocument or a TdomDocumentType which is not 
      used with any TdomDocument yet, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ParentNode: TdomNode (readonly)
    <literallayout>
      The parent of the given Node instance. All nodes, 
      except TdomDocument, TdomDocumentFragment, TdomAttr, 
      TdomEntity , and TdomNotation may have a parent. 
      However, if a node has just been created and not yet 
      added to the tree, or if it has been removed from the 
      tree, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreviousSibling: TdomNode (readonly)
    <literallayout>        
      The node immediately preceding the current node. 
      If there is no such node, nil is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property Prefix: WideString
    <literallayout>
      The namespace prefix of this node or an empty
      wideString if it is unspecified. Note that
      setting this property, when permitted, changes 
      the 'nodeName' property, which holds the 
      qualified name, as well as the 'tagName' and 
      'name' properties of TdomElement and TdomAttr 
      objects, when applicable. [*Not yet implemented: 
      Note also that changing the prefix of an attribute 
      that is known to have a default value, does not
      make a new attribute with the default value and 
      the original prefix appear, since the 'namespaceURI' 
      and 'localName' do not change.
      
      For nodes of any type other than TdomElement and 
      TdomAttribute and nodes created with non namespace
      aware methods, such as 'createElement' from the 
      TdomDocument class, this is always an empty string.]
      
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified prefix contains an 
         illegal character.
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENamespace_Err (*)
         Raised if the specified prefix is malformed, 
         if the namespaceURI of this node is an empty 
         string, if the specified prefix is 'xml' and 
         the namespaceURI is different from 
         'http://wwww.w3.org/XML/1998/namespace', if 
         this not is a TdomAttr and the specified prefix 
         is 'xmlns' and the namespaceURI is different
         from 'http://www.w3.org/2000/xmlns/', or if 
         this node is a TdomAttr and the qualifiedName 
         of this node is 'xmlns' [*, or if nodename of
         this node is not a qualified name].
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner: TdomDocument);
    <literallayout>
      Applications should not call 'create' directly.  
      Instead they should use the appropriate method 
      of a TdomDocument object.

      Parameters:
      - AOwner
         The TdomDocument that creates the Node.
    </literallayout>  
    </para>
    </listitem>

    <listitem>
    <para>
    destructor destroy; override; 
    <literallayout>
      Applications should not call 'destroy' directly. 
      Instead they should use the FreeAllNodes method 
      of the TdomDocument object that created the node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function appendChild(const newChild: TdomNode): TdomNode; virtual;
    <literallayout>
      Adds a child node to the end of the list of 
      children for this node. If the newChild is 
      already in the tree, it is first removed.

      Parameters:
      - newChild
         The node to add. If this is a 
         TdomDocumentFragment object, the entire
         contents of the document fragment are moved 
         into the child list of this node.

      Return Value:
         The node added. 

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to append is this node or one of 
         this node's ancestors.
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         document than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the node being appended, is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure clear; virtual;
    <literallayout>
      Frees all child nodes of this node which are 
      not readonly.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function cloneNode(const deep: boolean): TdomNode; virtual;
    <literallayout>
      Returns a duplicate of the node, i.e., serves 
      as a generic copy constructor for Nodes. The 
      duplicate node has no parent (parentNode 
      returns nil). 
      
      For all nodes, cloning a node creates a node 
      object owned by the importing document, with 
      property values identical to the source 
      node's nodeName and nodeType, plus the 
      properties related to namespaces (prefix and 
      namespaces URI).  The source node is not 
      altered. 
      
      The following list describes the specifics 
      for each type of node.

      ntAttribute_Node
      The ownerElement attribute is set to nil and 
      the specified flag is set to true on the 
      generated TdomAttr node. The descendants of 
      the source TdomAttr node are recursively 
      imported and the resulting nodes reassembled 
      to form the corresponding subtree.  Note 
      that the deep parameter has no effect on 
      TdomAttr nodes; they always carry their 
      children with them when cloned.

      ntDocument_Fragment_Node
      If the deep option was set to true, the 
      descendants of the source element are
      recursively imported and the resulting 
      nodes reassembled to form the corresponding
      subtree. Otherwise, this simply generates 
      an empty TdomDocumentFragment node.

      ntDocument_Node
      TdomDocument nodes cannot be cloned.

      ntDocument_Type_Node
      TdomDocumentType nodes cannot be cloned.

      ntElement_Node
      Attribute nodes of the source element are 
      cloned, and the generated TdomAttr nodes 
      are attached to the generated TdomElement 
      node.  If the importNode deep parameter 
      was set to true, the descendants of the 
      source element are recursively imported 
      and the resulting nodes reassembled to 
      form the corresponding subtree.

      ntEntity_Node
      TdomEntity nodes can be cloned, however in 
      the current release of the XDOM the 
      TdomDocumentType is readonly.  On cloning, 
      the publicId, systemId, notationName,
      encoding, and version properties are 
      copied. If a deep import is requested, the 
      descendants of the source TdomEntity are 
      recursively imported and the resulting 
      nodes reassembled to form the corresponding 
      subtree.

      ntEntity_Reference_Node
      Only the TdomEntityReference node itself is 
      cloned, even if a deep import is requested.
      If the document the cloned node belongs to 
      provides a definition for this entity name, 
      its value is assigned.

      ntNotation_Node
      TdomNotation nodes can be cloned, however 
      in the current release of the XDOM the 
      TdomDocumentType is readonly.

      ntProcessing_Instruction_Node
      The duplicate node copies its target and data 
      values from those of the source node.

      ntText_Node, 
      ntCDATA_Section_Node, 
      ntComment_Node
      These three types of nodes inheriting from 
      TdomCharacterData copy their data and length 
      attributes from those of the source node.

      Parameters:
      - deep
         If true, recursively clone the subtree 
         under the specified node; if false, 
         import only the node itself (and its 
         TdomAttr nodes, if it is a TdomElement 
         node). This has no effect on TdomAttr,
         TdomEntityReference, and TdomNotation 
         nodes.

      Return Value:
         The duplicate node.

      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being cloned is 
         not supported.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function hasChildNodes: boolean; virtual;
    <literallayout>
      This is a convenience method to allow easy 
      determination of whether a node has children 
      or not. 
      
      Return Value:
        'True' if the node has any children, 
        'false' if the node has no children.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function insertBefore(const newChild, refChild: TdomNode): TdomNode;
    virtual;
    <literallayout>
      Inserts a child node newChild before the 
      existing child node refChild. If refChild 
      is nil, insert newChild at the end of the 
      list of children. If newChild is a 
      DocumentFragment object, all of its children 
      are inserted, in the same order, before 
      refChild. If the newChild is already in the
      tree, it is first removed. 

      Parameters:
      - newChild
         The node to insert.
      - refChild
         The reference node, i.e., the node before 
         which the new node must be inserted.

      Return Value:
         The node being inserted. 

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to insert is this node or one of 
         this node's ancestors, or if the newChild node 
         is identical with the refChild node (unless both
         parameters are nil).
      - EWrong_Document_Err 
         Raised if newChild was created from a 
         different document than the one that created 
         this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent 
         of the newChild node being inserted, is 
         readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function isAncestor(const AncestorNode: TdomNode): boolean; virtual;
    <literallayout>
      This is a convenience method to allow easy 
      determination of whether a node is an ancestor 
      of this node.

      Paramters:
      - AncestorNode
         The node which is being tested whether it 
         is an ancestor of this node.
      Return Value:
         Returns 'true' if the AncestorNode is an 
         ancestor of this node, 'false otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) procedure normalize; virtual;
    <literallayout>
      Puts all Text nodes in the full depth of 
      the sub-tree underneath this TdomElement, 
      including attribute nodes, into a "normal" 
      form where only markup (e.g., tags, comments, 
      processing instructions, CDATA sections, and
      entity references) separates TdomText nodes, 
      i.e., there are no adjacent TdomText nodes. 
      This can be used to ensure that the DOM view 
      of a document is the same as if it were 
      saved and re-loaded, and is useful when 
      operations (such as XPointer lookups) that 
      depend on a particular document tree 
      structure are to be used. Note: In cases 
      where the document contains TdomCDATASection 
      nodes, the normalize operation alone may not 
      be sufficient, since XPointers do not 
      differentiate between TdomText nodes and 
      TdomCDATASection nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function removeChild(const oldChild: TdomNode): TdomNode; virtual;
    <literallayout>
      Removes the child node indicated by oldChild 
      from the list of children and returns it. 

      Parameters:
      - oldChild
         The node being removed

      Return Value:
         The node removed. 

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if oldChild is nil.
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function replaceChild(const newChild, 
                                oldChild: TdomNode): TdomNode; virtual;
    <literallayout>
      Replaces the child node oldChild with newChild 
      in the set of children of the given node, and 
      returns the oldChild node. If newChild is a 
      TdomDocumentFragment object, oldChild is 
      replaced by all of the TdomDocumentFragment 
      children, which are inserted in the same order. 
      If the newChild is already in the tree, it is 
      first removed. 

      Parameters: 
      - newChild
         The new node to put in the child list.
      - oldChild
         The node being replaced in the list.

      Return Value:
         The node replaced. 

      Exceptions:
      - ENot_Supported_Err (+)
         Raised if newChild or oldChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does 
         not allow children of the type of the 
         newChild node, or if the node to insert is 
         this node or one of this node's ancestors.
      - EWrong_Document_Err 
         Raised if newChild was created from a 
         different document than the one that created 
         this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent 
         of the newChild node, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this 
         node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function  resolveEntityReferences(const opt: TdomEntityResolveOption): boolean; virtual;
    <literallayout>
      Resolves all entity references in the child
      node tree of the current node.  If the current
      node is itself a TdomEntityReference node nothing
      is done.  Except for predefined entities there
      must be a prepared content model attached to
      the current node's owner document in order that
      this function works properly.
      
      Parameters:
      - opt
         If set to 'erReplace', then all TdomEntityReference 
         nodes in the child node tree are recursively 
         being replaced by nodes or node trees according 
         to the entity's declaration.
         If set to 'erExpand', then to each TdomEntityReference
         node in the child node tree a subtree of nodes is 
         added according to the entity's declaration.  This
         subtree will not contain any TdomEntityReference.
         Instead where a TdomEntityReference would occure in
         the subtree it is recursively replaced by nodes or 
         node trees according to its entity's declaration.
         [*Not yet implemented: The node itself and its subtree
         nodes are readonly.]
         
      Return Value:   
         'True' if every TdomEntityReference in the current
         nodes subtree was successfully replaced resp. 
         expanded, 'false' otherwise.
         Note that a TdomEntityReference cannot be resolved, 
         if itself or an entity reference in its subtree has 
         no corresponding TdomCMEntity object, or if its 
         corresponding TdomCMEntity object is an unparsed 
         entity, or the literal value of this object would 
         lead to a violation of one of the XML 1.0 
         wellformedness or validity constraint in the 
         context of its owner object, e.g. if it contains a 
         (propably indirect) reference to itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function supports(const feature, version: WideString): boolean; virtual;
    <literallayout>
      Test whether the DOM implementation 
      implements a specific feature and that
      feature is supported by this node. 

      Parameters:
      - feature
         The string of the feature to test. 
         This is the same name which can be
         passed to the method hasFeature on 
         TDOMImplementation.
      - version
         This is the version number of the 
         feature to test. In Level 2, version
         1, this is the string "2.0" If the 
         version is not specified, supporting
         any version of the feature will cause 
         the method to return true. 

      Return Value:
         Returns true if the specified feature 
         is supported on this node, false otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure writeCode(stream: TStream); virtual;
    <literallayout>
      Writes the cooresponding XML-code of the node 
      and all its children to a stream.

      Parameters:
      - stream
         The stream to write the code to.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomDocument = class (TdomNode)</title>

  <para>The Document interface represents the entire XML document. Conceptually, it is the root of the document tree, and provides the primary access to the document's data.</para>

  <para>Since elements, text nodes, comments, processing instructions, etc. cannot exist outside the context of a Document, the Document interface also contains the factory methods needed to create these objects. The Node objects created have a ownerDocument attribute which associates them with the Document within whose context they were created.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property codeAsString: String (readonly)
    <literallayout> 
      Returns the DOM as an XML document in a single UTF-8 
      string.  Every single line feed is replaced by 
      carriage return + line feed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property codeAsWideString: WideString (readonly)
    <literallayout> 
      Returns the DOM as an XML document in a single 
      UTF-16BE wideString, starting with '$feff'.  
      Every single line feed is replaced by carriage 
      return + line feed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property contentModel: TdomCMObject (readonly)
    <literallayout> 
      The TdomCMObject associated with the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property defaultView: TdomAbstractView (readonly)
    <literallayout>
      The default TdomAbstractView for this TdomDocument 
      object, or nil if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property doctype: TdomDocumentType (readonly)
    <literallayout>
      The document type declaration (TdomDocumentType) 
      associated with this document. For XML documents 
      without a document type definition this returns 
      nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property documentElement: TdomElement (readonly)
    <literallayout>
      This is a convenience attribute that allows direct 
      access to the child node that is the root element 
      of the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) property domImpl: TdomImplementation (readonly)
    <literallayout>
      The TdomImplementation object that handles this 
      document. An XDOM application may use objects from 
      multiple implementations. (* In the DOM guidelines 
      this property is called "Implementation". Since this 
      is a reserved Delphi expression the property had to 
      been renamed.)
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property encoding: wideString
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the encoding of this document. 
      This is an empty wideString otherwise.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property IDs: TStringList (readonly)
    <literallayout> 
      Contains a list of all attributes of type ID in the 
      body of the document, i.e. below the root element of 
      the document tree (but not of those contained in a 
      TdomDocumentFragment node, etc.).  The 'sorted' 
      property of this TStringList is set to 'true' and
      the 'duplicates' property to 'dupError'.  The 
      'strings' property of the TStringList contains all 
      attribute values of type 'ID' while the corresponding 
      'objects' property contains a pointer to the 
      respective TdomAttr object.

      Since the detection of ID attributes depents on the 
      document being valid, this list is, unlike other 
      lists used in the XDOM to access nodes, not 'live'.
      To initialize or update it the 'validate' function
      must be used.

      Here is a code example how to access the TdomElement 
      whoes ID attribute has the value '007' (it is assumed,
      that the IDs list was previously initialized by calling
      myDoc.validate):

        function Find007(const myDoc: TdomDocument): TdomElement;
        var
          myIndex: integer;
          Attr007: TdomAttr;
        begin
          if myDoc.IDs.find(wideString('007'),myIndex) then begin
            Attr007:= TdomAttr(myDoc.IDs.objects(myIndex));
           result:= Attr007.OwnerElement;
          end else result:= nil;
        end;  

      Applications must not modify the IDs list directly
      and must not set the 'sorted' property of the list 
      to 'false' or modify the 'duplicates' property.  A 
      future release of the XDOM will introduce its own list 
      class for use as TdomDocument.IDs, where such 
      modifications will then no longer be possible.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property standalone: wideString
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, whether this document is 
      standalone. This is an empty wideString 
      otherwise. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property systemId: wideString
    <literallayout> 
      If a document is associated with a file on the 
      local system, this property contains the full path 
      to this file.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property version: wideString
    <literallayout>
      An attribute specifying, as part of the XML
      declaration, the version number of this document. 
      This is an empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
(+) function DuplicateNode(const sourceNode: TdomNode): TdomNode; virtual;
  <literallayout>
      Duplicates a node. The duplicate node has no parent 
      (parentNode returns  nil). Duplicating a TdomElement 
      node copies all TdomAttr nodes and their values 
      [, including those generated by the XML processor to 
      represent defaulted attributes -- not yet implemented *]. 
      Duplicating any other type of node simply returns a copy 
      of this node. 
      
      TdomDocument, TdomDocumentType, TdomEntity, and
      TdomNotation nodes cannot be duplicated.

      Parameters:
      - Node
         The node to be duplicated.
      Return Value:
         The new node. 

      Exceptions: 
      - ENot_Supported_Err
         Raised if the NodeType of the node to be duplicated 
         is not specified, or if the node is a TdomDocument, 
         TdomDocumentType, TdomEntity, or TdomNotation node. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure InitDoc(const TagName: wideString); virtual;
    <literallayout>
      Appends a document element of the type specified to the 
      document. Using this method on a document that already 
      has a document element will raise an exception. This 
      method is automatically called by the createDocument
      function of a TDomImplementation object. In derived 
      classes of TdomDocument you can override this method to 
      implement a default object tree.

      Parameters:
      - TagName
         The name of the document element type to instantiate. 
         This is case-sensitive.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - EHierarchy_Request_Err
         Raised if the document already has a document element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure InitDocNS(const namespaceURI,
                              qualifiedName: WideString); virtual;
    <literallayout>
      Appends a document element of the given qualified name 
      and namespace URI to the document. Using this method on 
      a document that already has a document element will 
      raise an exception. This method is automatically called 
      by the createDocumentNS function of a TDomImplementation 
      object. In derived classes of TdomDocument you can 
      override this method to implement a default object tree.

      Parameters:
      - TagName
         The name of the root element type to instantiate. 
         This is case-sensitive.
      - NamespaceURI
         The namespace URI of the document element type to 
         instantiate.
      - QualifiedName
         The qualified name of the document element type to 
         instantiate.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an 
         illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the 
         qualifiedName has a prefix and the namespaceURI is 
         an empty string, if the qualifiedName has a prefix 
         that is 'xml' and the namespaceURI is different 
         from 'http://wwww.w3.org/XML/1998/namespace'[*, if 
         the qualifiedName has a prefix that is 'xmlns' and 
         the namespaceURI is different from 
         'http://www.w3.org/2000/xmlns/', or if the 
         qualifiedName is 'xmlns', and the namespaceURI is 
         different from 'http://www.w3.org/2000/xmlns/'].
      - EHierarchy_Request_Err
         Raised if the document already has a document element.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>


  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    
    <listitem>
    <para>
    constructor Create; virtual;
    <literallayout>
      Creates a new TdomDocument object. Applications 
      should not call 'create' directly.  Instead they 
      should use the appropriate method of a 
      TdomImplementation object.
    </literallayout>
    </para>
    </listitem>
    
    <listitem>
    <para>
(+) procedure Clear; virtual;
    <literallayout>
      Frees all TdomNodes, TdomNodeLists, TdomNodeListNSs, 
      TdomNodeIterators and TdomTreeWalkers that belong to 
      the TdomDocument object, whether readonly or not.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure ClearInvalidNodeIterators; virtual;
    <literallayout>
      Frees all TdomNodeIterators whoes state is 'invalid' 
      which means that their detache method had been used.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateElement(const TagName: WideString): TdomElement; virtual;
    <literallayout>
      Create a TdomElement of the type specified. Note 
      that the TdomElement returned implements the 
      setAttribute method, so attributes can be specified 
      directly on the returned object. 

      Parameters:
      - tagName
         The name of the element type to instantiate. This 
         is case-sensitive.

      Return Value:
         A new TdomElement object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function CreateElementNS(const NamespaceURI,
                                   QualifiedName: WideString): TdomElement;
                                   virtual;
    <literallayout>
      Creates a TdomElement of the given qualified name 
      and namespace URI.

      Parameters:
      - NamespaceURI
         The namespace URI of the TdomElement to create.
      - QualifiedName
         The qualified name of the TdomElement to create.

      Return Value:
         A new TdomElement object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains 
         an illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the 
         qualifiedName has a prefix and the namespaceURI 
         is an empty string, if the qualifiedName has a 
         prefix that is 'xml' and the namespaceURI is 
         different from 'http://wwww.w3.org/XML/1998/namespace'
         [* if the qualifiedName has a prefix that is 
         'xmlns' and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/', or if the 
         qualifiedName is 'xmlns', and the namespaceURI 
         is different from 'http://www.w3.org/2000/xmlns/'].
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateDocumentFragment: TdomDocumentFragment; virtual;
    <literallayout>
      Create an empty TdomDocumentFragment object. 

      Return Value:
         A new TdomDocumentFragment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateTextNode(const Data: WideString): TdomText; virtual;
    <literallayout>
      Create a TdomText node given the specified string. 

      Parameters:
      - data
         The data for the node.

      Return Value:
         The new TdomText object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateComment(const Data: WideString): TdomComment; virtual;
    <literallayout>
      Create a TdomComment node given the specified 
      wideString. 

      Parameters:
      - data
         The data for the node.

      Return Value:
         The new TdomComment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCDATASection(const Data: WideString): TdomCDATASection;
virtual;
    <literallayout>
      Create a TdomCDATASection node whose value is 
      the specified string. 

      Parameters:
      - data
         The data for the CDATASection contents.
      Return Value:
         The new TdomCDATASection object. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateProcessingInstruction(const Targ, Data : WideString):
    TdomProcessingInstruction; virtual;
    <literallayout>
      Create a TdomProcessingInstruction node given the 
      specified name and data wideStrings. 

      Parameters:
      - target
         The target part of the processing instruction.
      - data
         The data for the node.

      Return Value:
         The new TdomProcessingInstruction object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateAttribute(const Name: WideString): TdomAttr; virtual;
    <literallayout>
      Creates a TdomAttr of the given name. Note that 
      the TdomAttr instance can then be set on an 
      TdomElement using the setAttribute method. 

      Parameters:
      - name
         The name of the TdomAttr.

      Return Value:
         A new TdomAttr object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function CreateAttributeNS(const NamespaceURI,
                                     QualifiedName: WideString): TdomAttr;
                                     virtual;
    <literallayout>
      Creates a TdomAttr of the given qualified name 
      and namespace URI.

      Parameters:
      - NamespaceURI
         The namespace URI of the TdomAttr to create.
      - QualifiedName
         The qualified name of the TdomAttr to create.

      Return Value:
         A new TdomAttr object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name 
         contains an illegal character.
      - ENamespace_Err
         Raised if the qualifiedName is malformed, 
         if the qualifiedName has a prefix and the 
         namespaceURI is an empty string, if the 
         qualifiedName has a prefix that is 'xml' 
         and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace', 
         if the qualifiedName has a prefix that is 
         'xmlns' and the namespaceURI is different 
         from 'http://www.w3.org/2000/xmlns/', or 
         if the qualifiedName is 'xmlns', and the 
         namespaceURI is different from 
         'http://www.w3.org/2000/xmlns/'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateEntityReference(const Name: WideString): TdomEntityReference;
    virtual;
    <literallayout>
      Create a TdomEntityReference object. 

      Parameters:
      - name
         The name of the TdomEntityReference.

      Return Value:
         A new TdomEntityReference object. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function CreateDocumentType(const qualifiedName, PubId, SysId, intSubset: WideString):
TdomDocumentType; virtual;
    <literallayout>
      Create a TdomDocumentType. Note, that the 
      factory method for creating a TdomDocumentType 
      node according to the DOM2 specification is 
      located at the TDocumentObjectModel. The XDOM 
      provides factory methods on both the
      TDocumentObjectModel and the TdomDocument 
      interface.

      Parameters:
      - qualifiedName
         The qualified name of the document type to 
         be created.
      - PubId 
         The public identifier of the document type.
      - SysId 
         The system identifier of the document type.
      - IntSubset
         The internal subset.

      Return Value:
         A new TdomDocumentType object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure freeAllNodes(var node: TdomNode); virtual;
    <literallayout>
      Frees a node, that was created by this TdomDocument 
      object, and all of its children. The node to free must 
      not have a parent node assigned or being used by a 
      TdomElement. To free such a node it has to be removed 
      before freeing it. Note, that a readonly node can only 
      be freed together with an ancestor node which is not 
      readonly, since attempting to remove a readonly node 
      would raise an exception. Freeing a TdomElement node 
      frees also all TdomAttr nodes attached to the 
      TdomElement.

      Parameters:
      - node
         The node to free.  This is set to nil.  
         
         Hint: Since for a variable parameter, the actual 
         argument must be of the exact type of the formal 
         parameter an application must make sure to call 
         freeAllNodes with a node of type TdomNode, e.g.:
           var
             myElement: TdomElement;
           begin
             ...
             freeAllNodes(TdomNode(myElement));
           end;  

      Exceptions:
      - EWrong_Document_Err
         Raised if the node to free was created from a 
         different TdomDocument.
      - ENo_Modification_Allowed_Err
         Raised if the TdomDocument tries to free itself.
      - EInuse_Node_Err
         Raised if the node to free has a parent node.
      - EInuse_Attribute_Err
         Raised if the node is a TdomAttr node which is 
         used in a TdomElement node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para> 
(+) procedure FreeTreeWalker(var treeWalker: TdomTreeWalker);
virtual;
    <literallayout>
      Frees a TdomTreeWalker, that was created by 
      this TdomDocument object.

      Parameters:
      - treeWalker
         The TreeWalker to free (or nil).  This is set 
         to nil.

      Exceptions:
      - EWrong_Document_Err
         Raised if the TreeWalker to free was created 
         from a different TdomDocument.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*) function GetElementById(const elementId: WideString): TdomElement;
virtual;
    <literallayout>
      Returns the TdomElement whose ID is given by 
      elementId. If no such element exists nil is 
      returned. The behavior is not defined if more 
      than one element has this ID. Note: The DOM 
      implementation must have information that says 
      which attributes are of type ID. Attributes 
      with the name "ID" are not of type ID unless 
      so defined. [* Since this implementations does
      not know whether attributes are of type ID or 
      not this function returns always nil.]

      Parameters:
      - elementId
         The unique id value for an element.

      Return Value:
         The matching element.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetElementsByTagName(const tagName: WideString): TdomNodeList;
    virtual;
    <literallayout>
      Returns a TdomNodeList of all the TdomElement 
      nodes with a given tag name in the order in 
      which they would be encountered in a preorder 
      traversal of the document tree. 
      
      Hint: Calling this function will internally 
      create a TdomNodeList for the specified tag 
      name unless this had been done by a previous 
      call. This TdomNodeList will be freed either 
      when the clear method of the document is 
      called or when the document itself is freed. 
      Therefore calling the GetElementsByTagName 
      function very often with different tag names 
      will result in high memory usage; and since
      the DOM requires TdomNodeLists to be &quot;live&quot;, 
      calling the TdomElementsNodeList.item method 
      always starts a re-calculation of the index by 
      traversing the node tree from the beginning 
      till the specified element is found.  

      So using this method to traverse the elements 
      of large documents is considerably slower than 
      using a node iterator or a tree walker with an 
      appropriate filter and might need more of the
      computer's memory. It is therefore highly 
      recommended to use a node iterator or a tree 
      walker with an appropriate filter instead. 
      
      Parameters:
      - tagname
         The name of the tag to match on. If the 
         string "*" is given, this method returns 
         all elements in the document.

      Return Value:
         A new TdomNodeList object containing all 
         the TdomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function GetElementsByTagNameNS(const namespaceURI, 
                                          localName: WideString): TdomNodeList;
                                          virtual;
    <literallayout>
      Returns a TdomNodeList of all the TdomElements 
      with a given local name and namespace URI in 
      the order in which they would be encountered 
      in a preorder traversal of the Document tree. 
      
      Hint: Calling this function will internally 
      create a TdomNodeList for the specified 
      namespace URI and local name unless this had 
      been done by a previous call.  This TdomNodeList 
      will be freed either when the clear method of 
      the document is called or when the document 
      itself is freed.  Therefore calling the 
      GetElementsByTagNameNS function very often with 
      different parameters will result in high memory 
      usage; and since the DOM requires TdomNodeLists 
      to be &quot;live&quot;, calling the TdomElementsNodeList.item 
      method always starts a re-calculation of the 
      index by traversing the node tree from the 
      beginning till the specified element is found.  

      So using this method to traverse the elements 
      of large documents is considerably slower than 
      using a node iterator or a tree walker with an 
      appropriate filter and might need more of the
      computer's memory. It is therefore highly 
      recommended to use a node iterator or a tree 
      walker with an appropriate filter instead. 
      
      Parameters:
      - namespaceURI
         The namespace URI of the elements to 
         match on. The special value '*' matches 
         all namespaces.
      - localName
         The local name of the elements to match 
         on. The special value '*' matches all 
         local names.

      Return Value:
         A new TdomNodelist object containing all 
         the matched TdomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function importNode(const importedNode;
                        const deep: boolean): TdomNode; virtual;
    <literallayout>
      Imports a node from another document to this 
      document. The returned node has no parent 
      (parentNode returns nil). The source node 
      is not altered or removed from the original 
      document; this method creates a new copy of 
      the source node. 
      
      For all nodes, importing a node creates a 
      node object owned by the importing document, 
      with property values identical to the source 
      node's nodeName and nodeType, plus the 
      properties related to namespaces (prefix and 
      namespaces URI). As in the cloneNode 
      operation on a Node, the source node is not 
      altered. 
      
      Additional information is copied as 
      appropriate to the nodeType, attempting to 
      mirror the behavior expected if a fragment of 
      XML source was copied from one document to 
      another, recognizing that the two documents 
      may have different DTDs. 

      The following list describes the specifics 
      for each type of node.

      ntAttribute_Node
      The ownerElement attribute is set to null 
      and the specified flag is set to true on the 
      generated TdomAttr node. The descendants of 
      the source TdomAttr node are recursively 
      imported and the resulting nodes reassembled 
      to form the corresponding subtree.  Note 
      that the deep parameter has no effect on 
      TdomAttr nodes; they always carry their 
      children with them when imported.

      ntDocument_Fragment_Node
      If the deep option was set to true, the 
      descendants of the source element are
      recursively imported and the resulting 
      nodes reassembled to form the corresponding
      subtree. Otherwise, this simply generates 
      an empty TdomDocumentFragment node.

      ntDocument_Node
      TdomDocument nodes cannot be imported.

      ntDocument_Type_Node
      TdomDocumentType nodes cannot be imported.

      ntElement_Node
      Specified attribute nodes of the source 
      element are imported, and the generated 
      TdomAttr nodes are attached to the 
      generated TdomElement node. Default 
      attributes are not copied, though if the 
      document being imported into defines 
      default attributes for this element name, 
      those are assigned. If the importNode deep 
      parameter was set to true, the descendants 
      of the source element are recursively 
      imported and the resulting nodes 
      reassembled to form the corresponding 
      subtree.

      ntEntity_Node
      TdomEntity nodes can be imported, however 
      in the current release of the XDOM the 
      TdomDocumentType is readonly.  On import, 
      the publicId, systemId, notationName,
      encoding, and version properties are 
      copied. If a deep import is requested, the 
      descendants of the source TdomEntity node
      are recursively imported and the resulting 
      nodes reassembled to form the corresponding 
      subtree.

      ntEntity_Reference_Node
      Only the TdomEntityReference node itself is 
      copied, even if a deep import is requested, 
      since the source and destination documents 
      might have defined the entity differently. 
      If the document being imported into provides 
      a definition for this entity name, its value 
      is assigned.

      ntNotation_Node
      TdomNotation nodes can be imported, however 
      in the current release of the XDOM the 
      TdomDocumentType is readonly.

      ntProcessing_Instruction_Node
      The imported node copies its target and data 
      values from those of the source node.

      ntText_Node, 
      ntCDATA_Section_Node, 
      ntComment_Node
      These three types of nodes inheriting from 
      TdomCharacterData copy their data and length 
      attributes from those of the source node.

      Parameters:
      - importedNode
         The node to import.
      - deep
         If true, recursively import the subtree 
         under the specified node; if false, 
         import only the node itself (and its 
         TdomAttr nodes, if it is a TdomElement 
         node). This has no effect on TdomAttr,
         TdomEntityReference, and TdomNotation 
         nodes.

      Return Value:
         The imported node that belongs to this 
         TdomDocument object. 

      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being imported 
         is not supported.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function CreateNodeIterator(const root: TdomNode;
                                      whatToShow: TdomWhatToShow;
                                      nodeFilter: TdomNodeFilter;
                                      entityReferenceExpansion: boolean):
                                                            TdomNodeIterator;
                                                            virtual;
    <literallayout>
      Create a new TdomNodeIterator over the subtree 
      rooted at the specified node.

      Parameters:
      - root
         The node which will be iterated together 
         with its children. The iterator is 
         initially positioned just before this 
         node. The whatToShow flags and the filter, 
         if any, are not considered when setting 
         this position.
      - whatToShow
         This flag specifies which node types may 
         appear in the logical view of the tree 
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this 
         TdomNodeIterator, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether 
         entity reference nodes are expanded.

      Return Value:
         The newly created TdomNodeIterator.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function CreateTreeWalker(const root: TdomNode;
                                      whatToShow: TdomWhatToShow;
                                      nodeFilter: TdomNodeFilter;
                                      entityReferenceExpansion: boolean):
                                                            TdomTreeWalker;
                                                            virtual;
    <literallayout>
      Create a new TdomTreeWalker over the subtree 
      rooted at the specified node.

      Parameters:
      - root
         The node which will serve as the root for 
         the TdomTreeWalker. The whatToShow flags 
         and the TdomNodeFilter are not considered 
         when setting this value; any node type 
         will be accepted as the root. The 
         currentNode of the TdomTreeWalker is 
         initialized to this node, whether or not 
         it is visible. The root functions as a 
         stopping point for traversal methods
         that look upward in the document 
         structure, such as parentNode and 
         nextNode. The root must not be nil.
      - whatToShow
         This flag specifies which node types may 
         appear in the logical view of the tree 
         presented by the iterator.
      - nodeFilter
         The Filter to be used with this 
         TdomTreeWalker, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether 
         entity reference nodes are expanded.

      Return Value:
         The newly created TdomTreeWalker.

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.
    </literallayout>
    </para>
    </listitem>
               
    <listitem>
    <para>
    function  removeContentModel: TdomCMObject; virtual;
      <literallayout>
      Removes a TdomCMObject associated with 
      the document.

      Return Value:
         The removed TdomCMObject, or nil if 
         none was associated with the document.
      </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function setContentModel(const arg: TdomCMObject): TdomCMObject; virtual;
      <literallayout>
      Associates a TdomCMObject with the document.
      If there is another TdomCMObject previously
      associated with the document it is being removed.

      Parameters:
      - arg
         The TdomCMObject to be associated with
         the document.

      Return Value:
         The previously associated TdomCMObject,
         or nil if none was associated with the document.

      Exceptions:
      - EInuse_Content_Model_Err
         Raised if an attempt is made to associate a
         document with a TdomCMObject that is already 
         associated elsewhere.
     </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) function validate(const errorHandler: TdomCustomErrorHandler;
                      const opt: TdomEntityResolveOption): boolean; virtual;
    <literallayout>
      Validates a TdomDocument object.  Each fatal error, 
      error or warning encountered is reported to the 
      specified error handler.  This might occure more 
      than once, if more than one fatal error, error or 
      warning is encountered.

      If there is a TdomCMObject object attached to this
      TdomDocument object, the TdomCMObject is automatically
      prepared (for more information see the description of 
      the TdomCMObject.prepare function) and the 
      TdomDocument's list of ID attribute values which is
      accessible via the TdomDocument.IDs property is 
      updated.  However, this fails, if the document is not 
      valid; in that case the IDs list is empty.

      Validating a document also resolves its entity references.
      The 'opt' parameter controls, whether the entity 
      references found are replaced or expanded (see below).
      If the document is not valid, validating it may lead to a 
      DOM tree with incompletely resolved entities.  

      Parameters:
      - errorHandler
         The error handler to which fatal errors, errors
         or warnings are reported, or nil, if no error
         handler is used.
      - opt
         If set to 'erReplace', then all TdomEntityReference 
         found in the document are recursively being replaced 
         by nodes or node trees according to its entity's 
         declaration.
         If set to 'erExpand', then to each TdomEntityReference
         node found in the document a subtree of nodes is added 
         according to its entity's declaration.  The subtree
         itself will not contain any TdomEntityReference.
         Instead every entity reference _inside_ this subtree
         is recursively replaced (not expanded) by nodes or 
         node trees according to its entity's declaration.
         [*Not yet implemented: The node itself and its subtree
         nodes are readonly.]

      Return Value:
        'True' if the TdomDocument object is valid, 'false' 
        otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure writeCodeAsUTF8(Stream: TStream); virtual;
    <literallayout> 
      Writes the DOM as an XML document encoded in UTF-8
      to a stream.  Every single line feed is replaced by 
      carriage return + line feed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) procedure writeCodeAsUTF16(Stream: TStream); virtual;
    <literallayout> 
      Writes the DOM as an XML document encoded in UTF-16BE
      starting with the byte order mark '$feff' to a stream.
      Every single line feed is replaced by carriage return 
      + line feed.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomDocumentFragment = class (TdomNode)</title>

  <para>TdomDocumentFragment is a lightweight or minimal Document object. It is very common to want to be able to extract a portion of a document's tree or to create a new fragment of a document. Imagine implementing a user command like cut or rearranging a document by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a Node for this purpose. While it is true that a Document object could fulfil this role, a Document object can potentially be a heavyweight object, depending on the underlying implementation. What is really needed for this is a very lightweight object. TdomDocumentFragment is such an object.</para>

  <para>Furthermore, various operations -- such as inserting nodes as children of another Node -- may take TdomDocumentFragment objects as arguments; this results in all the child nodes of the TdomDocumentFragment being moved to the child list of this node.</para>

  <para>The children of a TdomDocumentFragment node are zero or more nodes representing the tops of any sub-trees defining the structure of the document. TdomDocumentFragment do not need to be well-formed XML documents (although they do need to follow the rules imposed upon well-formed XML parsed entities, which can have multiple top nodes). For example, a TdomDocumentFragment might have only one child and that child node could be a Text node. Such a structure model represents neither an HTML document nor a well-formed XML document.</para>

  <para>When a TdomDocumentFragment is inserted into a TdomDocument (or indeed any other Node that may take children) the children of the TdomDocumentFragment and not the TdomDocumentFragment itself are inserted into the Node. This makes the TdomDocumentFragment very useful when the user wishes to create nodes that are siblings; the TdomDocumentFragment acts as the parent of these nodes so that the user can use the standard methods from the TdomNode interface, such as insertBefore and appendChild.</para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
(+) constructor Create(const AOwner: TdomDocument); virtual;
    <literallayout>
      Applications should not call 'create' directly.  
      Instead they should use the appropriate method 
      of a TdomDocument object.

      Parameters:
      - AOwner
         The TdomDocument that creates the Node.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomCharacterData = class (TdomNode)</title>

  <para>The TdomCharacterData object extends TdomNode with a set of attributes and methods for accessing character data in the DOM. This set is defined here rather than on each object that uses these attributes and methods for clarity. No DOM objects correspond directly to TdomCharacterData, though TdomText and others do inherit the interface from it. All offsets in this interface start from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Data: WideString (readonly)
    <literallayout>
      This provides access to the character data of 
      a node that implements this class.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the TdomCharacterData node is 
         readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: integer (readonly)
    <literallayout>
      This provides access to the number of characters 
      that are available through data and the 
      substringData method below. This may have the 
      value zero, i.e., CharacterData nodes may be 
      empty.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function SubstringData(const offset, count: integer):WideString; virtual;
    <literallayout>
      Extracts a range of data from an object 
      implementing this interface. 

      Parameters:
      - offset
         Start offset of substring to extract
      - count
         The number of characters to extract.

      Return Value:
        This method returns the specified 
        substring. If the sum of offset and
        count exceeds the length, then all 
        characters to the end of the data are
        returned. 

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is 
         negative or greater than the number
         of characters in data, and if the 
         specified count is negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure AppendData(const arg: WideString); virtual;
    <literallayout>
      Append the WideString to the end of the 
      character data in the object implementing 
      this interface. Upon success, data 
      provides access to the concatenation of 
      data and the wideString specified. 

      Parameters:
      - arg
         The WideString to append.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TdomCharacterData node is 
         readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure InsertData(const offset: integer; const arg: WideString); virtual;
    <literallayout>
      Insert a WideString at the specified character 
      offset. 

      Parameters:
      - offset
         The character offset at which to insert
      - arg
         The WideString to insert.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TdomCharacterData node is 
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters 
         in data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure deleteData(const offset, count: integer); virtual;
    <literallayout>
      Remove a range of characters from the node. 
      Upon success, data and length reflect the 
      change. 

      Parameters:
      - offset
         The offset from which to remove characters.
      - count
         The number of characters to delete. If 
         the sum of offset and count exceeds length 
         then all characters from offset to the end 
         of the data are deleted.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TdomCharacterData node is 
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters 
         in data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure replaceData(const offset, count: integer; const arg: WideString);
    virtual;
    <literallayout>
      Replace the characters starting at the specified 
      character offset with the specified string. 

      Parameters:
      - offset
         The offset from which to start replacing.
      - count
         The number of characters to replace. If the 
         sum of offset and count exceeds length, then 
         all characters to the end of the data are 
         replaced (i.e., the effect is the same as a 
         remove method call with the same range, 
         followed by an append method invocation).
      - arg
         The WideString with which the range must be 
         replaced.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised when the TdomCharacterData node is 
         readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters in 
         data, or if the specified count is
         negative.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>
	  
	  
  <sect1>
  <title>TdomAttr = class (TdomNode) (#*)</title>

  <para>The TdomAttr interface represents an attribute in an TdomElement object. Typically the allowable values for the attribute are defined in a document type definition.</para>

  <para>DOM Attribute objects inherit the Node interface, but since they are not actually child nodes of the element they describe, the DOM does not consider them part of the document tree. Thus, the Node attributes parentNode, previousSibling, and nextSibling have a nil value for Attribute objects. The DOM takes the view that attributes are properties of elements rather than having a separate identity separate from the elements they are associated with; this should make it more efficient to implement such features as default attributes associated with all elements of a given type. Furthermore, Attribute nodes may not be immediate children of a TdomDocumentFragment. However, they can be associated with element nodes contained within a TdomDocumentFragment. In short, users and implementors of the DOM need to be aware that Attribute nodes have some things in common with other objects inheriting the Node interface, but they also are quite distinct.</para>

  <para>The attribute's effective value is determined as follows: if this attribute has been explicitly assigned any value, that value is the attribute's effective value; otherwise, if there is a declaration for this attribute, and that declaration includes a default value, then that default value is the attribute's effective value; otherwise, the attribute does not exist on this element in the structure model until it has been explicitly added. Note that the nodeValue attribute on the Attribute instance can also be used to retrieve the string version of the attribute's value(s).</para>

  <para>In XML, the value of an attribute is represented by the child nodes of an Attribute node, since the value can contain entity references. Thus, attributes which contain entity references will have a child list containing both TdomText nodes and TdomEntityReference nodes. In addition, because the attribute type may be unknown, there are no tokenised attribute values.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property name: WideString (readonly)
    <literallayout>
      Returns the name of this attribute.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Specified: boolean (readonly)
    <literallayout>
      If this attribute was explicitly given a value in the 
      original document, this is true; otherwise, it is false. 
      Note that the implementation is in charge of this 
      attribute, not the user. If the user changes the value 
      of the attribute (even if it ends up having the same 
      value as the default value) then the specified flag is 
      automatically flipped to true. To re-specify the 
      attribute as the default value from the DTD, the user 
      must delete the attribute, and then the implementation 
      will make a new attribute available with specified set 
      to false and the default value (if one exists).

      In summary: If the attribute has an assigned value in 
      the document and specified is true, the value is the 
      assigned value. If the attribute has no assigned value 
      in the document and has a default value in the DTD, then
      specified is false, and the value is the default value 
      in the DTD. If the attribute has no assigned value in 
      the document and has a value of #IMPLIED in the DTD, 
      then the attribute does not appear in the structure
      model of the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Value: WideString (readonly) (*)
    <literallayout>
      On retrieval, the value of the attribute is returned as 
      a wideString. Character and general entity references 
      are replaced with their values. [The attribute value
      is further normalized as described in XML 1.0. spec. 
      §3.3.3.  Note, that if the attribute is attached to an
      TdomElement and if information about the attribute type 
      is available via a TdomCMAttribute node in the content 
      model associated with the owner document of the 
      attribute and if the so determined attribute type is 
      not CDATA, then the normalized attribute value is 
      further processed by discarding any leading and 
      trailing space (#$20) characters, and by replacing 
      sequences of space (#$20) characters by a single space
      (#$20) character.*]
      
      On setting, this removes and frees all child nodes of 
      the TdomAttr node and then creates and appends a single 
      TdomText node with the unparsed contents of the 
      wideString. I.e. any characters that an XML processor 
      would recognize as markup are instead treated as literal 
      text.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the node is readonly.

      Exceptions on retrieval:
      - EInvalid_Entity_Reference_Err (+)
         Raised if an attempt is made to retrieve the value of
         an Attribute containing an entity reference whoes 
         replace value cannot be determined.
      </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) property OwnerElement: TdomElement (readonly)
    <literallayout>
      The TdomElement this attribute is attached to or 
      nil if this attribute is not in use.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomElement = class (TdomNode) (*)</title>

  <para>By far the vast majority (apart from TdomText) of objects that authors encounter when traversing a document are TdomElement nodes. Assume the following XML document:</para>

  <para><literallayout>
     &lt;elementExample id="demo"&gt;
       &lt;subelement1/&gt;
       &lt;subelement2&gt;&lt;subsubelement/&gt;&lt;/subelement2&gt;
     &lt;/elementExample&gt;
  </literallayout>
  </para>

  <para>When represented using DOM, the top node is <quote>elementExample</quote>, which contains two child Element nodes, one for <quote>subelement1</quote> and one for <quote>subelement2</quote>. <quote>subelement1</quote> contains no child nodes. Elements may have attributes associated with them; since the TdomElement object inherits from TdomNode, the generic TdomNode method getAttributes may be used to retrieve the set of all attributes for an TdomElement. There are methods on the TdomElement interface to retrieve either an TdomAttr object by name or directly an Attribute value by name. TdomAttr objects should be retrieved in XML, where attributes may contain entity references, meaning that their values may be a fairly complex sub-tree.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property TagName: WideString (readonly)
    <literallayout>
      This attribute contains the string that is the 
      element's name. For example, in: 
               &lt;elementExample id="demo"&gt; 
                       ... 
               &lt;/elementExample&gt; ,
      tagName has the value "elementExample". Note 
      that this is case-preserving in XML, as are 
      all of the operations of the DOM.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(*) function GetAttribute(const Name: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute value by name. [*If 
      there is no such Attribute then an empty 
      wideString is returned.]

      Parameters:
      - name
         The name of the attribute to retrieve

      Return Value:
         The Attribute value as a wideString, or the 
         empty string if that attribute does not have
         a specified or defaulted value. 

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function RemoveAttribute(const Name: WideString): TdomAttr; virtual;
    <literallayout>
      Removes the Attribute with the specified name. 
      [*Not yet implemented: If the removed Attribute 
      has a default value it is immediately replaced.] 
      To remove an attribute with a qualified name and 
      namespace URI, use the removeAttributeNS method. 

      Parameters:
      - name
         The name of the attribute to remove.

      Return Value: (+)
         The removed TdomAttr object. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if there is no attribute named name in 
         the list.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function SetAttribute(const Name, Value: WideString): TdomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with that 
      name is already present in the element, its value 
      is changed to be that of the value parameter. 
      This value is a simple WideString, it is not 
      parsed as it is being set. So any markup (such as 
      syntax to be recognized as an entity reference) 
      is treated as literal text, and needs to be 
      appropriately escaped by the implementation when 
      it is written out. In order to assign an attribute
      value that contains entity references, the user 
      must create an TdomAttr node plus any TdomText and 
      TdomEntityReference nodes, build the appropriate 
      subtree, and use setAttributeNode to assign it as 
      the value of an attribute. To set an attribute 
      with a qualified name and namespace URI, use the 
      setAttributeNS method. 

      Parameters:
      - name
         The name of an attribute to create or alter.
      - value
         Value to set in WideString form.

      Return Value: (+)
         The new TdomAttr object if one was created, 
         otherwise nil. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function GetAttributeNode(const Name: WideString): TdomAttr; virtual;
    <literallayout>
      Retrieves an attribute node by name. To 
      retrieve an attribute with a qualified 
      name and namespace URI, use the 
      getAttributeNS method. 
      
      Parameters:
      - name
         The name of an attribute to retrieve.
      Return Value: 
         The TdomAttr node with the specified 
         attribute name or nil if there is no 
         such TdomAttr. 

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware 
         is true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function SetAttributeNode(const NewAttr: TdomAttr): TdomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with 
      that name (nodename) is already present in 
      the element, it is replaced by the new one. 
      To add a new attribute node with a 
      qualified name and namespace URI, use the
      setAttributeNodeNS method.  

      Parameters:
      - newAttr
         The attribute node to add to the 
         attribute list 

      Return Value:
         If the newAttr attribute replaces an 
         existing attribute with the same name, 
         the previously existing Attribute node 
         is returned, otherwise nil is returned. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - EWrong_Document_Err 
         Raised if newAttr was created from a 
         different TdomDocument than the one that 
         created the TdomElement.
      - EInuse_Attribute_Err
         Raised if newAttr is already an TdomAttr 
         of another TdomElement object. The DOM 
         user must explicitly clone TdomAttr nodes 
         to re-use them in other TdomElements.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(*) function RemoveAttributeNode(const OldAttr: TdomAttr): TdomAttr; virtual;
    <literallayout>
      Removes the specified attribute. [*Not yet 
      implemented: If the removed Attribute has a 
      default value it is immediately replaced. 
      The replacing attribute has the same 
      namespace URI and local name, as well as 
      the original prefix, when applicable.]

      Parameters:
      - oldAttr
         The TdomAttr node to remove from the 
         attribute list.

      Return Value:
         Returns the TdomAttr node that was 
         removed. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if oldAttr is not an TdomAttr 
         of the TdomElement.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetElementsByTagName(const Name: WideString): TdomNodeList;
    virtual;
    <literallayout>
      Returns a TdomNodeList of all descendant 
      TdomElements with a given tag name in the 
      order in which they would be encountered 
      in a preorder traversal of the Element 
      tree. Note, that calling this function 
      will internally create a TdomNodeList for 
      the specified tag name unless this had 
      been done by a previouse call. This 
      TdomNodeList will (only) be freed when 
      the TdomElement itself is freed. Since 
      calling the GetElementsByTagName function 
      very often with different tag names will
      result in high memory usage, it is 
      recommended to use a node iterator or a
      tree walker with an appropriate filter 
      instead. Since the DOM requires 
      TdomNodeLists to be &quot;live&quot;, 
      calling the TdomElementsNodeList.item 
      method always starts a re-calculation of 
      the index by traversing the node tree 
      from the beginning till the specified 
      element is found.  Therefore using this
      method to traverse the elements of large 
      documents is considerably slower than 
      using a node iterator or a tree walker 
      with an appropriate filter. 

      Parameters:
      - name
         The name of the tag to match on. The 
         special value '*' matches all tags.

      Return Value:
         A list of matching TdomElement nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) function GetAttributeNS(const namespaceURI, 
                                  localName: WideString): WideString; virtual;
    <literallayout>
      Retrieves an attribute value by local name 
      and namespace URI. [*If there is no such 
      Attribute then an empty WideString is 
      returned.]

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to 
         retrieve
      - localName
         The local name of the attribute to 
         retrieve
      Return Value:
         The Attribute value as a string, or the 
         empty string if that attribute does not 
         have a specified or defaulted value. 
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function SetAttributeNS(const namespaceURI, 
                                  qualifiedName,
                                  Value: WideString): TdomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with 
      that same local name and namespace URI is 
      already present on the element, its prefix 
      is changed to be the prefix part of the 
      qualifiedName, and its value is changed to 
      be the value parameter. This value is a 
      simple wideString, it is not parsed as it 
      is being set. So any markup (such as 
      syntax to be recognized as an entity 
      reference) is treated as literal text, and 
      needs to be appropriately escaped by the 
      implementation when it is written out. In
      order to assign an attribute value that 
      contains entity references, the user must 
      create an TdomAttr node plus any TdomText 
      and TdomEntityReference nodes, build the 
      appropriate subtree, and use setAttributeNS 
      to assign it as the value of an attribute. 

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to 
         create or alter.
      - qualifiedName
         The qualified name of the attribute to 
         create or alter.
      - value
         Value to set in WideString form.

      Return Value: (+)
         The new TdomAttr object if one was 
         created, otherwise nil. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, 
         if the qualifiedName has a prefix and the 
         namespaceURI is an empty string, if the 
         qualifiedName has a prefix that is 'xml' 
         and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace', 
         if the qualifiedName has a prefix that is 
         'xmlns' and the namespaceURI is defferent 
         from 'http://www.w3.org/2000/xmlns/', or 
         if the qualifiedName is 'xmlns', and the 
         namespaceURI is different from 
         'http://www.w3.org/2000/xmlns/'[*, or if 
         attributes.namespaceAware is false].
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function RemoveAttributeNS(const namespaceURI, 
                                     localName: WideString): TdomAttr; virtual;
    <literallayout>
      Removes the Attribute by local name and 
      namespace URI. [*Not yet implemented: If the 
      removed Attribute has a default value it is
      immediately replaced. The replacing attribute 
      has the same namespace URI and local name, as 
      well as the original prefix.]

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to remove.
      - localName
         The local name of the attribute to remove.

      Return Value: (+)
         The removed TdomAttr object. 

      Exceptions:	
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - ENot_Found_Err (+)
         Raised if there is no attribute named name 
         in the list.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function GetAttributeNodeNS(const namespaceURI, 
                                      localName: WideString): TdomAttr; virtual;
    <literallayout>
      Retrieves an attribute node by local name 
      and namespace URI. 

      Parameters:
      - namespaceURI
         The namespace URI of the attribute to 
         retrieve.
      - localName
         The local name of the attribute to 
         retrieve.

      Return Value:
         The TdomAttr node with the specified 
         attribute local name and namespace
         URI or nil if there is no such TdomAttr. 

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function SetAttributeNodeNS(const NewAttr: TdomAttr): TdomAttr; virtual;
    <literallayout>
      Adds a new attribute. If an attribute with 
      that local name and namespace URI is 
      already present in the element, it is 
      replaced by the new one.  

      Parameters:
      - newAttr
         The attribute node to add to the 
         attribute list 

      Return Value:
         If the newAttr attribute replaces an 
         existing attribute with the same local 
         name and namespace URI, the replaced 
         TdomAttribute node is returned, 
         otherwise nil is returned. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - EWrong_Document_Err 
         Raised if newAttr was created from a 
         different TdomDocument than the one 
         that created the TdomElement.
      - EInuse_Attribute_Err
         Raised if newAttr is already an TdomAttr 
         of another TdomElement object. The DOM 
         user must explicitly clone TdomAttr 
         nodes to re-use them in other 
         TdomElements.
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function GetElementsByTagNameNS(const namespaceURI, 
                                          localName: WideString): TdomNodeList;
                                          virtual;
    <literallayout>
      Returns a TdomNodeList of all the TdomElements 
      with a given local name and namespace URI in 
      the order in which they would be encountered 
      in a preorder traversal of the Element tree, 
      starting from this node. 
      
      Hint: Calling this function will internally 
      create a TdomNodeList for the specified tag 
      name unless this had been done by a previouse 
      call. This TdomNodeList will (only) be freed 
      when the TdomElement itself is freed. Since 
      calling the GetElementsByTagNameNS function 
      very often with different tag names will 
      result in high memory usage, it is recommented 
      to use a node iterator or a tree walker with 
      an appropriate filter instead. Since the DOM 
      requires TdomNodeLists to be &quot;live&quot;, 
      calling the TdomElementsNodeList.item method 
      always starts a re-calculation of the index by 
      traversing the node tree from the beginning 
      till the specified element is found. Therefore 
      using this method to traverse the elements of
      large documents is considerably slower than 
      using a node iterator or a tree walker with an 
      appropriate filter.

      Parameters:
      - namespaceURI
         The namespace URI of the elements to match 
         on. The special value '*' matches all 
         namespaces.
      - localName
         The local name of the elements to match on. 
         The special value '*' matches all local 
         names.

      Return Value:
         A new TdomNodelist object containing all 
         the matched TdomElements.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function hasAttribute(const name: WideString): boolean;
    <literallayout>
      Returns true when an attribute with a given 
      name is specified on this element [not yet 
      implemented: or has a default value].
      
      Parameters:
      - name
         The name of the attribute to look for.

      Return Value: (*)
         true if an attribute with the given name 
         is specified on this element [not yet 
         implemented: or has a default value], 
         false otherwise.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware is 
         true.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#*)function hasAttributeNS(const namespaceURI,
                                  localName: WideString): boolean;
    <literallayout>
      Returns true when an attribute with a 
      given local name and namespace URI is 
      specified on this element [not yet 
      implemented: or has a default value].
      
      Parameters:
      - namespaceURI
         The namespace URI of the attribute to 
         look for.
      - localName
         The local name of the attribute to 
         look for.

      Return Value: (*)
         true if an attribute with a given 
         local name and namespace URI is 
         specified [not yet implemented: or 
         has a default value] on this element, 
         false otherwise.

      Exceptions:
      - ENamespace_Err (+)
         Raised if attributes.namespaceAware 
         is false.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomText = class (TdomCharacterData)</title>

  <para>The TdomText object represents the textual content (termed character data in XML) of an Element or Attribute. If there is no markup inside an element's content, the text is contained in a single object implementing the Text interface that is the child of the element. Any markup is parsed into child elements that are siblings of the text nodes on either side of it, and whose content is represented as text node children of the markup element.</para>

  <para>When a document is first made available to the DOM, there is only one TdomText node for each block of text. Users may create adjacent Text nodes that represent the contents of a given element without any intervening markup, but should be aware that there is no way to represent the separations between these nodes in XML or HTML, so they will not (in general) persist between DOM editing sessions. The normalize method on TdomElement merges any such adjacent TdomText objects into a single node for each block of text; this is recommended before employing operations that depend on a particular document structure, such as navigation with XPointers.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property isWhitespaceInElementContent: boolean (readonly);
    <literallayout>
      Returns 'true' if this text node contains only
      whitespace in element content, often abusively
      called 'ignorable whitespace'; otherwise or if
      the content model of this document does not 
      contain an element declaration for this Text 
      node's parent element or if this Text node has
      no parent element, 'false' is returned.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  
  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function splitText(const offset: integer): TdomText; virtual;
    <literallayout>
      Breaks a text node into two text nodes at the 
      specified offset, keeping both in the tree as 
      siblings. This node then only contains all the 
      content up to the offset point. And a new Text 
      node, which is inserted as the next sibling of 
      this node, contains all the content at and 
      after the offset point.

      Parameters:
      - offset
         The offset at which to split, starting from 0.

      Return Value:
         This method returns the new text node 
         containing all the content at and after the 
         offset point. The original node contains all 
         the content up to the offset point. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters 
         in data.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

  <sect1>
  <title>TdomComment = class (TdomCharacterData)</title>

  <para>This represents the content of a comment, i.e. all the characters between the starting '&lt;!--' and ending '--&gt;'.</para>
  </sect1>


  <sect1>
  <title>TdomProcessingInstruction = class (TdomNode)</title>

  <para>The ProcessingInstruction interface represents a <quote>processing instruction</quote>, used in XML as a way to keep processor-specific information in the text of the document.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property target: WideString (readonly);
    <literallayout>
      The target of the processing instruction. XML 
      defines this as being the first token following 
      the markup that begins the processing instruction.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property data: WideString 
    <literallayout>
      The content of the processing instruction. This 
      is from from the first non white space character 
      after the target to the character immediately
      preceding the ?&gt;.
      
      Exceptions on setting:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomCDATASection = class (TdomText)</title>
  
  <para>CDATA Sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA Section is the <quote>]]&gt;</quote> string that ends the CDATA Section. CDATA Sections cannot be nested. The primary purpose is for including material such as XML fragments, without needing to escape all the delimiters. Applications should be aware of the fact that CDATA Sections are nevertheless bound to the character range defined in XML 1.0 spec. prod. [2], § 2.2: #x9 | #xA | #xD | [#x20-#xD7FF]| [#xE000-#xFFFD]| [#x10000-#x10FFFF] mapped to UTF-16.  Therefore CDATA Sections may not be used directly with a character encoding (&quot;charset&quot;) or binary data which use values excluded by prod. [2] mapped to UTF-16. Instead an application should use a conversion function for illegal values and convert the data back on retrieval, or use an external unparsed entity to refer to the data.</para>
  
  <para>The TdomCDATASection inherits the TdomCharacterData interface through the TdomText interface. Adjacent CDATA Sections are not merged by use of the TdomElement.normalize method.</para>
  </sect1>
  
  <sect1>
  <title>TdomDocumentType = class (TdomNode) (#*)</title>
		 
  <para>TdomDocumentType represents a XML document type declaration. Each document has a (possibly nil) attribute that contains a reference to a TdomDocumentType object. Note, that the factory method for creating a TdomDocumentType node according to the DOM2 specification is located at the TDocumentObjectModel. The XDOM provides factory methods on both the TDocumentObjectModel and the TdomDocument interface.</para>
		 
  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property entities: TdomNamedNodeMap (readonly)
    <literallayout>
      This is a NamedNodeMap containing the general entities, 
      both internal and external, declared in the DTD. For 
      example in: 
               &lt;!DOCTYPE ex SYSTEM "ex.dtd" [
                 &lt;!ENTITY foo "foo"&gt;
                 &lt;!ENTITY bar "bar"&gt;
                 &lt;!ENTITY % baz "baz"&gt;
               ]&gt;
      the interface provides access to foo and bar but not 
      baz. Every Node in this map has to be a TdomEntity node.
	  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) property internalSubset: wideString  (readonly)
    <literallayout>
      The internal subset as a wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property name: WideString (readonly)
    <literallayout>
      The name attribute is a WideString that holds the name 
      of DTD; i.e., the name immediately following the DOCTYPE 
      keyword.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property notations: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a TdomNamedNodeMap containing the notations 
      declared in the DTD. Each node in this map also 
      implements the TdomNotation object.
      </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property parameterEntities: TdomNamedNodeMap (readonly)
    <literallayout>
      This is a NamedNodeMap containing the parameter entities, 
      both internal and external, declared in the DTD.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) property publicId: wideString  (readonly)
    <literallayout>
      The public identifier of the external subset.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(#) property systemId: wideString  (readonly)
    <literallayout> 
      The system identifier of the external subset.
    </literallayout>
    </para>
    </listitem>

   </itemizedlist>
   </para>
 
 
  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(#) constructor Create(const AOwner: TdomDocument; 
                       const Name, 
                             PubId, 
                             SysId
                             IntSubset: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomDocumentType object. 
      Applications should not call 'create' directly. 
      Instead they should use the appropriate method of
      a TdomDocument or TdomImplementation object.
      
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomDocumentType.
      - Name
         The name of the DTD; i.e., the name immediately 
         following the DOCTYPE keyword.
      - PubId 
         The public identifier of the document type.
      - SysId 
         The system identifier of the document type.
      - IntSubset
         The internal subset.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomNotation = class (TdomNode)</title>

  <para>This object represents a notation. A notation either declares, by name, the format of an unparsed entity (see §4.7 of the XML 1.0 specification), or is used for formal declaration of Processing Instruction targets (see §2.6 of the XML 1.0 specification). The nodeName attribute inherited from TdomNode is set to the declared name of the notation. Note, that TdomNotation is not a representation of the notation declaration in a DTD; use TdomCMNotationDeclaration instead.</para>

  <para>IMPORTANT NOTICE: The TdomNotation class exists in the XDOM only for compatibility with W3C's DOM.  It is strongly recommented to use TdomCMNotation instead.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier for the notation. If the 
      public identifier was not specified, this is 
      an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier for the notation. If the 
      system identifier was not specified, this is 
      an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property ParentDocumentType: TdomDocumentType (readonly)
    <literallayout>
      The parent TdomDocumentType of the given 
      TdomNotation instance.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomDocument; const Name, PublicId,
    SystemId: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomNotation object. 
      Applications should not call 'create' directly. 
      Instead they should use the appropriate method of
      a TdomDocument object.

      Parameters:
      - AOwner
         The TdomDocument that creates the TdomNotation
      - name
         The name of the TdomNotation.
      - publicId 
         The public identifier for the notation. If the 
         public identifier was not specified, this is 
         an empty wideString.
      - systemId 
         The system identifier for the notation. If the 
         system identifier was not specified, this is 
         an empty wideString.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId, or SysId is 
         specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomEntity = class (TdomNode) (*)</title>

  <para>This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself not the entity declaration. The nodeName attribute that is inherited from Node contains the name of the entity. An Entity node does not have any parent.</para>
		 
  <para>IMPORTANT NOTICE: The TdomEntity class exists in the XDOM only for compatibility with W3C's DOM.  It is strongly recommented to use TdomCMEntity instead.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property encoding: wideString
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the encoding of this entity, when 
      it is an external parsed entity. This is an
      empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property isInternalEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity is an internal entity; 
      otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property notationName: WideString  (readonly)
    <literallayout>
      For unparsed entities, the name of the notation for 
      the entity. For parsed entities, this is an empty 
      string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: WideString (readonly)
    <literallayout>
      The public identifier for the entity. If the public 
      identifier was not specified, this is an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: WideString  (readonly)
    <literallayout>
      The system identifier for the entity. If the system 
      identifier was not specified, this is an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property version: wideString
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the version number of this entity, 
      when it is an external parsed entity. This is an
      empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomDocument;
                       const Name,
                             PubId,
                             SysId,
                             NotaName: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomEntity object. 
      
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomEntity
      - name
         The name of the TdomEntity.
      - PubId 
         The public identifier for the entity. If the public 
         identifier was not specified, this is an empty string. 
      - SysId 
         The system identifier for the entity. If the system 
         identifier was not specified, this is an empty string. 
      - NotaName 
         The name of the notation of the entity.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomEntityReference = class (TdomNode) (*)</title>

  <para>TdomEntityReference objects may be inserted into the structure model when an entity reference is in the source document, or when the user wishes to insert an entity reference. Note that character entities are considered to be expanded by the HTML or XML processor so that characters are represented by their Unicode equivalent rather than by an entity reference. The replacement value of the referenced Entity, if available, appears in the child list of the TdomEntityReference object. Alternatively, the XML processor may completely expand references to entities while building the structure model, instead of providing EntityReference objects.</para>

  <para>XML does not mandate that a non-validating XML processor read and process entity declarations made in the external subset or declared in external parameter entities. This means that parsed entities declared in the external subset need not be expanded by some classes of applications, and that the replacement value of the entity may not be available.</para>

  <para>The resolution of the children of the EntityReference (the replacement value of the referenced entity) may be lazily evaluated; actions by the user (such as calling the childNodes method on the EntityReference Node) are assumed to trigger the evaluation.</para>


  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) property correspondingCMEntity: TdomCMEntity (readonly)
    <literallayout>
      If the owner document of this TdomEntityReference
      object is attached to a TdomCMObject object which 
      contains a TdomCMEntity object with the same 
      'nodeName' than this TdomEntityReference object,
      then this TdomCMEntity is returned; otherwise
      nil is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
(+) property refersToPredefinedEntity: boolean (readonly)
    <literallayout>
      This is 'true', if this TdomEntityReference refers
      to one of the predefined entities "lt", "gt", "amp",
      "apos", or "quote" (see XML 1.0 spec., § 4.6), 
      otherwise it is 'false'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomDocument;
                       const Name); override;
    <literallayout>
      Creates a new instance of a TdomEntityReference object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a TdomDocument 
      object.

      Parameters:
      - AOwner
         The TdomDocument that creates the TdomEntityReference.
      - name
         The name of the TdomEntityReference.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
  </listitem>

  </itemizedlist>
  </para>
  </sect1>


</chapter>
   

<chapter>
<title>Content Model (+)</title>

<para>This chapter describes the XDOM Content Model (CM). This module provides a representation for XML content models, e.g., DTDs and XML Schemas, together with operations on the content models, and how such information within the content models could be applied to XML documents used in both the document-editing and CM-editing worlds.</para>

<para>Note, that the XDOM Content Model is currently not identical with the Content Model feature desribed in the DOM Level 3 Content Model draft. However, it is planed to subsequently make the XDOM CM compatible with DOM Level 3 as the DOM Level 3 draft evolves. This means that many of the objects, properties and functions desribed in this chapter will be replaced by others in the future.</para>

<sect1>
<title>General Classes</title>

<sect2>
<title>TDomCMNodeType</title>
<para>TDomCMNodeType defines all valid CM node types of the XDOM.</para>
<para>Defined Constants:</para>
<para>

<itemizedlist>
  <listitem>
  <para><emphasis>ctUnknown</emphasis>
	The type of the node is not specified.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctProcessingInstruction</emphasis>
	The node is a TdomCMProcessingInstruction.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctComment</emphasis>
	The node is a TdomCMComment.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctObject</emphasis>
	The node is a TdomCMObject.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctFragment</emphasis>
	The node is a TdomCMFragment.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctExternalObject</emphasis>
	The node is a TdomCMExternalObject.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctInternalObject</emphasis>
	The node is a TdomCMInternalObject.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctAttribute</emphasis>
	The node is a TdomCMAttribute.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctNotation</emphasis>
	The node is a TdomCMNotation.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctEntity</emphasis>
	The node is a TdomCMEntity.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctParameterEntity</emphasis>
	The node is a TdomCMParameterEntity.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctParameterEntityReference</emphasis>
	The node is a TdomCMParameterEntityReference.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctEntityDeclaration</emphasis>
	The node is a TdomCMEntityDeclaration.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctParameterEntityDeclaration</emphasis>
	The node is a TdomCMParameterEntityDeclaration.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctElementTypeDeclaration</emphasis>
	The node is a TdomCMElementTypeDeclaration.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctSequenceParticle</emphasis>
	The node is a TdomCMSequenceParticle.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctChoiceParticle</emphasis>
	The node is a TdomCMChoiceParticle.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctPcdataChoiceParticle</emphasis>
	The node is a TdomCMPcdataChoiceParticle.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctElementParticle</emphasis>
	The node is a TdomCMElementParticle.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctAttributeList</emphasis>
	The node is a TdomCMAttributeList.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctAttributeDefinition</emphasis>
	The node is a TdomCMAttributeDefinition.
  </para>
  </listitem>
  <listitem>
  <para><emphasis>ctNotationDeclaration</emphasis>
	The node is a TdomCMNotationDeclaration.
  </para>
  </listitem>
</itemizedlist>
</para>
</sect2>

<sect2>
<title>TDomCMNodeTypeSet</title>
<para>TdomNodeTypeSet = set of TdomNodeType;</para>
<para>TdomNodeTypeSet defines a set of TdomNodeType instances.</para>
</sect2>

</sect1>


<sect1>
<title>List Classes</title>

<sect2>
<title>TdomCMNodeList = class</title>

  <para>TdomCMNodeList provides the abstraction of an ordered collection of TdomCMNodes. The items in the TdomCMNodeList are accessible via an integral index, starting from 0.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property Length: integer (readonly)
    <literallayout>
      The number of nodes in the TdomCMNodeList instance. 
      The range of valid child node indices is 0 to length-1
      inclusive.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  
  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    function IndexOf(const Node: TdomCMNode): integer; virtual;
    <literallayout>
      Returns the index of the item Node in the collection. 
      If Node is not a member of the collection, -1 is returned.
      Parameters:
      - Node
         The TdomCMNode object whoes index is being retrieved.
      Return Value:
         The index position of the node in the collection, 
         or -1 if Node is not a member of the collection.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const CMNodeList: TList);
    <literallayout>
      Creates a new instance of a TdomNodeList object;

      Parameters:
      - CMNodeList
         The collection of TdomCMNodes which is to be 
         accessed by this TdomCMNodeList, given as a 
         TList.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Item(const index: integer): TdomCMNode; virtual;
    <literallayout>
      Returns the indexth item in the collection. If index is 
      greater than or equal to the number of TdomCMNodes in the 
      list, nil is returned.

      Parameters:
      - index
         Index into the collection
      Return Value:
         The TdomCMNodes at the index position in the 
         collection, or nil if that is not a valid index.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
</sect2>


<sect2>
<title>TdomNamedCMNodeMap = class(TdomCMNodeList)</title>

  <para>Objects implementing the TdomNamedCMNodeMap object are used to represent collections of nodes that can be accessed by name. TdomNamedCMNodeMaps are not maintained in any particular order. Objects contained in an object implementing TdomNamedCMNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a TdomNamedCMNodeMap, and does not imply that the XDOM specifies an order to these Nodes.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property isReadonly: boolean (readonly)
    <literallayout>
      Returns 'true' if the TdomNamedCMNodeMap 
      is readonly, otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: integer (readonly)
    <literallayout>
      The number of nodes in the TdomNamedCMNodeMap instance. 
      The range of valid child node indices is 0 to length-1
      inclusive.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerNode: TdomCMNode (readonly)
    <literallayout>
      The TdomCMNode which uses the TdomNamedCMNodeMap, 
      or nil if the TdomNamedCMNodeMap is not used by 
      a TdomCMNode.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function removeItem(const Arg: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Removes the specified TdomCMNode from the 
      TdomNamedCMNodeMap.

      Paramters:
      - Arg
        The TdomCMNode to remove.

      Return Value:
        The TdomCMNode removed from the list.

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedCMNodeMap is readonly.
      - ENot_Found_Err
        Raised if Arg is not in the list.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function getNamedIndex(const Name: WideString): integer; virtual;
    <literallayout>
      Returns the index of the TdomCMNode identified by 
      its name.  If there is no node named TdomCMNode in 
      the list, -1 is returned.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner,
                             AOwnerNode: TdomCMNode;
                       const NodeList: TList;
                       const AllowedNTs: TDomCMNodeTypeSet); virtual;
    TList); virtual;
    <literallayout>
      Creates a new instance of a TdomNamedCMNodeMap object;

      Parameters:
      - AOwner
         The TdomCMNode that creates the TdomNamedCMNodeMap
      - AOwnerNode
         The TdomNode which uses the TdomNamedCMNodeMap, 
         or nil if the TdomNamedNodeMap is not used by a 
         TdomCMNode.
      - NodeList
         The collection of nodes which is to be accessed by 
         this TdomNamedCMNodeMap, given as a TList.
      - AllowedNTs
         A set of all content model node types allowed in the 
         TdomNamedCMNodeMap.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function getNamedItem(const name: WideString): TdomCMNode;
    <literallayout>
      Retrieves a TdomCMNode specified by name.

      Parameters:
      - name
         Name of a node to retrieve.

      Return Value:
         A TdomCMNode (of any type) with the specified name, 
         or nil if it does not identify any node in the 
         map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function setNamedItem(const Arg: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Adds a TdomCMNode using its nodeName property. 

      As the nodeName property is used to derive the name 
      which the TdomCMNode must be stored under, multiple 
      TdomCMNode of certain types (those that have a 
      "special" string value) cannot be stored as the names 
      would clash. This is seen as preferable to allowing 
      nodes to be aliased.

      Parameters:
      - arg
         A TdomCMNode to store in the map. 
         The TdomCMNode will later be accessible using 
         the value of the nodeName property of the node. 
         If a TdomCMNode with that name is already present 
         in the map, it is replaced by the new one.

      Return Value:
         If the new tdomNode replaces an existing node 
         the replaced tdomNode is returned, otherwise 
         nil is returned. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedCMNodeMap is readonly.
      - EWrong_Document_Err 
         Raised if arg was created from a different 
         TdomCMCustomObject than the one that created 
         the TdomNamedCMNodeMap.
      - EInuse_Node_Err (+)
         Raised if arg is a TdomCMNode that is already a 
         child of a TdomCMnode (if its parentNode property 
         is not nil).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function removeNamedItem(const Name: WideString): TdomCMNode; virtual;
    <literallayout>
      Removes a TdomCMNode specified by name.

      Parameters:
      - name
         The nodeName of the TdomCMNode to remove.

      Return Value:
         The TdomCMNode removed from the map if such a 
         name exists. 

      Exceptions:
      - ENo_Modification_Allowed_Err 
         Raised if this TdomNamedCMNodeMap is readonly.
      - ENot_Found_Err
         Raised if there is no TdomCMNode named name in 
         the map.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Item(const index: integer): TdomCMNode; virtual;
    <literallayout>
      Returns the indexth item in the map. If index is greater
      than or equal to the number of TdomCMNodes in the map, 
      nil is returned.

      Parameters:
      - index
         Index into the map.
      Return Value:
         The TdomCMNodes at the index position in the 
         map, or nil if that is not a valid index.
    </literallayout>
    </para>
    </listitem>
   </itemizedlist>
   </para>
  </sect2>


  <sect2>
  <title>TdomNamedCMAttributeMap = class</title>
  
  <para>A special map only for TdomCMAttribute nodes.  This class is used by the TdomCMObject class for easy access to the attributes defined in a content model.</para>
  </sect2>


  <sect2>
  <title>TdomNamedCMEntityMap = class</title>
  
  <para>A special map only for TdomCMEntity nodes.  This class is used by the TdomCMObject class for easy access to the entities defined in a content model.</para>
  </sect2>

  </sect1>
  
 
  <sect1>
  <title>Basic Content Model Node Classes</title>

  <sect2>
  <title>TdomCMNode = class</title>

  <para>The TdomCMNode object is the primary datatype for the entire Content Model. It represents a single node in the content model tree. While all objects descending from TdomCMNode expose methods for dealing with children, not all objects descending from TdomCMNode may have children.</para>

  <para>The attributes nodeName and nodeValue are included as a mechanism to get at node information without casting down to the specific derived interface. In cases where there is no obvious mapping of these attributes for a specific nodeType, this returns an empty wideString.</para>

  <para>The values of nodeName and nodeValue vary according to the node type as follows:</para>
  <para>
  <literallayout>

                              nodeName             nodeValue         
=====================================================================
CMAttrDefinition              name of attribute    literal default
                                                   value of attribute
---------------------------------------------------------------------
CMAttribute                   #cm-attribute        normalized default
                                                   value of attribute
---------------------------------------------------------------------
CMAttrList                    name of element      ''
                              type                 
---------------------------------------------------------------------
CMChoiceParticle              #choice-particle     '' 
---------------------------------------------------------------------
CMComment                     #comment             content of the
                                                   comment
---------------------------------------------------------------------
CMElementParticle             name of single       '' 
                              particle
---------------------------------------------------------------------
CMElementTypeDeclaration      element type name    ''
---------------------------------------------------------------------
CMEntity                      entity name          ''
---------------------------------------------------------------------
CMEntityDeclaration           entity name          literal entity 
                                                   value 
---------------------------------------------------------------------
CMExternalObject              #cm-external-object  '' 
---------------------------------------------------------------------
CMExternalParameterEntity     #external-parameter-entity   '' 
---------------------------------------------------------------------
CMExternalParsedEntity        #external-parsed-entity      ''
---------------------------------------------------------------------
CMFragment                    #cm-fragment         ''
---------------------------------------------------------------------
CMInternalObject              #cm-internal-object  '' 
---------------------------------------------------------------------
CMNotation                    notation name        ''
---------------------------------------------------------------------
CMNotationDeclaration         notation declaration name    ''
---------------------------------------------------------------------
CMObject                      #cm-object           '' 
---------------------------------------------------------------------
CMParameterEntity             parameter entity     parameter entity 
                              name                 analyzed value 
---------------------------------------------------------------------
CMParameterEntityDeclaration  parameter entity     parameter entity 
                              name                 value 
---------------------------------------------------------------------
CMParameterEntityReference    name of parameter    ''
                              entity referenced
---------------------------------------------------------------------
CMProcessingInstruction       target               entire content   
                                                   excluding the
                                                   target
---------------------------------------------------------------------
CMSequenceParticle            #sequence-particle   ''
</literallayout>
  </para>

  <para><emphasis>Properties</emphasis></para>
  <para>

  <itemizedlist>

    <listitem>
    <para>
    property ChildNodes: TdomCMNodeList (readonly)
    <literallayout>
      A TdomCMNodeList object that contains all children 
      of this node. If there are no children, this is a 
      TdomCMNodeList containing no nodes.
  </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Code: wideString (readonly)
    <literallayout>
      Returns the cooresponding XML-code of the TdomCMNode 
      and all its children.

      Exceptions:
      - ENot_Supported_Err
         Raised if a TdomCMElementTypeDeclaration node is
         found which has no child nodes while its 
         contentspecType is neither 'ctEmpty' nor 'ctAny',
         or if a TdomCMChoiceParticle is found which has 
         no child nodes, or if a TdomCMSequenceParticle 
         is found which has no child nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property FirstChild: TdomCMNode (readonly)
    <literallayout>
      The first child of the TdomCMNode. If there is no 
      such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isReadonly: boolean (readonly)
    <literallayout>
      Returns 'true' if the TdomCMNode object is 
      readonly, otherwise 'false'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property LastChild: TdomCMNode (readonly)
    <literallayout>
      The last child of the TdomCMNode. If there is 
      no such node, this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NextSibling: TdomCMNode (readonly)
    <literallayout>
      The node immediately following the current 
      TdomCMNode. If there is no such TdomCMNode,
      this returns nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeName: WideString (readonly)
    <literallayout>
      The name of the TdomCMNode depends on its 
      type; see the table above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeType: TdomCMNodeType (readonly)
    <literallayout>
      A code representing the type of the 
      underlying object's type, as defined above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NodeValue: WideString (readonly)
    <literallayout>
      The value of this node, depending on its type; 
      see the table above. When it is defined to be
      an empty wideString, setting it has no effect.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err
         Raised when the node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property OwnerCMObject: TdomCustomCMObject (readonly)
    <literallayout>
      Provides access to the TdomCustomCMObject object 
      associated with this Node. This is also the object 
      used to create new TdomCMNodes. When the TdomCMNode 
      is a TdomCustomCMObject this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ParentNode: TdomCMNode (readonly)
    <literallayout>
      The parent of the given TdomCMNode instance. All 
      nodes, except TdomCMObject, TdomCMInternalObject, 
      and TdomCMExternalObject may have a parent. However, 
      if a node has just been created and not yet added 
      to the content model tree, or if it has been removed 
      from the tree, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PreviousSibling: TdomCMNode (readonly)
    <literallayout>        
      The node immediately preceding the current TdomCMNode. 
      If there is no such node, nil is returned.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure setIsReadonly(const value: boolean); virtual;
    <literallayout>
      Specifies whether the TdomCMNode is readonly.

      Parameters:
      - value
         'True' if the TdomCMNode is readonly, 'false'
         otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function validate(const errorHandler: TdomCustomErrorHandler): boolean; virtual;
    <literallayout>
      Validates a TdomCMNode.  Each fatal error, error
      or warning encountered is reported to the specified 
      error handler.  This might occure more than once,
      if more than one fatal error, error or warning is
      encountered.

      Parameters:
      - errorHandler
         The error handler to which fatal errors, errors
         or warnings are reported, or nil, if no error
         handler is used.

      Return Values:
        'True' if the TdomCMNode object is a valid 
        content model or part of a content model, 
        'false' otherwise.
      
      Exceptions on retrieval:
      - ENot_Supported_Err
         Raised if validity is not defined for this
         node type, i.e. the node type represents 
         neither a content model nor a part of a 
         content model.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner: TdomCustomCMObject);
    <literallayout>
      Applications should not call 'create' directly.  
      Instead they should use the appropriate method 
      of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the Node.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    destructor destroy; override; 
    <literallayout>
      Applications should not call 'destroy' directly.  
      Instead they should use the FreeAllNodes method 
      of the object that created the node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function appendChild(const newChild: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Adds a child node to the end of the list of 
      children for this node. If the newChild is 
      already in the tree, it is first removed.

      Parameters:
      - newChild
         The node to add. If this is a TdomCMFragment 
         object, the entire contents of the document 
         fragment are moved into the child list of 
         this node.

      Return Value:
         The node added. 

      Exceptions:
      - ENot_Supported_Err
         Raised if newChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does 
         not allow children of the type of the newChild 
         node, or if the node to append is this node or
         one of this node's ancestors.
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         object than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the node being appended, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure clear; virtual;
    <literallayout>
      Frees all child nodes of this node which are not 
      readonly.

      Exceptions:
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function cloneNode(const deep: boolean): TdomCMNode; virtual;
    <literallayout>
      Returns a duplicate of the node, i.e., serves as 
      a generic copy constructor for Nodes. The duplicate 
      node has no parent (parentNode returns nil). 
      Note that cloning an immutable subtree results in 
      a mutable copy.

      Parameters:
      - deep
         If 'true', recursively clone the subtree under 
         the specified node; if 'false', clone only the 
         node itself.
      - Return Value:
         The duplicate node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function hasChildNodes: boolean; virtual;
    <literallayout>
      This is a convenience method to allow easy 
      determination of whether a node has children 
      or not. 

      Return Value:
        'True' if the node has any children, 'false' if 
        the node has no children.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function insertBefore(const newChild, refChild: TdomCMNode): TdomCMNode;
    virtual;
    <literallayout>
      Inserts a child node newChild before the existing 
      child node refChild. If refChild is nil, insert 
      newChild at the end of the list of children. If 
      newChild is a TdomCMFragment object, all of its 
      children are inserted, in the same order, before 
      refChild. If the newChild is already in the tree, 
      it is first removed. 

      Parameters:
      - newChild
         The node to insert.
      - refChild
         The reference node, i.e., the node before which 
         the new node must be inserted.

      Return Value:
         The node being inserted. 

      Exceptions:
      - ENot_Supported_Err
         Raised if newChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to insert is this node or one of 
         this node's ancestors, or if the newChild node 
         is identical with the refChild node (unless both
         parameters are nil).
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         object than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the newChild node being inserted, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function isAncestor(const AncestorNode: TdomCMNode): boolean; virtual;
    <literallayout>
      This is a convenience method to allow easy 
      determination of whether a node is an 
      ancestor of this node.

      Paramters:
      - AncestorNode
         The TdomCMNode which is being tested whether 
         it is an ancestor of this node.

      Return Value:
         'True' if the AncestorNode is an ancestor of 
         this node, 'false' otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function removeChild(const oldChild: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Removes the child node indicated by oldChild from 
      the list of children and returns it. 

      Parameters:
      - oldChild
         The node being removed

      Return Value:
         The node removed. 

      Exceptions:
      - ENot_Supported_Err
         Raised if oldChild is nil.
      - ENo_Modification_Allowed_Err
         Raised if this node is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function replaceChild(const newChild,
                                oldChild: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Replaces the child node oldChild with newChild in 
      the set of children of the given node, and returns 
      the oldChild node.  If newChild is a TdomCMFragment 
      object, oldChild is replaced by all of the 
      TdomCMFragment children, which are inserted in the 
      same order.  If the newChild is already in the 
      tree, it is first removed. 

      Parameters: 
      - newChild
         The new node to put in the child list.
      - oldChild
         The node being replaced in the list.

      Return Value:
         The node replaced. 

      Exceptions:
      - ENot_Supported_Err
         Raised if newChild or oldChild is nil.
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to insert is this node or one of 
         this node's ancestors, or if the newChild node 
         is a TdomCMFragment.
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         document than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the newChild node, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure writeCode(stream: TStream); virtual;
    <literallayout>
      Writes the cooresponding XML-code of the TdomCMNode 
      and all its children to a stream.

      Parameters:
      - stream
         The stream to write the code to.

      Exceptions:
      - ENot_Supported_Err
         Raised if a TdomCMElementTypeDeclaration node is
         found which has no child nodes while its 
         contentspecType is neither 'ctEmpty' nor 'ctAny',
         or if a TdomCMChoiceParticle is found which has 
         no child nodes, or if a TdomCMSequenceParticle 
         is found which has no child nodes.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCustomCMEntDecl = class (TdomCMNode)</title>

  <para>TdomCustomCMEntDecl is the common parent class of TdomCMEntityDeclaration and TdomCMParameterEntityDeclaration.  You should not use this node type in your Delphi projects.</para>

  </sect2>


  <sect2>
  <title>TdomCustomCMObject = class (TdomCMNode)</title>

  <para>TdomCustomCMObject is the common parent class of TdomCMObject, TdomCMExternalObject, and TdomCMInternalObject. Do not use this node type in your own Delphi projects directly.</para>
  </sect2>


  <sect2>
  <title>TdomCMObject = class (TdomCustomCMObject)</title>

  <para>TdomCMObject represents the information provided by a DTD, both the internal and external subset.</para>
  
  <para>Since declarations cannot exist outside the context of a DTD, the TdomCustomCMObject interface also contains the factory methods needed to create these objects. The TdomCMNode objects created have a ownerCMObject attribute which associates them with the TdomCMObject (resp. TdomCMExternalObject or TdomCMInternalObject, see below) within whose context they were created.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    
    <listitem>
    <para>
    property associatedDocument: TdomDocument (readonly)
    <literallayout>
      Provides access to the TdomDocument object 
      associated with this TdomCMObject. When this 
      TdomCMObject is not used with any TdomDocument 
      yet, this is nil.  To associate a TdomCMObject
      with a TdomDocument use the setContentModel
      function of the TdomDocument interface.
    </literallayout>
    </para>
    </listitem>
    
    <listitem>
    <para>
    property attributes: TdomNamedCMAttributeMap (readonly)
    <literallayout>
      After invoking the prepare method, this map contains
      a list of TdomCMAttribute objects according to 
      the associated internal and external content model. 
      If an attribute for a certain element type is 
      declared more than once, the first declaration is 
      binding and later declarations are ignored.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property domImpl: TdomImplementation (readonly)
    <literallayout>
      The TdomImplementation object that handles this 
      TdomCMObject. An XDOM application may use 
      TdomCMObject objects from multiple implementations.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property elementTypes: TdomNamedCMNodeMap (readonly)
    <literallayout>
      After invoking the prepare method, this map contains
      a list of TdomCMElementTypeDeclaration according to 
      the associated internal and external content model. 
      Each element type is unique. If an element type is 
      declared more than once, the first declaration is 
      binding and later declarations are ignored (such a 
      DTD is well-formed, but not valid, according to XML 
      1.0 specification § 3.2, VC: "Unique Element Type
      Declaration").
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property entities: TdomNamedCMEntityMap (readonly)
    <literallayout>
      After invoking the prepare method, this map 
      contains a list of TdomCMEntity objects 
      according to the associated external and 
      internal content model.  If an entity is 
      declared more than once, the first declaration 
      is binding and later declarations are ignored.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property externalCM: TdomCMExternalObject (readonly)
    <literallayout> 
      The TdomCMExternalObject associated with the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property internalCM: TdomCMInternalObject (readonly)
    <literallayout> 
      The TdomCMInternalObject associated with the document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property notations: TdomNamedCMNodeMap (readonly)
    <literallayout>
      After invoking the prepare method, this map 
      contains a list of TdomCMNotation objects 
      according to the associated external and 
      internal content model.  If a notation is 
      declared more than once, the first declaration 
      is binding and later declarations are ignored 
      (such a DTD is well-formed, but not valid, 
      according to XML 1.0 specification § 4.7, VC: 
      "Unique Notation Name").
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property parameterEntities: TdomNamedCMNodeMap (readonly)
    <literallayout>
      After invoking the prepare method, this map 
      contains a list of TdomCMParameterEntity 
      objects according to the associated external 
      and internal content model.  If a parameter
      entity is declared more than once, the first 
      declaration is binding and later declarations 
      are ignored.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

      
  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function DuplicateCMNode(Node: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Duplicates a TdomCMNode. The duplicate TdomCMNode has 
      no parent (parentCMObject returns nil). 
      Parameters:
      - Node
         The TdomCMNode to be duplicated.
      Return Value:
         The new TdomCMNode. 
      Exceptions: 
      - ENot_Supported_Err
         Raised if the NodeType of the node to be duplicated 
         is not specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttribute(const elementName,
                                     attributeName,
                                     attType,
                                     defaultDecl,
                                     attValue: wideString): TdomCMAttribute; virtual;
    <literallayout>
      Create a TdomCMAttribute.

      Parameters:
      - elementName
         The type of element for which the attribute is 
         being defined.
      - attributeName
         The name of the attribute being defined.
      - attType
         The type of the attribute being defined.
      - defaultDecl
         The default declaration of the attribute being 
         defined.
      - attValue
         The normalized default value of the attribute 
         being defined.  This is not necessarily identical 
         with the literal value of the default declaration 
         as it appears in the attribute definition of a 
         DTD corresponding to this TdomCMAttribute object, 
         because this value has to be normalized before 
         specifying it as the 'attValue' according to the 
         following algorithm:  Character and general 
         entity references are replaced with their values.
         The attribute value is further normalized as 
         described in XML 1.0. spec. §3.3.3.  

         This normalized attribute value can be retrieved
         by the nodeValue property of the TdomCMAttribute. 
         If the attribute type is not CDATA, then the 
         normalized attribute value is automatically 
         further processed by discarding any leading and 
         trailing space (#$20) characters, and by 
         replacing sequences of space (#$20) characters 
         by a single space (#$20) character.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid element name, attribute 
         name, attribute type, default declaration, or 
         attribute value is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMEntity(const Name,
                                  literalValue,
                                  PubId,
                                  SysId,
                                  VersionNumber,
                                  NotaName: WideString): TdomCMEntity; virtual;
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMNotation(const Name,
                                    PubId,
                                    SysId: WideString): TdomCMNotation; virtual;
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntity(const Name,
                                           Value,
                                           PubId,
                                           SysId,
                                           versionNumber: wideString): TdomCMParameterEntity;
    <literallayout>
      Create a TdomCMParameterEntityDeclaration.

      Parameters:
      - name
         The name of the TdomCMParameterEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an 
         internal parameter entity.
      - PubId 
         The public identifier for the parameter entity. 
         If the public identifier was not specified, this 
         is an empty wideString.
      - SysId 
         The system identifier for the parameter entity. 
         If the system identifier was not specified, this 
         is an empty wideString.
      - VersionNumber
         The version number for the parameter entity. 
         If the version number was not specified, this 
         is nil.

      Return Value:
         A new TdomCMParameterEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure detectUnusableEntities(const errorHandler: TdomCustomErrorHandler); virtual;
    <literallayout>
      Detects TdomCMEntity nodes which refer directly or 
      indirectly to an unusable entity (such as declared 
      e.g. by &lt;!ENTITY foo "&lt;"&gt;) and sets their 
      'isUnusable' property to 'true'.

      Parameters:
      - errorHandler
         The error handler to which fatal errors, errors
         or warnings are reported, or nil, if no error
         handler is used.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure resetEntities; virtual;
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create; virtual;
    <literallayout>
      Creates a new TdomCMObject object with its Entity
      list containing the five XML default entities 'lt', 
      'gt', 'amp', 'apos', and 'quot' (for more information 
      on default entities see XML 1.0 specifiaction §§ 2.4, 
      4.1, and 4.6).

      Applications should not call 'create' directly.  
      Instead they should use the appropriate method of a 
      TdomImplementation object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeDefinition(const Name,
                                             AttType,
                                             DefaultDecl,
                                             AttValue: WideString) :
                                             TdomCMAttrDefinition; virtual;
    <literallayout>
      Create a TdomCMAttrDefinition.

      Parameters:
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The default declaration of the attribute being 
         defined.
      - AttValue
         The literal default value of the attribute 
         being defined.

      Return Value:
         A new TdomCMAttrDefinition object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeList(const Name: WideString): TdomCMAttrList; virtual;
    <literallayout>
      Create a TdomCMAttrList.

      Parameters:
      - name
         The element type for which the attributes are 
         declared.

      Return Value:
         A new TdomCMAttrList object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMChoiceParticle(const Freq: WideString): TdomCMChoiceParticle;
virtual;
    <literallayout>
      Create a TdomCMChoiceParticle. This object represents 
      a choice list of content particles which is part of 
      an element type declaration in the DTD
      (see section 3.2.1 of the XML 1.0 specification).  

      Parameters:
      - Freq 
         The optional character following a choice list 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMChoiceParticle object.

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMComment(const Data: WideString): TdomCMComment; virtual;
    <literallayout>
      Create a TdomCMComment node given the specified string. 

      Parameters:
      - data
         The data for the node.

      Return Value:
         The new TdomCMComment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementParticle(const Name,
                                         Freq: WideString): TdomCMElementParticle;
                                         virtual;
    <literallayout>
      Create a TdomCMElementParticle. This object represents 
      a single content particle which is part of an element 
      type declaration in the DTD (see section 3.2.1 of the 
      XML 1.0 specification).

      Parameters:
      - name
         The name of the single particle.
      - Freq 
         The optional character following a single particle 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMElementParticle object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementTypeDeclaration(const Name: WideString;
                                            const Contspec: TdomContentspecType):
                                            TdomCMElementTypeDeclaration; virtual;
    <literallayout>
      Create a TdomCMElementTypeDeclaration.

      Parameters:
      - name
         The name of the TdomCMElementTypeDeclaration.
      - Contspec 
         The content specification type for the element 
         type declaration. Valid values are 'ctEmpty', 
         'ctAny', 'ctMixed', and 'ctChildren'.

      Return Value:
         A new TdomCMElementTypeDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMEntityDeclaration(const Name, EntityValue, PubId, SysId, NotaName: WideString): TdomCMEntityDeclaration; virtual;
    <literallayout>
      Create a TdomCMEntityDeclaration.

      Parameters:
      - name
         The name of the TdomCMEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an 
         internal entity.
      - PubId 
         The public identifier for the entity. If the 
         public identifier was not specified, this is 
         an empty wideString.
      - SysId 
         The system identifier for the entity. If the 
         system identifier was not specified, this is 
         an empty wideString.
      - NotaName 
         The name of the notation of the entity.

      Return Value:
         A new TdomCMEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMFragment: TdomCMFragment; virtual;
    <literallayout>
      Create an empty TdomCMFragment object. 

      Return Value:
         A new TdomCMFragment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMNotationDeclaration(const Name, 
                                             PubId, 
                                             SysId: WideString):
                                                TdomCMNotationDeclaration;
                                                virtual;
    <literallayout>
      Create a TdomCMNotationDeclaration.

      Parameters:
      - name
         The name of the TdomCMNotationDeclaration.
      - PubId 
         The public identifier for the notation 
         declaration. If the public identifier was 
         not specified, this is an empty wideString. 
      - SysId 
         The system identifier for the notation 
         declaration. If the system identifier was 
         not specified, this is an empty wideString. 

      Return Value:
         A new TdomCMNotationDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntityReference(const Name: WideString): TdomCMParameterEntityReference; virtual;
    <literallayout>
      Create a TdomCMParameterEntityReference.

      Parameters:
      - name
         The name of the TdomCMParameterEntityReference.

      Return Value:
         A new TdomCMParameterEntityReference object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMPcdataChoiceParticle: TdomCMPcdataChoiceParticle; virtual;
    <literallayout>
      Create a TdomCMPcdataChoiceParticle. This object 
      represents a mixed content which is part of an 
      element type declaration in the DTD (see section 
      3.2.2 of the XML 1.0 specification). The Frequency 
      of the new TdomDataChoiceParticle is set to '*', 
      since mixed content always may appear zero or more 
      times. In that case it does not matter that XML 
      allows the notation (#PCDATA), because it is 
      aequivalent to (#PCDATA)*.
      
      Return Value:
         A new TdomCMPcdataChoiceParticle object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMProcessingInstruction(const Targ, Data : WideString):
    TdomCMProcessingInstruction; virtual;
    <literallayout>
      Create a TdomCMProcessingInstruction node given the 
      specified name and data strings. 

      Parameters:
      - target
         The target part of the processing instruction.
      - data
         The data for the processing instruction.

      Return Value:
         The new TdomCMProcessingInstruction object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMSequenceParticle(const Freq: WideString):
TdomCMSequenceParticle; virtual;
    <literallayout>
      Create a TdomCMSequenceParticle. This object 
      represents a sequence list of content particles 
      which is part of an element type declaration in 
      the DTD (see section 3.2.1 of the XML 1.0 
      specification).
      
      Parameters:
      - Freq 
         The optional character following a sequence 
         list which governs whether the element or the 
         content particles in the list may occur one or 
         more (+), zero or more (*), or zero or one 
         times (?). The absence of such an operator 
         means that the element or content particle 
         must appear exactly once.
      Return Value:
         A new TdomCMSequenceParticle object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor 
         '+', nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure FreeAllCMNodes(var CMNode: TdomCMNode); virtual;
    <literallayout>
      Frees a TdomCMNode, that was created by this 
      TdomCMObject object, and all its children. 
      The TdomCMNode to free must not have a parent 
      node assigned or being used by a TdomCMAttrList. 
      To free such a TdomCMNode it has to be removed 
      before freeing it. Note, that a readonly 
      TdomCMNode can only be freed together with an 
      ancestor node which is not readonly, since 
      attempting to remove a readonly TdomCMNode would 
      raise an exception. Freeing a TdomCMAttrList 
      node frees also all TdomCMAttrDefinition nodes 
      attached to it.

      Parameters:
      - CMNode
         The TdomCMNode to free.  This is set to nil.  
         
         Hint: Since for a variable parameter, the actual 
         argument must be of the exact type of the formal 
         parameter an application must make sure to call 
         freeAllNodes with a node of type TdomCMNode, e.g.:
           var
             myCMComment: TdomCMComment;
           begin
             ...
             FreeAllCMNodes(TdomCMNode(myCMComment));
           end;  

      Exceptions:
      - EWrong_Document_Err
         Raised if the node to free was created from a 
         different TdomCMObject.
      - ENo_Modification_Allowed_Err
         Raised if the TdomCMObject tries to free itself.
      - EInuse_Node_Err
         Raised if the TdomCMNode to free has a parent node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure prepare; virtual;
    <literallayout>
      Frees all TdomCMNodes contained in the 'attributes',
      'elementTypes', 'entities', 'notations', and 
      'parameterEntities' list and re-processes them 
      according to the associated internal and external 
      content model.

      In any case the TdomCMEntity nodes representing the 
      five XML default entities 'lt', 'gt', 'amp', 'apos', 
      and 'quot' will be available on the Entities list
      even if there are no associated content models (for 
      more information on default entities see XML 1.0 
      specifiaction §§ 2.4, 4.1, and 4.6).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function  removeExternalCM: TdomCMExternalObject; virtual;
      <literallayout>
      Removes a TdomCMExternalObject associated with 
      the TdomCMObject.

      Return Value:
         The removed TdomCMExternalObject, or nil if 
         none was associated with the TdomCMObject.
      </literallayout>
    </para>
    </listitem>
    
    <listitem>
    <para>
    function  removeInternalCM: TdomCMInternalObject; virtual;
      <literallayout>
      Removes a TdomCMInternalObject associated with 
      the TdomCMObject.

      Return Value:
         The removed TdomCMInternalObject, or nil if 
         none was associated with the TdomCMObject.
      </literallayout>
    </para>
    </listitem>
    
    <listitem>
    <para>
    function setExternalCM(const arg: TdomCMExternalObject): TdomCMExternalObject; virtual;
      <literallayout>
      Associates a TdomCMExternalObject with the TdomCMObject.
      If there is another TdomCMExternalObject previously
      associated with the TdomCMObject it is being removed.

      Parameters:
      - arg
         The TdomCMExternalObject to be associated with
         the TdomCMObject.

      Return Value:
         The previously associated TdomCMExternalObject,
         or nil if none was associated with the TdomCMObject.

      Exceptions:
      - EInuse_Content_Model_Err
         Raised if an attempt is made to associate a
         TdomCMObject with a TdomCMExternalObject that
         is already associated elsewhere.
     </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function setInternalCM(const arg: TdomCMInternalObject): TdomCMInternalObject; virtual;
      <literallayout>
      Associates a TdomCMInternalObject with the TdomCMObject.
      If there is another TdomCMInternalObject previously
      associated with the TdomCMObject it is being removed.

      Parameters:
      - arg
         The TdomCMInternalObject to be associated with
         the TdomCMObject.

      Return Value:
         The previously associated TdomCMInternalObject,
         or nil if none was associated with the TdomCMObject.

      Exceptions:
      - EInuse_Content_Model_Err
         Raised if an attempt is made to associate a
         TdomCMObject with a TdomCMInternalObject that
         is already associated elsewhere.
     </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function validate(const errorHandler: TdomCustomErrorHandler): boolean; virtual;
    <literallayout>
      Prepares (see above) and validates a TdomCMObject.  
      Each fatal error, error or warning encountered is 
      reported to the specified error handler.  This 
      might occure more than once, if more than one 
      fatal error, error or warning is encountered.

      Parameters:
      - errorHandler
         The error handler to which fatal errors, errors
         or warnings are reported, or nil, if no error
         handler is used.

      Return Values:
        'True' if the TdomCMNode object is valid.  Note
        that not every violation of a validity constraint
        is being detected, since the document itself is
        not checked for validity.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCustomCMIEObject = class (TdomCustomCMObject)</title>

  <para>TdomCustomCMIEObject is the common base class from which TdomCMInternalObject and TdomCMExternalObject have been derived. Do not use TdomCustomCMIEObject in your own applications.</para>
  </sect2>


  <sect2>
  <title>TdomCMInternalObject = class (TdomCustomCMIEObject)</title>

  <para>TdomCMInternalObject represents the internal subset of a DTD. Conceptually, it is the root of the content model tree of the internal subset, and provides the primary access to its data.</para>
  
  <para>Since declarations cannot exist outside the context of a DTD, the TdomCMObject interface also contains the factory methods needed to create these objects. The TdomCMNode objects created have a ownerCMObject attribute which associates them with the TdomCMObject (resp. TdomCMExternalObject see below) within whose context they were created.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    
    <listitem>
    <para>
    property associatedContentModel: TdomCMObject (readonly)
    <literallayout>
      Provides access to the TdomCMObject object associated 
      with this TdomCMInternalObject. When this 
      TdomCMInternalObject is not used with any TdomCMObject 
      yet, this is nil.  To associate a TdomCMInternalObject
      with a TdomCMObject use the setInternalCM function of 
      the TdomCMObject object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property domImpl: TdomImplementation (readonly)
    <literallayout>
      The TdomImplementation object that handles this 
      TdomCMInternalObject. An XDOM application may use 
      TdomCMInternalObject objects from multiple 
      implementations.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Protected methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    function DuplicateCMNode(Node: TdomCMNode): TdomCMNode; virtual;
    <literallayout>
      Duplicates a TdomCMnode. The duplicate TdomCMNode has 
      no parent (ParentNode returns nil). 

      Parameters:
      - Node
         The TdomCMNode to be duplicated.

      Return Value:
         The new TdomCMNode. 

      Exceptions: 
      - ENot_Supported_Err
         Raised if the NodeType of the node to be duplicated 
         is not specified.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor create(const aOwner: TdomImplementation;
                       const pubId,
                             sysId: wideString); virtual;
    <literallayout>
      Creates a new TdomCMInternalObject object.  Applications 
      should not call 'create' directly.  Instead they should 
      use the appropriate method of a TdomImplementation 
      object.
      
      Parameters:
      - aOwner
         The TdomImplementation which creates the new
         TdomCMInternalObject object.
      - pubId 
         The public identifier for the TdomCMInternalObject 
         object. If the public identifier was not specified, 
         this is an empty wideString. 
      - sysId 
         The system identifier for the TdomCMInternalObject 
         object. If the public identifier was not specified, 
         this is an empty wideString. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeDefinition(const Name,
                                             AttType,
                                             DefaultDecl,
                                             AttValue: WideString) :
                                             TdomCMAttrDefinition; virtual;
    <literallayout>
      Create a TdomCMAttrDefinition.

      Parameters:
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The default declaration of the attribute being 
         defined.
      - AttValue
         The literal default value of the attribute 
         being defined.

      Return Value:
         A new TdomCMAttrDefinition object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeList(const Name: WideString): TdomCMAttrList; virtual;
    <literallayout>
      Create a TdomCMAttrList.

      Parameters:
      - name
         The element type for which the attributes are declared.

      Return Value:
         A new TdomCMAttrList object.</literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMChoiceParticle(const Freq: WideString): TdomCMChoiceParticle;
virtual;
    <literallayout>
      Create a TdomCMChoiceParticle. This object represents 
      a choice list of content particles which is part of 
      an element type declaration in the DTD
      (see section 3.2.1 of the XML 1.0 specification).  

      Parameters:
      - Freq 
         The optional character following a choice list 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMChoiceParticle object.

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.</literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMComment(const Data: WideString): TdomCMComment; virtual;
    <literallayout>
      Create a TdomCMComment node given the specified string. 

      Parameters:
      - data
         The data for the node.

      Return Value:
         The new TdomCMComment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementParticle(const Name,
                                           Freq: WideString): TdomCMElementParticle;
                                           virtual;
    <literallayout>
      Create a TdomCMElementParticle. This object represents 
      a single content particle which is part of an element 
      type declaration in the DTD (see section 3.2.1 of the 
      XML 1.0 specification).

      Parameters:
      - name
         The name of the single particle.
      - Freq 
         The optional character following a single particle 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMElementParticle object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementTypeDeclaration(const Name: WideString;
                                            const Contspec: TdomContentspecType):
                                            TdomCMElementTypeDeclaration; virtual;
    <literallayout>
      Create a TdomCMElementTypeDeclaration.

      Parameters:
      - name
         The name of the TdomCMElementTypeDeclaration.
      - Contspec 
         The content specification type for the element 
         type declaration. Valid values are 'ctEmpty', 
         'ctAny', 'ctMixed', and 'ctChildren'.

      Return Value:
         A new TdomCMElementTypeDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMEntityDeclaration(const Name, EntityValue, PubId, SysId, NotaName: WideString): TdomCMEntityDeclaration; virtual;
    <literallayout>
      Create a TdomCMEntityDeclaration.
      Parameters:
      - name
         The name of the TdomCMEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an 
         internal entity.
      - PubId 
         The public identifier for the entity. If the 
         public identifier was not specified, this is 
         an empty wideString. 
      - SysId 
         The system identifier for the entity. If the 
         system identifier was not specified, this is 
         an empty wideString.
      - NotaName 
         The name of the notation of the entity.
      Return Value:
         A new TdomCMEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMFragment: TdomCMFragment; virtual;
    <literallayout>
      Create an empty TdomCMFragment object. 

      Return Value:
         A new TdomCMFragment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMNotationDeclaration(const Name, 
                                             PubId, 
                                             SysId: WideString):
                                                TdomCMNotationDeclaration;
                                                virtual;
    <literallayout>
      Create a TdomCMNotationDeclaration.

      Parameters:
      - name
         The name of the TdomCMNotationDeclaration.
      - PubId 
         The public identifier for the notation 
         declaration. If the public identifier was 
         not specified, this is an empty wideString. 
      - SysId 
         The system identifier for the notation 
         declaration. If the system identifier was 
         not specified, this is an empty wideString. 

      Return Value:
         A new TdomCMNotationDeclaration object.</literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntityDeclaration(const Name, EntityValue, PubId,
SysId: WideString): TdomCMParameterEntityDeclaration; virtual;
    <literallayout>
      Create a TdomCMParameterEntityDeclaration.

      Parameters:
      - name
         The name of the TdomCMParameterEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an 
         internal parameter entity.
      - PubId 
         The public identifier for the entity. If the 
         public identifier was not specified, this is 
         an empty wideString. 
      - SysId 
         The system identifier for the entity. If the 
         system identifier was not specified, this is 
         an empty wideString.

      Return Value:
         A new TdomCMParameterEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntityReference(const Name: WideString): TdomCMParameterEntityReference; virtual;
    <literallayout>
      Create a TdomCMParameterEntityReference.

      Parameters:
      - name
         The name of the TdomCMParameterEntityReference.

      Return Value:
         A new TdomCMParameterEntityReference object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMPcdataChoiceParticle: TdomCMPcdataChoiceParticle; virtual;
    <literallayout>
      Create a TdomCMPcdataChoiceParticle. This object 
      represents a mixed content which is part of an 
      element type declaration in the DTD (see section 
      3.2.2 of the XML 1.0 specification). The Frequency 
      of the new TdomDataChoiceParticle is set to '*', 
      since mixed content always may appear zero or more 
      times. In that case it does not matter that XML 
      allows the notation (#PCDATA), because it is 
      aequivalent to (#PCDATA)*.
      
      Return Value:
         A new TdomCMPcdataChoiceParticle object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMProcessingInstruction(const Targ, Data : WideString):
    TdomCMProcessingInstruction; virtual;
    <literallayout>
      Create a TdomCMProcessingInstruction node given the 
      specified name and data strings. 

      Parameters:
      - target
         The target part of the processing instruction.
      - data
         The data for the processing instruction.

      Return Value:
         The new TdomCMProcessingInstruction object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMSequenceParticle(const Freq: WideString):
TdomCMSequenceParticle; virtual;
    <literallayout>
      Create a TdomCMSequenceParticle. This object 
      represents a sequence list of content particles 
      which is part of an element type declaration in 
      the DTD (see section 3.2.1 of the XML 1.0 
      specification).
      
      Parameters:
      - Freq 
         The optional character following a sequence 
         list which governs whether the element or the 
         content particles in the list may occur one or 
         more (+), zero or more (*), or zero or one 
         times (?). The absence of such an operator 
         means that the element or content particle 
         must appear exactly once.

      Return Value:
         A new TdomCMSequenceParticle object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor 
         '+', nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure FreeAllCMNodes(const CMNode: TdomCMNode); virtual;
    <literallayout>
      Frees a TdomCMNode, that was created by this 
      TdomCMInternalObject object, and all its children. 
      The TdomCMNode to free must not have a parent 
      node assigned or being used by a TdomCMAttrList. 
      To free such a TdomCMNode it has to be removed 
      before freeing it. Note, that a readonly 
      TdomCMNode can only be freed together with an 
      ancestor node which is not readonly, since 
      attempting to remove a readonly TdomCMNode would 
      raise an exception. Freeing a TdomCMAttrList 
      node frees also all TdomCMAttrDefinition nodes 
      attached to it.

      Parameters:
      - CMNode
         The TdomCMNode to free.

      Exceptions:
      - EWrong_Document_Err
         Raised if the node to free was created from a 
         different TdomCMInternalObject.
      - ENo_Modification_Allowed_Err
         Raised if the TdomCMObject tries to free itself.
      - EInuse_Node_Err
         Raised if the TdomCMNode to free has a parent node.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TdomCMExternalObject = class (TdomCustomCMIEObject)</title>

  <para>TdomCMExternalObject represents the external subset of a DTD. Conceptually, it is the root of the content model tree, and provides the primary access to its data.</para>
  
  <para>Since declarations cannot exist outside the context of a DTD, the TdomCMExternalObject interface also contains the factory methods needed to create these objects. The TdomCMNode objects created have a ownerCMObject attribute which associates them with the TdomCMExternalObject(resp. TdomCMObject, see above) within whose context they were created.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property associatedContentModel: TdomCMObject (readonly)
    <literallayout>
      Provides access to the TdomCMObject object associated 
      with this TdomCMExternalObject. When this 
      TdomCMExternalObject is not used with any TdomCMObject 
      yet, this is nil.  To associate a TdomCMExternalObject
      with a TdomCMObject use the setExternalCM function of 
      the TdomCMObject object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property domImpl: TdomImplementation (readonly)
    <literallayout>
      The TdomImplementation object that handles this 
      TdomCMInternalObject. An XDOM application may use 
      TdomCMInternalObject objects from multiple 
      implementations.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property encoding: wideString
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the encoding of the external
      subset of the DTD. This is an empty wideString 
      otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property version: wideString (readonly)
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the version number of the external
      subset of the DTD.  This is an empty wideString 
      otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  
  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor create(const aOwner: TdomImplementation;
                       const pubId,
                             sysId: wideString); virtual;
    <literallayout>
      Creates a new TdomCMExternalObject object.  Applications 
      should not call 'create' directly.  Instead they should 
      use the appropriate method of a TdomImplementation 
      object.
      
      Parameters:
      - aOwner
         The TdomImplementation which creates the new
         TdomCMExternalObject object.
      - pubId 
         The public identifier for the TdomCMExternalObject 
         object. If the public identifier was not specified, 
         this is an empty wideString. 
      - sysId 
         The system identifier for the TdomCMExternalObject 
         object. If the public identifier was not specified, 
         this is an empty wideString. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeDefinition(const Name,
                                             AttType,
                                             DefaultDecl,
                                             AttValue: WideString) :
                                             TdomCMAttrDefinition; virtual;
    <literallayout>
      Create a TdomCMAttrDefinition.

      Parameters:
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The default declaration of the attribute being 
         defined.
      - AttValue
         The literal default value of the attribute 
         being defined.

      Return Value:
         A new TdomCMAttrDefinition object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMAttributeList(const Name: WideString): TdomCMAttrList; virtual;
    <literallayout>
      Create a TdomCMAttrList.

      Parameters:
      - name
         The element type for which the attributes are declared.

      Return Value:
         A new TdomCMAttrList object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMChoiceParticle(const Freq: WideString): TdomCMChoiceParticle;
virtual;
    <literallayout>
      Create a TdomCMChoiceParticle. This object represents 
      a choice list of content particles which is part of 
      an element type declaration in the DTD
      (see section 3.2.1 of the XML 1.0 specification).  

      Parameters:
      - Freq 
         The optional character following a choice list 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMChoiceParticle object.

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMComment(const Data: WideString): TdomCMComment; virtual;
    <literallayout>
      Create a TdomCMComment node given the specified string. 

      Parameters:
      - data
         The data for the node.

      Return Value:
         The new TdomCMComment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementParticle(const Name,
                                         Freq: WideString): TdomCMElementParticle;
                                         virtual;
    <literallayout>
      Create a TdomCMElementParticle. This object represents 
      a single content particle which is part of an element 
      type declaration in the DTD (see section 3.2.1 of the 
      XML 1.0 specification).

      Parameters:
      - name
         The name of the single particle.
      - Freq 
         The optional character following a single particle 
         which governs whether the element or the content 
         particles in the list may occur one or more (+), 
         zero or more (*), or zero or one times (?). The 
         absence of such an operator means that the element 
         or content particle must appear exactly once.

      Return Value:
         A new TdomCMElementParticle object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', 
         nor an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMElementTypeDeclaration(const Name: WideString;
                                            const Contspec: TdomContentspecType):
                                            TdomCMElementTypeDeclaration; virtual;
    <literallayout>
      Create a TdomCMElementTypeDeclaration.

      Parameters:
      - name
         The name of the TdomCMElementTypeDeclaration.
      - Contspec 
         The content specification type for the element 
         type declaration. Valid values are 'ctEmpty', 
         'ctAny', 'ctMixed', and 'ctChildren'.

      Return Value:
         A new TdomCMElementTypeDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMEntityDeclaration(const Name, EntityValue, PubId, SysId, NotaName: WideString): TdomCMEntityDeclaration; virtual;
    <literallayout>
      Create a TdomCMEntityDeclaration.

      Parameters:
      - name
         The name of the TdomCMEntityDeclaration.
      - entityValue
         The content of the declaration, if it is an 
         internal entity.
      - pubId 
         The public identifier for the entity. If the 
         public identifier was not specified, this is 
         an empty wideString. 
      - sysId 
         The system identifier for the entity. If the 
         system identifier was not specified, this is 
         an empty wideString.
      - notaName 
         The name of the notation of the entity.

      Return Value:
         A new TdomCMEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMFragment: TdomCMFragment; virtual;
    <literallayout>
      Create an empty TdomCMFragment object. 

      Return Value:
         A new TdomCMFragment object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMNotationDeclaration(const Name, 
                                               PubId, 
                                               SysId: WideString):
                                                  TdomCMNotationDeclaration;
                                                  virtual;
    <literallayout>
      Create a TdomCMNotationDeclaration.

      Parameters:
      - name
         The name of the TdomCMNotationDeclaration.
      - PubId 
         The public identifier for the notation 
         declaration. If the public identifier was 
         not specified, this is an empty wideString. 
      - SysId 
         The system identifier for the notation 
         declaration. If the system identifier was 
         not specified, this is an empty wideString. 

      Return Value:
         A new TdomCMNotationDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntityDeclaration(const Name, EntityValue, PubId,
SysId: WideString): TdomCMParameterEntityDeclaration; virtual;
    <literallayout>
      Create a TdomCMParameterEntityDeclaration.

      Parameters:
      - name
         The name of the TdomCMParameterEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an 
         internal parameter entity.
      - PubId 
         The public identifier for the entity. If the 
         public identifier was not specified, this is
         an empty wideString. 
      - SysId 
         The system identifier for the entity. If the 
         system identifier was not specified, this is 
         an empty wideString.
      Return Value:
         A new TdomCMParameterEntityDeclaration object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMParameterEntityReference(const Name: WideString): TdomCMParameterEntityReference; virtual;
    <literallayout>
      Create a TdomCMParameterEntityReference.

      Parameters:
      - name
         The name of the TdomCMParameterEntityReference.

      Return Value:
         A new TdomCMParameterEntityReference object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMPcdataChoiceParticle: TdomCMPcdataChoiceParticle; virtual;
    <literallayout>
      Create a TdomCMPcdataChoiceParticle. This object 
      represents a mixed content which is part of an 
      element type declaration in the DTD (see section 
      3.2.2 of the XML 1.0 specification). The Frequency 
      of the new TdomDataChoiceParticle is set to '*', 
      since mixed content always may appear zero or more 
      times. In that case it does not matter that XML 
      allows the notation (#PCDATA), because it is 
      aequivalent to (#PCDATA)*.
      
      Return Value:
         A new TdomCMPcdataChoiceParticle object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMProcessingInstruction(const Targ, Data : WideString):
    TdomCMProcessingInstruction; virtual;
    <literallayout>
      Create a TdomCMProcessingInstruction node given the 
      specified name and data strings. 

      Parameters:
      - target
         The target part of the processing instruction.
      - data
         The data for the processing instruction.

      Return Value:
         The new TdomCMProcessingInstruction object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function CreateCMSequenceParticle(const Freq: WideString):
TdomCMSequenceParticle; virtual;
    <literallayout>
      Create a TdomCMSequenceParticle. This object 
      represents a sequence list of content particles 
      which is part of an element type declaration in 
      the DTD (see section 3.2.1 of the XML 1.0 
      specification).
      
      Parameters:
      - Freq 
         The optional character following a sequence 
         list which governs whether the element or the 
         content particles in the list may occur one or 
         more (+), zero or more (*), or zero or one 
         times (?). The absence of such an operator 
         means that the element or content particle 
         must appear exactly once.

      Return Value:
         A new TdomCMSequenceParticle object. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor 
         '+', nor an empty string.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>            
  </para>  
  </sect2>
  
  </sect1>
  
  
  <sect1>
  <title>Nodes Directly Derived from TdomCMNode</title>

  <sect2>
  <title>TdomCMAttrDefinition = class(TdomCMNode)</title>

  <para>This object represents an attribute definition which is part of an attribute list declared in the DTD.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AttributeType: WideString (readonly)
    <literallayout>
      Returns the attribute type.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DefaultDeclaration: WideString (readonly)
    <literallayout>
      Returns the default declaration of the attribute as 
      a wideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; 
                       const Name,
                             AttType,
                             DefaultDecl,
                             AttValue: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMAttrDefinition 
      object. Applications should not call 'create' 
      directly. Instead they should use the appropriate 
      method of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMAttrDefinition.
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The literal value of the default declaration 
         of the attribute being defined.
      - AttValue
         The literal value of the attribute being 
         defined.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, attribute type, 
         default declaration or attribute value is 
         specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMAttribute = class(TdomCMNode)</title>

  <para>This object represents the information provided by an attribute definition in the DTD.  Note that this does not model the attribute definition itself as it appears in an attribute list declaration in the DTD.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property AttributeName: WideString (readonly)
    <literallayout>
      Returns the name of the attribute.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property AttributeType: WideString (readonly)
    <literallayout>
      Returns the attribute type.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ElementName: WideString (readonly)
    <literallayout>
      Returns the name of the type of element for 
      which the attribute is defined.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DefaultDeclaration: WideString (readonly)
    <literallayout>
      Returns the default declaration of the attribute as 
      a wideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner: TdomCustomCMObject;
                       const elementName,
                             attributeName,
                             attType,
                             defaultDecl,
                             attValue: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMAttribute object.
      Applications should not call 'create' directly. 
      A TdomCMAttribute object is normally created by the 
      protected 'CreateCMAttribute' method of a
      TdomCMObject object and added to its 'attributes' 
      map.  Applications which implement their own 
      parsers should use this method.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMAttribute.
      - elementName
         The type of element for which the attribute is 
         being defined.
      - attributeName
         The name of the attribute being defined.
      - attType
         The type of the attribute being defined.
      - defaultDecl
         The default declaration of the attribute being 
         defined.
      - attValue
         The normalized default value of the attribute 
         being defined.  This is not necessarily identical 
         with the literal value of the default declaration 
         as it appears in the attribute definition of a 
         DTD corresponding to this TdomCMAttribute object, 
         because this value has to be normalized before 
         specifying it as the 'attValue' according to the 
         following algorithm:  Character and general 
         entity references are replaced with their values.
         The attribute value is further normalized as 
         described in XML 1.0. spec. §3.3.3.  

         This normalized attribute value can be retrieved
         by the nodeValue property of the TdomCMAttribute. 
         If the attribute type is not CDATA, then the 
         normalized attribute value is automatically 
         further processed by discarding any leading and 
         trailing space (#$20) characters, and by 
         replacing sequences of space (#$20) characters 
         by a single space (#$20) character.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid element name, attribute 
         name, attribute type, default declaration, or 
         attribute value is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMAttrList = class(TdomCMNode)</title>

  <para>A TdomCMAttrList object represents an attribute list declared in the DTD. The attribute definitions contained in the attribute list are represented by TdomCMAttrDefinition child nodes of TdomCMAttrList.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
	                   const Name: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMAttrList object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a content 
      model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the TdomCMAttrList.
      - name
         The element type for which the attributes are declared.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMComment = class (TdomCMNode)</title>

  <para>This represents the content of a comment, i.e. all the characters between the starting '&lt;!--' and ending '--&gt;'.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Data: WideString (readonly)
    <literallayout>
      This provides access to the character data of the comment.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property length: integer (readonly)
    <literallayout>
      This provides access to the number of characters 
      that are available through data and the 
      substringData method below. This may have the 
      value zero.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner: TdomCustomCMObject); virtual;
    <literallayout>
      Creates a new instance of a TdomCMComment 
      object. Applications should not call 'create' 
      directly. Instead they should use the appropriate 
      method of a content model object.
      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMComment.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function substringData(const offset, count: integer):WideString; virtual;
    <literallayout>
      Extracts a range of data from the comment. 

      Parameters:
      - offset
         Start offset of substring to extract
      - count
         The number of characters to extract.

      Return Value:
        This method returns the specified substring. 
        If the sum of offset and count exceeds the 
        length, then all characters to the end of 
        the data are returned. 

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters in 
         data, or if the specified count is negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure AppendData(const arg: WideString); virtual;
    <literallayout>
      Append the WideString to the end of the character 
      data in the comment. Upon success, data provides 
      access to the concatenation of data and the 
      wideString specified. 

      Parameters:
      - arg
         The WideString to append.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure insertData(const offset: integer; const arg: WideString); virtual;
    <literallayout>
      Insert a WideString at the specified character 
      offset. 

      Parameters:
      - offset
         The character offset at which to insert
      - arg
         The WideString to insert.

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters in 
         data, or if the specified count is negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure deleteData(const offset, count: integer); virtual;
    <literallayout>
      Remove a range of characters from the comment. 
      Upon success, data and length reflect the change. 

      Parameters:
      - offset
         The offset from which to remove characters.
      - count
         The number of characters to delete. If the 
         sum of offset and count exceeds length then 
         all characters from offset to the end of the 
         data are deleted.

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters in 
         data, or if the specified count is negative.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
                      
    procedure replaceData(const offset, count: integer; const arg: WideString);
    virtual;
    <literallayout>
      Replace the characters starting at the specified 
      character offset with the specified string. 

      Parameters:
      - offset
         The offset from which to start replacing.
      - count
         The number of characters to replace. If the 
         sum of offset and count exceeds length, then 
         all characters to the end of the data are 
         replaced (i.e., the effect is the same as a 
         remove method call with the same range, 
         followed by an append method invocation).
      - arg
         The WideString with which the range must be 
         replaced.

      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative 
         or greater than the number of characters in 
         data, or if the specified count is negative.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>
  
  
  <sect2>
  <title>TdomCMElementTypeDeclaration = class (TdomCMNode)</title>

  <para>This object represents an element type declared in the DTD.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Contentspec: wideString (readonly)
    <literallayout>
      Returns the content specification of the element
      type declaration as a wideString (cf. XML 1.0 spec.
      § 3.2, prod. [46]).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ContentspecType: TdomContentspecType (readonly)
    <literallayout>
      The content specification type for the element 
      type declaration.  Valid values are 'ctEmpty', 
      'ctAny', 'ctMixed', and 'ctChildren'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(const AOwner: TdomCustomCMObject; 
	               const Name: WideString;
		       const ContspecType: TdomContentspecType); virtual;
    <literallayout>
      Creates a new instance of a 
      TdomCMElementTypeDeclaration object. 
      Applications should not call 'create' directly. 
      Instead they should use the appropriate
      method of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMElementTypeDeclaration.
      - name
         The element type being declared.
      - Contspec 
         The content specification type for the element 
         type declaration.  Valid values are 'ctEmpty', 
         'ctAny', 'ctMixed', and 'ctChildren'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function AppendChild(const newChild: TdomNode): TdomNode; override;
    <literallayout>
      Adds a child node to this node. If the newChild 
      is already in the tree, it is first removed. Note, 
      that it is not allowed that the 
      TdomCMElementTypeDeclaration has more than one 
      child node.

      Parameters:
      - newChild
         The node to add. If this is a TdomCMFragment 
         object, the entire contents of the content model 
         fragment are moved into the child list of this
         node.

      Return Value:
         The node added. 

      Exceptions:
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to append is one of this node's 
         ancestors.
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         content model than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the node being appended, is readonly.
      - ENot_Supported_Err
         Raised if the TdomCMElementTypeDeclaration has 
         already a child node which is different from 
         newchild, or if its contentspecType is either 
         'ctEmpty' or 'ctAny'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function InsertBefore(const newChild, 
                                refChild: TdomNode): TdomNode; override;
    <literallayout>
      Inserts a child node newChild to the node. 
      refChild has to be either identical with newChild 
      or nil, in order to make sure that the 
      TdomCMElementTypeDeclaration has not more than 
      one child node.

      Parameters:
      - newChild
         The node to insert.
      - refChild
         The reference node, i.e., the node before which 
         the new node must be inserted.

      Return Value:
         The node being inserted. 

      Exceptions:
      - EHierarchy_Request_Err
         Raised if this node is of a type that does not 
         allow children of the type of the newChild node, 
         or if the node to insert is one of this node's 
         ancestors.
      - EWrong_Document_Err 
         Raised if newChild was created from a different 
         content model than the one that created this node.
      - ENo_Modification_Allowed_Err
         Raised if this node, or the previous parent of 
         the newChild node, is readonly.
      - ENot_Found_Err
         Raised if refChild is not a child of this node.
      - ENot_Supported_Err
         Raised if the TdomCMElementTypeDeclaration has 
         already a child node which is different from 
         newchild, or if its contentspecType is either 
         'ctEmpty' or 'ctAny'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMEntity = class (TdomCMNode)</title>

  <para>This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself not the entity declaration.</para>

  <para>The nodeName property that is inherited from TdomCMNode contains the name of the entity.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property encoding: wideString
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the encoding of this entity, when 
      it is an external parsed entity. This is an
      empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isInternalEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity is an internal entity; 
      otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isParsedEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity is a parsed entity; 
      otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isUnusable: boolean (readonly)
    <literallayout>
      Returns 'true' if a reference to the entity in the 
      body of a document would lead to a not well-formed 
      document.  This applies to all entity declarations 
      which do use the unescaped '&lt;' character but do 
      not conform to the XML production labeled 'content' 
      (see XML 1.0. spec., prod. [9], § 4.3.2 and Erratum 
      72), e.g. &lt;!ENTITY foo "&lt;"&gt;.  Entities declared as
      including an entity reference to an unusable Entity
      are well-formed, but should be treated by the 
      application as being themselves unusable.  Note 
      that the XML 1.0 spec. seems not to give any advice 
      whether the following is well-formed or not:

               &lt;!DOCTYPE doc [
                 &lt;!ENTITY foo "&lt;"&gt;
                 &lt;!ENTITY bar "&amp;foo;bar&gt;"&gt;
               ]&gt;
               &lt;doc&gt;&amp;bar;&lt;/doc&gt;
	  
      However, the XDOM does treat it as being not 
      well-formed, and any XDOM application should do 
      likewise as long as this issue is not clarified by 
      the W3C.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property literalValue: WideString (readonly)
    <literallayout>
      The literal value of the entity.  The literal
      value is specified at creation time and cannot
      be altered.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property normalizedValue: WideString (readonly)
    <literallayout>
      This returns the literal value of the entity processed
      into a normalized CDATA wideString according to the 
      algorithm described in XML 1.0. spec. § 3.3.3.
      
      Exceptions on retrieval:
      - EConvertError
         Raised if this TdomCMEntity is an unparsed
         entity, or the literal value contains an entity
         reference which could not be resolved either 
         because there is no corresponding TdomCMEntity 
         in the owner content model's 'entities' list, 
         or because the corresponding entity is an unparsed 
         entity, or the literal value would lead to a
         violation of one of the XML 1.0 wellformedness
         or validity constraint in the context of its owner 
         object, e.g. it contains a (propably indirect) 
         reference to itself or to an unparsed entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property notationName: WideString  (readonly)
    <literallayout>
      For unparsed entities, the name of the notation for 
      the entity. For parsed entities, this is an empty 
      wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: WideString (readonly)
    <literallayout>
      The public identifier for the entity. If the public 
      identifier was not specified, this is an empty 
      wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property replacementText: WideString (readonly)
    <literallayout>
      This returns the replacement text of the entity 
      processed from the literal value according to the 
      algorithm described in XML 1.0. spec. § 4.5.,
      except that no parameter entity references are
      being detected since XDOM requires them to be
      resolved before creating the TdomCMEntity object.
      
      Exceptions on retrieval:
      - EConvertError
         Raised if this TdomCMEntity is an unparsed
         entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property resolvedValue: WideString (readonly)
    <literallayout>
      This returns a recursivly processed replacement text
      of the TdomCMEntity's literal value, i.e. every 
      entity reference in the replacement text is recursivly
      resolved.  The value returned differs from 
      'normalizedValue' only insofar as no whitespace is 
      normalized.
      
      Exceptions on retrieval:
      - EConvertError
         Raised if this TdomCMEntity is an unparsed
         entity, or the literal value contains an entity
         reference which could not be resolved either 
         because there is no corresponding TdomCMEntity 
         in the owner content model's 'entities' list, 
         or because the corresponding entity is an unparsed 
         entity, or the literal value would lead to a
         violation of one of the XML 1.0 wellformedness
         or validity constraint in the context of its owner 
         object, e.g. it contains a (propably indirect) 
         reference to itself or to an unparsed entity.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: WideString  (readonly)
    <literallayout>
      The system identifier for the entity. If the system 
      identifier was not specified, this is an empty 
      wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property version: wideString (readonly)
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the version number of this entity, 
      when it is an external parsed entity. This is an
      empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const AOwner: TdomCustomCMObject;
                       const Name,
                             LiteralValue,
                             PubId,
                             SysId,
                             VersionNumber,
                             NotaName: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMEntity object. 
      Applications should not call 'create' directly. 
      A TdomCMEntity is normally created by the protected
      'createCMEntity' method of a content model and 
      added to its 'entities' list.  Applications which 
      implement their own parsers should use this method.
      
      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMEntity.
      - name
         The name of the TdomCMEntity.
      - literalValue
         The literal value for the entity.
      - PubId 
         The public identifier for the entity. If the public 
         identifier was not specified, this is an empty 
         wideString. 
      - SysId 
         The system identifier for the entity. If the system 
         identifier was not specified, this is an empty 
         wideString. 
      - VersionNumber   
         An attribute specifying, as part of the text
         declaration, the version number of this entity, 
         when it is an external parsed entity. This is an
         empty wideString otherwise.
      - NotaName 
         For unparsed entities, the name of the notation for 
         the entity. For parsed entities, this is an empty 
         wideString.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId, SysId, or 
         VersionNumber is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMFragment = class (TdomCMNode)</title>

  <para>TdomCMFragment is a lightweight or minimal content model object. It is very common to want to be able to extract a portion of a content model's tree or to create a new fragment of a content model. Imagine implementing a user command like cut or rearranging a content model by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a TdomCMNode for this purpose. While it is true that a TdomCMObject could fulfil this role, a TdomCMObject object can potentially be a heavyweight object. What is really needed for this is a very lightweight object. TdomCMFragment is such an object.</para>

  <para>Furthermore, various operations -- such as inserting nodes as children of another Node -- may take TdomCMFragment objects as arguments; this results in all the child nodes of the TdomCMFragment being moved to the child list of this node.</para>

  <para>The children of a TdomCMFragment node are zero or more TdomCMNodes representing the tops of any sub-trees defining the structure of the content model. When a TdomCMFragment is inserted into a content model the children of the TdomCMFragment and not the TdomCMFragment itself are inserted.</para>

  <para><emphasis>Public methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject); virtual;
    <literallayout>
      Creates a new instance of a TdomCMFragment object. 
      Applications should not call 'create' directly. 
      Instead they should use the appropriate method of a 
      content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the Node.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMNotation = class (TdomCMNode)</title>

  <para>This object represents a notation. A notation either declares, by name, the format of an unparsed entity (see § 4.7 of the XML 1.0 specification), or is used for formal declaration of Processing Instruction targets (see § 2.6 of the XML 1.0 specification). The nodeName attribute inherited from TdomCMNode is set to the declared name of the notation. Note, that TdomCMNotation is not a representation of the notation declaration in a DTD; use TdomCMNotationDeclaration instead.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier for the notation. If the 
      public identifier was not specified, this is 
      an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier for the notation. If the 
      system identifier was not specified, this is 
      an empty wideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
                       const Name,
                             PubId,
                             SysId: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMNotation object. 
      Applications should not call 'create' directly. 
      A TdomCMNotation is normally created by the protected
      'createCMNotation' method of a content model and 
      added to its 'notations' list.  Applications which 
      implement their own parsers should use this method.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMNotation.
      - name
         The name of the TdomNotation.
      - publicId 
         The public identifier for the notation. If the 
         public identifier was not specified, this is 
         an empty wideString.
      - systemId 
         The system identifier for the notation. If the 
         system identifier was not specified, this is 
         an empty wideString.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId, or SysId is 
         specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMNotationDeclaration = class (TdomCMNode)</title>

  <para>This object represents a notation declaration in the DTD. A notation either declares, by name, the format of an unparsed entity (see section 4.7 of the XML 1.0 specification), or is used for formal declaration of Processing Instruction targets (see section 2.6 of the XML 1.0 specification). The nodeName attribute inherited from TdomCMNode is set to the declared name of the notation.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier for the notation. If the 
      public identifier was not specified, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly
    <literallayout>)
      The system identifier for the notation. If the 
      system identifier was not specified, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ParentDocumentType: TdomDocumentType (readonly)
    <literallayout>
      The parent TdomDocumentType of the given 
      TdomCMNotationDeclaration instance.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  
  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; const Name, PublicId,
    SystemId: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMNotationDeclaration 
      object.  Applications should not call 'create' 
      directly.  Instead they should use the appropriate 
      method of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMNotationDeclaration.
      - name
         The name of the notation.
      - publicId 
         The public identifier for the notation. If the 
         public identifier was not specified, this is nil. 
      - systemId 
         The system identifier for the notation. If the 
         system identifier was not specified, this is nil.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMParameterEntity = class (TdomCMNode)</title>

  <para>This interface represents a parameter entity, either parsed or unparsed, in an XML document. Note that this models the parameter entity itself not the entity declaration.</para>

  <para>The nodeName property that is inherited from TdomCMNode contains the name of the parameter entity. The nodeValue property that is inherited from TdomCMNode contains the analyzed value of the paramter entity, which means that all character and parameter entity references are being recursively resolved.</para>
  
  <para>TdomCMParameterEntity nodes are readonly.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property encoding: wideString
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the encoding of this parameter 
      entity, when it is an external parsed entity. 
      This is an empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isInternalEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity is an internal entity; 
      otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: WideString (readonly)
    <literallayout>
      The public identifier for the parameter entity. 
      If the public identifier was not specified, this 
      is an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: WideString  (readonly)
    <literallayout>
      The system identifier for the parameter entity. 
      If the system identifier was not specified, this 
      is an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property version: wideString (readonly)
    <literallayout>
      An attribute specifying, as part of the text
      declaration, the version number of this parameter 
      entity, when it is an external parsed entity. This 
      is an empty wideString otherwise.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
                       const Name,
                             EntityValue,
                             PubId,
                             SysId,
                             VersionNumber: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMParameterEntity 
      object. Applications should not call 'create' 
      directly.  A TdomCMParameterEntity is normally 
      created by the protected 'createCMParameterEntity' 
      method of a content model and added to its 
      'parameterEntities' list.  Applications which 
      implement their own parsers should use this method.
      
      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMParameterEntity.
      - name
         The name of the TdomCMParameterEntity.
      - entityValue
         The analyzed value of the paramter entity, which 
         means that all character and parameter entity 
         references have to be recursively resolved.
      - PubId 
         The public identifier for the parameter entity. If 
         the public identifier was not specified, this is an 
         empty wideString. 
      - SysId 
         The system identifier for the parameter entity. If 
         the system identifier was not specified, this is an 
         empty wideString. 
      - VersionNumber   
         An attribute specifying, as part of the text
         declaration, the version number of this parameter 
         entity, when it is an external parsed entity. This 
         is an empty wideString otherwise.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId, SysId, or 
         VersionNumber is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMParameterEntityReference = class (TdomCMNode)</title>

  <para>This interface represents a parameter entity reference in the DTD.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
(+) constructor Create(const AOwner: TdomCustomCMObject;
                       const Name); override;
    <literallayout>
      Creates a new instance of a 
      TdomCMParameterEntityReference object. Applications 
      should not call 'create' directly. Instead they should 
      use the appropriate method of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMParameterEntityReference.
      - name
         The name of the TdomCMParameterEntityReference.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMProcessingInstruction = class (TdomCMNode)</title>

  <para>The TdomCMProcessingInstruction interface represents a <quote>processing instruction</quote>, used in a DTD as a way to keep processor-specific information in the text of the document.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property target: WideString (readonly);
    <literallayout>
      The target of the processing instruction. XML 
      defines this as being the first token following 
      the markup that begins the processing instruction.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property data: WideString
    <literallayout>
      The content of the processing instruction. This 
      is from from the first non white space character 
      after the target to the character immediately
      preceding the ?&gt;.

      Exceptions on setting:
      - ENo_Modification_Allowed_Err 
         Raised if this node is readonly.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
                       const Targ: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMProcessingInstruction 
      object. Applications should not call 'create' 
      directly. Instead they should use the appropriate 
      method of a content model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMProcessingInstruction.
      - Targ
         The target of the processing instruction. XML 
         defines this as being the first token following 
         the markup that begins the processing instruction.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>

  </sect1>
  

  <sect1>
  <title>Nodes Directly Derived from TdomCustomCMEntDecl</title>

  <sect2>
  <title>TdomCMEntityDeclaration = class (TdomCustomCMEntDecl)</title>

  <para>This interface represents an entity declaration in the DTD. The nodeName attribute that is inherited from TdomCMNode contains the name of the entity. If its an internal entity, the nodeValue attribute that is inherited from TdomCMNode contains the entity value.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property IsInternalEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity declared is an internal 
      entity; otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property isParsedEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity declared is a parsed 
      entity; otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property NotationName: WideString  (readonly)
    <literallayout>
      For unparsed entities, the name of the notation for the 
      entity. For parsed entities, this is an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier for the entity. If the public 
      identifier was not specified, this is an empty wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: wideString  (readonly)
    <literallayout>
      The system identifier for the entity. If the system 
      identifier was not specified, this is an empty wideString.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
                       const Name,
                             EntityValue,
                             PubId,
                             SysId,
                             NotaName: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMEntityDeclaration 
      object.  Applications should not call 'create' 
      directly. Instead they should use the appropriate 
      method of a content model object.
      
      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCmEntityDeclaration.
      - name
         The name of the TdomCMEntityDeclaration.
      - entityValue
         The literal entity value if the entity is internal, 
         or an empty string if the entity is external.
      - PubId 
         The public identifier for the 
         TdomCMEntityDeclaration.  If the public 
         identifier was not specified, this is 
         an empty wideString. 
      - SysId 
         The system identifier for the 
         TdomCMEntityDeclaration.  If the system 
         identifier was not specified, this is 
         an empty wideString. 
      - NotaName 
         The name of the notation of the 
         TdomCMEntityDeclaration.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId 
         is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMParameterEntityDeclaration = class (TdomCustomCMEntDecl)</title>

  <para>This interface represents an entity declaration in the DTD. The nodeName attribute that is inherited from TdomCMNode contains the name of the entity. If its an internal entity, the nodeValue attribute that is inherited from TdomCMNode contains the entity value.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property IsInternalEntity: boolean (readonly)
    <literallayout>
      Returns 'true' if the entity is an internal entity; 
      otherwise 'false' is returned.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier for the entity. If the public 
      identifier was not specified, this is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString  (readonly)
    <literallayout>
      The system identifier for the entity. If the system 
      identifier was not specified, this is nil.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject;
                       const Name,
                             PubId,
                             SysId: WideString); virtual;
    <literallayout>
      Creates a new instance of a 
      TdomCMParameterEntityDeclaration object. Applications 
      should not call 'create' directly.  Instead they 
      should use the appropriate method of a content model 
      object.
      
      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMParameterEntityDeclaration.
      - name
         The name of the TdomCMParameterEntityDeclaration.
      - PubId 
         The public identifier for the 
         TdomCMParameterEntityDeclaration. If the public 
         identifier was not specified, this is an empty 
         string. 
      - SysId 
         The system identifier for the 
         TdomCMParameterEntityDeclaration.  If the system 
         identifier was not specified, this is an empty 
         string. 

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is 
         specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  </sect1>


  <sect1>
  <title>Particle Nodes</title>


  <sect2>
  <title>TdomCMParticle = class (TdomCMNode)</title>

  <para>TdomCMParticle is the common parent class of TdomCMSequenceParticle, TdomCMChoiceParticle, TdomCMPcdataChoiceParticle, and TdomCMElementParticle. Do not use this node type in your Delphi projects directly.</para>
  </sect2>


  <sect2>
  <title>TdomCMChoiceParticle = class (TdomCMParticle)</title>
  <para>This object represents a choice list of content particles which is part of an element type declaration in the DTD (see section 3.2.1 of the XML 1.0 specification).</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Frequency: WideString
    <literallayout>
      The optional character following a choice list which 
      governs whether the element or the content particles 
      in the list may occur one or more ('+'), zero or more 
      ('*'), or zero or one times ('?'). The absence of such 
      an operator means that the element or content particle 
      must appear exactly once.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', 
         nor '*', nor '?', nor an empty string.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; 
                       const Freq: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMChoiceParticle object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a content 
      model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMChoiceParticle.
      - Freq
         The frequency of the choice list.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid frequency is specified.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMElementParticle = class (TdomCMParticle)</title>

  <para>This object represents a single content particle which is part of an element type declaration in the DTD (see section 3.2.1 of the XML 1.0 specification).</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property Frequency: WideString
    <literallayout>
      The optional character following a single particle 
      which governs whether the element or the content 
      particles in the list may occur one or more ('+'), 
      zero or more ('*'), or zero or one times ('?'). The 
      absence of such an operator means that the element 
      or content particle must appear exactly once.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', 
         nor '*', nor '?', nor an empty string.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; 
                       const Name,
                             Freq: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMElementParticle object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a content
      model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMElementParticle.
      - Name
         The name of the single particle.
      - Freq
         The frequency of the single particle.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name or frequency is specified.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMPcdataChoiceParticle = class (TdomCMParticle)</title>

  <para>This object represents a list of mixed content which is part of an element type declaration in the DTD (see section 3.2.2 of the XML 1.0 specification).  The Frequency of the new TdomDataChoiceParticle must always be '*', since mixed content always may appear zero or more times. In that case it does not matter that XML allows the notation (#PCDATA), because it is aequivalent to (#PCDATA)*.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property Frequency: WideString
    <literallayout>
      This must always remain '*'.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is not '*'.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; 
                       const Freq: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMChoiceParticle object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a content
      model object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMChoiceParticle.
      - Freq
         The frequency of the choice list.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified frequency is not '*'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function elementDefined(const elementName: wideString): boolean;
    <literallayout>
      Determines whether an element type with the specified
      name is defined by a TdomElementParticle in one of 
      this TdomCMPcdataChoiceParticle's child nodes.

      Parameters:
      - elementName
         The name of the element type to be tested.

      Return Value:
         'True' if the specified element type is defined
         by a TdomElementParticle child node of this
         TdomCMPcdataChoiceParticle, 'false' otherwise.

      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid element name is specified.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>


  <sect2>
  <title>TdomCMSequenceParticle = class (TdomCMParticle)</title>

  <para>This object represents a sequence list of content particles which is part of an element type declaration in the DTD (see section 3.2.1 of the XML 1.0 specification).</para>

  <para><emphasis>Properties</emphasis></para>

  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Frequency: WideString
    <literallayout>
      The optional character following a sequence list which 
      governs whether the element or the content particles 
      in the list may occur one or more ('+'), zero or more 
      ('*'), or zero or one times ('?'). The absence of such 
      an operator means that the element or content particle 
      must appear exactly once.

      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', 
         nor '*', nor '?', nor an empty string.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    constructor Create(const AOwner: TdomCustomCMObject; 
                       const Freq: WideString); virtual;
    <literallayout>
      Creates a new instance of a TdomCMSequenceParticle object. 
      Applications should not call 'create' directly. Instead 
      they should use the appropriate method of a content model
      object.

      Parameters:
      - AOwner
         The TdomCustomCMObject that creates the 
         TdomCMSequenceParticle.
      - Freq
         The frequency of the sequence list.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid frequency is specified.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect2>

  </sect1>

</chapter>

<chapter>
<title>Document Object Model Views</title>

<para>A document may have one or more "views" associated with it, e.g., a computed view on a document after applying a CSS stylesheet, or multiple presentations (e.g., HTML Frame) of the same document in a client. That is, a view is some alternate representation of, or a presentation of, and associated with, a source document. A view may be static, reflecting the state of the document when the view was created, or dynamic, reflecting changes in the target document as they occur, subsequent to the view being created.</para>

<para>The XDOM defines a TdomAbstractView class which provides a base class from which all such views shall derive. It defines an attribute which references the target document of the TdomAbstractView. The only semantics of the TdomAbstractView defined here create an association between a view and its target document.</para>

<para>Future versions of XDOM will use TdomAbstractView to derive special view classes</para>

  <sect1>
  <title>TdomAbstractView = class</title>

  <para>A base class that all views shall derive from.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property document: TdomDocument (readonly)
    <literallayout>
      The source TdomDocument of which this is an 
      AbstractView.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>
</chapter>
   

<chapter>
<title>The Implementation of the XML Parser (+)</title>

<para>Note, that specifications for an XML parser are not part of DOM Level 2. So all classes presented here are additional to the DOM and may change when DOM Level 3 is released.</para>

<para>Acknowledgment: The design of the parser is largely based on David Megginson's SAX2 driver for Java, see: "http://www.megginson.com/SAX/". This manual, which you are reading now, also uses extensively formulations from his documentation.</para>

  <sect1>
  <title>Exceptions</title>
  <para>
  <itemizedlist>

    <listitem>
    <para><synopsis>
    <errorname>EParserException</errorname> = class(<errorname>Exception</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EInternalParserException</errorname> = class(<errorname>EParserException</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserFatalError</errorname> = class(<errorname>EParserException</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserError</errorname> = class(<errorname>EParserException</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserWarning</errorname> = class(<errorname>EParserException</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissingWhiteSpace_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissingQuotationMark_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissingEqualitySign_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDoubleEqualitySign_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidElementName_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidAttributeName_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidAttributeValue_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDoubleAttributeName_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidEntityName_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidProcessingInstruction_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidXmlDeclaration_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidCharRef_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissingStartTag_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissingEndTag_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidEndTag_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidCharacter_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserNotInRoot_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDoubleRootElement_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserRootNotFound_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserWrongOrder_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidDoctype_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidTextDeclaration_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissing_Parameter_Entity_Decl_Err</errorname> = class(<errorname>EParserFatalError</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDoubleDoctype_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserUnknownDeclarationType_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidEntityDeclaration_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidElementDeclaration_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidAttributeDeclaration_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidNotationDeclaration_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserInvalidConditionalSection_Err</errorname> = class(<errorname>EParserInvalidDoctype_Err</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDouble_AttDef_Warning</errorname> = class(<errorname>EParserWarning</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDouble_Entity_Decl_Warning</errorname> = class(<errorname>EParserWarning</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDouble_Parameter_Entity_Decl_Warning</errorname> = class(<errorname>EParserWarning</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserDouble_Notation_Decl_Warning</errorname> = class(<errorname>EParserWarning</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserUnusable_Entity_Decl_Warning</errorname> = class(<errorname>EParserWarning</errorname>);
    </synopsis></para>
    </listitem>

    <listitem>
    <para><synopsis>
    <errorname>EParserMissing_Entity_Declaration_Err</errorname> = class(<errorname>EParserError</errorname>);
    </synopsis></para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>General Functions</title>

  <para>
  <itemizedlist>

    <listitem>
    <para> 
procedure xmlAnalyseElement(const source: wideString;
                              var tagName: wideString;
                                  attributes: TdomNameValueList);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlAnalyseEntityDef(    Source: WideString;
                              var EntityValue,
                                  SystemLiteral,
                                  PubidLiteral,
                                  NDataName: WideString;
                              var Error: boolean);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlAnalyseNotationDecl(const Decl: WideString;
                                   var SystemLiteral,
                                       PubidLiteral: WideString;
                                   var Error: boolean);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlAnalysePCDATA(Source: WideString;
                           var Lines: TStringList);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlAnalyseTag(const Source: WideString;
                        var TagName,
                            AttribSequence: WideString);
    </para>
    </listitem>

    <listitem>
    <para> 
function  xmlAnalysePubSysId(const PublicId,
                                   SystemId,
                                   NotaName: WideString): WideString;
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlIsolateQuote(    Source: WideString;
                          var content,
                              rest: WideString;
                          var QuoteType: WideChar;
                          var Error: boolean);
    </para>
    </listitem>

    <listitem>
    <para> 
function xmlNormalizeLineBreaks(const source :WideString): WideString;
    </para>
    </listitem>

    <listitem>
    <para> 
function xmlReplaceQuotes(const source: wideString): wideString;
    </para>
    </listitem>

    <listitem>
    <para> 
function  xmlTrunc(const Source: WideString): WideString;
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlTruncAngularBrackets(const Source: WideString;
                                    var content: WideString;
                                    var Error: boolean);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure xmlTruncRoundBrackets(const Source: WideString;
                                  var content: WideString;
                                  var Error: boolean);
    </para>
    </listitem>

    <listitem>
    <para> 
function  xmlTruncSpace(const Source: WideString): WideString;
    </para>
    </listitem>

    <listitem>
    <para> 
procedure writeWideString(Stream: TStream; const XMLStrg: wideString);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure writeWideStrings(Stream: TStream; const XMLStrgs: array of wideString);
    </para>
    </listitem>

    <listitem>
    <para> 
procedure writeWideChars(Stream: TStream; const XMLChar: array of wideChar);
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title> General Classes</title>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    TXmlParserLanguage = (iso639_de,
                          iso639_en,
                          iso639_es,
                          iso639_fr,
                          iso639_it,
                          iso639_pl);
    </para>
    </listitem>

    <listitem>
    <para>TXmlParserAction = (paFail,paRetry,paOK);</para>
    </listitem>

    <listitem>
    <para> 
TdomPieceType = (xmlProcessingInstruction,xmlXmlDeclaration,
                 xmlTextDeclaration,xmlComment,xmlCDATA,xmlPCDATA,
                 xmlDoctype,xmlStartTag,xmlEndTag,xmlEmptyElementTag,
                 xmlCharRef,xmlEntityRef,xmlParameterEntityRef,
                 xmlEntityDecl,xmlElementDecl,xmlAttributeDecl,
                 xmlNotationDecl,xmlCondSection,xmlUnknown);
    </para>
    </listitem>

    <listitem>
    <para> 
TdomEncodingType = (etUTF8,etUTF16BE,etUTF16LE,etLatin1,etLatin2,
                    etLatin3,etLatin4,etCyrillic,etArabic,etGreek,
                    etHebrew,etLatin5,etLatin6,etLatin7,etLatin8,
                    etLatin9,etKOI8R,etcp10000_MacRoman,etcp1251);
    </para>
    </listitem>

    <listitem>
    <para> 
TXmlErrorType = (xetFatalError,xetError,xetWarning);
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TXmlMemoryStream = class(TMemoryStream)</title>

  <para>This class defines a stream that is used in the TXmlToDomParser interface. It is identical with the Delphi class TMemoryStream apart from that it makes the procedure 'SetPointer(Ptr: Pointer; Size: Longint)' public which is functionally identical with the SetPointer procedure of the Delphi class TCustomMemoryStream. See the Delphi Online Help for details.</para>

  </sect1>


  <sect1>
  <title>TXmlInputSource</title>

  <para>This class encapsulates information about a parser's input source in a single object.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property Encoding: TdomEncodingType (readonly)
    <literallayout>
      The encoding type of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property PublicId: WideString (readonly)
    <literallayout>
      The public identifier of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property RootName: WideString (readonly)
    <literallayout>
      The name of the root element, if the TXmlInputSource 
      contains a whole XML document, or an empty string, 
      if the TXmlInputSource does not contain a whole XML 
      document or the rootName is not available.  This 
      function might perform no (complete) well-formedness 
      test, so it might return a root name even if there 
      is a well-formedness error before or in the root 
      element, or before or in a document type declaration.  
      RootName is being initialized only once when creating 
      the TXmlInputSource. So later modifications of the 
      input source will have no effect on RootName.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Stream: TStream (readonly)
    <literallayout>
      A stream that contains the text of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property SystemId: WideString (readonly)
    <literallayout>
      The system identifier of the input source.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const Stream: TStream;
                       const PublicId,
                             SystemId: wideString); virtual;
    <literallayout>
      Creates a new TXmlInputSource object.  The position 
      of the Stream is set to its first character, i.e. 
      the first byte if the encoding type is UTF-8 or the 
      third/fourth byte if the encoding type is UTF-16.

      Parameters:
      - Stream
          A stream that contains the text of the input 
          source.
      - PublicId
         The public identifier of the input source. 
      - SystemId
         The system identifier of the input source.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function getNextWideChar(var dest: wideChar): boolean; virtual;
    <literallayout>
      Retrieves the next UTF-16 value from the Stream, 
      no matter what the original encoding of the Stream 
      is.  If the next UTF-16 value is a surrogate pair, 
      calling this function first returns the high 
      surrogate and calling it again then returns the low 
      surrogate.

      Parameters:
      - dest
         Used to store the returned UTF-16 value as a 
         wideChar.
      - Return Value:
         'True' if a new UTF-16 value is being returned 
         in 'dest'. 'False' if no next UTF-16 value is 
         available.

      Exceptions:		 
      - EConvertError
         This Delphi exception is raised if the input 
         source is encoded in UTF-8 but an invalid UTF-8 
         sequence is being detected.
      - EReadError
         This Delphi exception is raised if the input 
         source is encoded in UTF-16 but a single byte 
         at the end of the stream is being detected.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure reset; virtual;
    <literallayout>
      Sets the position of the Stream to its first 
      character, i.e. the first byte if the encoding 
      type is UTF-8 or the third/fourth byte if the 
      encoding type is UTF-16.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>
	  
	  
  <sect1>
  <title>TXmlParserError</title>
  <para>This class is used in the TXmlToDomParser interface for recording errors, fatal errors, or warnings in the parsed document. A TXmlParserError object represents exactly one parsing error.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property code: wideString (readonly)
    <literallayout>
      The code that caused the parsing error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property endColumn: integer (readonly)
    <literallayout>
      The position of the last character (in the last 
      line of the code) that caused the parsing error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property endLine: integer (readonly)
    <literallayout>
      The number of the last line of the code that 
      caused the parsing error (this might be 
      identical with startLine).
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property errorClass: string (readonly)
    <literallayout>
      A string that contains the name of the 
      parsing error according to the list above.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property errorType: TXmlErrorType (readonly)
    <literallayout>
      This is 'xetFatalError', if the error is a 
      fatal error; 'xetError', if it is an error; 
      or 'xetWarning', if it is a warning.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: wideString (readonly)
    <literallayout>
      The public identifier of the document that 
      caused the parsing error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property startColumn: integer (readonly)
    <literallayout>
      The position of the first character (in the 
      first line of the code) that caused the parsing 
      error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property startLine: integer (readonly)
    <literallayout>
      The number of the first line of the code 
      that caused the parsing error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: wideString (readonly)
    <literallayout>
      The system identifier of the document that 
      caused the parsing error.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(const e: EParserException;
                       const startLine,
                             startColumn,
                             endLine,
                             endColumn: integer;
                       const pubId,
                             sysId,
                             code: wideString); virtual;
    <literallayout>
      Creates a new TXmlParserError object.
      Parameters:
      - e
         An exception of type EParserException or derived 
         from it, whoes type reflects the cause of the 
         error, fatal error or warning.
      - startLine
         The number of the first line of the code that 
         caused the parsing error. 
      - startColumn
         The position of the first character (in the first 
         line of the code) that caused the parsing error. 
      - endLine
         The number of the last line of the code that caused 
         the parsing error (this might be identical with 
         startLine). 
      - endColumn
         The position of the last character (in the last 
         line of the code) that caused the parsing error. 
      - pubId
         The public identifier of the document that caused 
         the parsing error.
      - sysId
         The system identifier of the document that caused 
         the parsing errorr.
      - code
         The code that caused the parsing error.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetErrorStr(const lang: TXmlParserLanguage): wideString; virtual;
    <literallayout>
      Returns a wideString encoded in UTF-16 that contains 
      a detailed error message.

      Hint: To use this UTF-16 wideString in Delphi's 
      native VCL components, you must convert it from 
      UTF-16 to the code page used on your system; this 
      usually is Windows-cp1250 for Polish resp. Latin-1 
      for the other supported languages.

      Parameters:
      - lang
         The language for the detailed error message. 
         Valid values are 'iso639_de' for German, 
         'iso639_en' for English, 'iso639_es' for Spanish, 
         'iso639_fr' for French, 'iso639_it' for Italian,
         and 'iso639_pl' for Polish.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>

  </para>
  </sect1>


  <sect1>
  <title>TdomStandardLocator</title>
		 
  <para>If a Reader provides location information, it does so by passing an instance of TdomStandardLocator to a Content Handler when calling its methods. Note, that the results returned by the object will be valid only during the scope of each Content Handler method: the application will receive unpredictable results if it attempts to use the locator at any other time.</para>
		 
  <para>Readers are not required to supply a locator, but they are very strongly encouraged to do so.</para>
		 
  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property columnNumber: integer (readonly)
    <literallayout>
      The column number where the current document event 
      ends (this might be identical with startLineNumber), 
      or 0 if none is available.

      Warning: This property is intended only as an 
      approximation for the sake of error reporting; it is 
      not intended to provide sufficient information to 
      edit the character content of the original XML 
      document.

      The value is an approximation of the column number 
      in the document entity or external parsed entity 
      where the markup triggering the event appears.

      If possible, the Reader should provide the column 
      position of the last character of the text 
      associated with the document event. The first 
      column in each line is column 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property lineNumber: integer (readonly)
    <literallayout>
      The line number where the current document event 
      ends (this might be identical with startLineNumber), 
      or 0 if none is available.

      Warning: This property is intended only as an 
      approximation for the sake of error reporting; it is 
      not intended to provide sufficient information to 
      edit the character content of the original XML 
      document.

      The value is an approximation of the line number in 
      the document entity or external parsed entity where 
      the markup triggering the event appears.

      If possible, the Reader should provide the line 
      position of the last character of the text 
      associated with the document event. The first line 
      in the document is line 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property publicId: wideString (readonly)
    <literallayout>
      The public identifier of the document entity 
      or of the external parsed entity in which the 
      markup triggering the event appears, or an 
      empty string if none is available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property startColumnNumber: integer (readonly)
    <literallayout>
      The column number where the current document 
      event starts (this might be identical with 
      startLineNumber), or 0 if none is available.

      Warning: This property is intended only as an 
      approximation for the sake of error reporting; 
      it is not intended to provide sufficient 
      information to edit the character content of 
      the original XML document.

      The value is an approximation of the column 
      number in the document entity or external parsed 
      entity where the markup triggering the event 
      appears.

      If possible, the Reader should provide the column 
      position of the first character of the text 
      associated with the document event. The first 
      column in each line is column 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property startLineNumber: integer (readonly)
    <literallayout>
      The line number where the current document event 
      starts (this might be identical with LineNumber), 
      or 0 if none is available.

      Warning: This property is intended only as an 
      approximation for the sake of error reporting; 
      it is not intended to provide sufficient 
      information to edit the character content of 
      the original XML document.

      The value is an approximation of the line number 
      in the document entity or external parsed entity 
      where the markup triggering the event appears.

      If possible, the Reader should provide the line 
      position of the first character of the text 
      associated with the document event. The first 
      line in the document is line 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property systemId: wideString (readonly)
    <literallayout>
      The system identifier of the document entity 
      or of the external parsed entity in which the 
      markup triggering the event appears, or an 
      empty string if none is available.

      If the system identifier is a URL, the Reader 
      must resolve it completely before passing it 
      to the application.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor create(const inputSource: TXmlInputSource); virtual;
    <literallayout>
      Creates a new TdomStandardLocator object.  
      Normally this is automatically done by the 
      Parser. 

      Parameters:
      - inputSource
         The TXmlInputSource object containing the 
         document entity or the external parsed 
         entity related to the location information.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure evaluate(const s: WideChar); virtual;
    <literallayout>
      This procedure is called by the Content Handler 
      to calculate the new location information. 

      Parameters:
      - s
         A wideChar containing the next character to 
         be parsed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure pieceEnd; virtual;
    <literallayout>
      This procedure is called by the Content Handler 
      to indicate, that the properties startLineNumber 
      and startColumnNumber shall be set to the line 
      and column number of the next character passed 
      by the evaluate method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure pieceStart; virtual;
    <literallayout>
      This procedure is called by the Content Handler 
      to indicate, that the properties startLineNumber 
      and startColumnNumber shall be set to the current 
      lineNumber and columnNumber.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure reset; virtual;
    <literallayout>
      Initializes the Locator.  A Content Handler shall 
      call this method before starting to parse an XML 
      document or external parsed entity.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomCustomContentHandler = class</title>
		 
  <para>This is the main object that most Parsers implement: if the Parser needs to be informed of basic parsing events while parsing an XML document, it implements a Content Handler and reports to it basic document-related events like the start and end of elements and character data.</para>

  <para>The order of events is very important, and mirrors the order of information in the document itself. For example, all of an element's content (character data, processing instructions, and/or subelements) will appear, in order, between the startElement event and the corresponding endElement event.</para>
		 
  <para>Note, that TdomCustomContentHandler is just a default interface that developers can override to provide their own Content Handlers. It should not be used directly in an application.</para>
		 
  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure comment(const sender: TdomCustomParser;
                      const locator: TdomStandardLocator;
                      const data: WideString); virtual;
    <literallayout>
      Receive notification of a comment. 

      The Parser will invoke this method once for 
      each comment found.  Note, that comments may 
      occur before or after the main document element.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes 
         this method, or nil if it is not invoked 
         by a TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data 
         in the input source, or nil if no Locator 
         is specified.
      - data
         The text of the comment, i.e. the characters 
         between the delimiters '&lt;!--' and '--&gt;', but 
         not the delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure CDATA(const sender: TdomCustomParser;
                    const locator: TdomStandardLocator;
                    const data: WideString); virtual;
    <literallayout>
      Receive notification of a CDATA section. 

      The Parser will invoke this method once for 
      each CDATA section found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes 
         this method, or nil if it is not invoked 
         by a TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data 
         in the input source, or nil if no Locator 
         is specified.
      - data
         The text of the CDATA section, i.e. the 
         characters between the delimiters '&lt;![CDATA[' 
         and ']]&gt;', but not the delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure charRef(const sender: TdomCustomParser;
                      const locator: TdomStandardLocator;
                      const data: WideString); virtual;
    <literallayout>
      Receive notification of a character reference. 

      The Parser will invoke this method once for 
      each character reference found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - data
         The full text of the character reference 
         including '&amp;' and ';'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure doctype(const sender: TdomCustomParser;
                      const locator: TdomStandardLocator;
                      const name,
                            pubId,
                            sysId,
                            data: WideString); virtual;
    <literallayout>
      Receive notification of a document type declaration.

      The Parser will invoke this method once for each 
      document type declaration found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - name
         The name of the document type declaration, 
         which must be identical with the name of the 
         document's root element.
      - pubId
         The public identifier of the document type 
         declaration's external subset.
      - sysId
         The system identifier of the document type 
         declaration's external subset.
      - data
         The text of the document type declaration's 
         internal subset, i.e. the characters between 
         the delimiters '[' and ']', but not the 
         delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure endDocument(const sender: TdomCustomParser); virtual;
    <literallayout>
      Receive notification of the end of a document. 

      The Parser will invoke this method only once, 
      and it will be the last method invoked during 
      the parse.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure endElement(const sender: TdomCustomParser;
                         const locator: TdomStandardLocator;
                         const namespaceURI,
                               localName,
                               tagName: WideString); virtual;
    <literallayout>
      Receive notification of the end of an element. 

      The Parser will invoke this method  at the end 
      of every element in the XML document; there will 
      be a corresponding startElement event for every 
      endElement event (even when the element is empty).
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - namespaceURI
         The Namespace URI, or the empty string if the 
         element has no Namespace URI or if Namespace 
         processing is not being performed.
      - localName
         The local name (without prefix), or the empty 
         string if Namespace processing is not being 
         performed.
      - tagName
         The XML 1.0 tag name (with prefix), or the 
         empty string if qualified names are not 
         available.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure endPrefixMapping(const sender: TdomCustomParser;
                               const locator: TdomStandardLocator;
                               const prefix: WideString); virtual;
    <literallayout>
      End the scope of a prefix-URI mapping. 

      See startPrefixMapping for details. This event 
      will always occur after the corresponding 
      endElement event, but the order of 
      endPrefixMapping events is not otherwise 
      guaranteed.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - prefix
         The prefix that was being mapping.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure entityRef(const sender: TdomCustomParser;
                        const locator: TdomStandardLocator;
                        const name: WideString); virtual;
    <literallayout>
      Receive notification of an entity reference. 

      The Parser will invoke this method once for 
      each entity reference found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - name
         The name of the entity reference, i.e. the 
         characters between the delimiters '&amp;' and ';', 
         but not the delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure PCDATA(const sender: TdomCustomParser;
                     const locator: TdomStandardLocator;
                     const data: WideString); virtual;
    <literallayout>
      Receive notification of parsed character data. 

      Parsers may return all contiguous character data 
      in a single chunk, or they may split it into 
      several chunks; however, all of the characters in 
      any single event must come from the same external 
      entity so that the Locator provides useful 
      information.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - data
         A wideString containing the characters from the 
         XML document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure processingInstruction(const sender: TdomCustomParser;
                                    const locator: TdomStandardLocator;
                                    const targ,
                                          data : WideString); virtual;
    <literallayout>
      Receive notification of processing instruction. 

      The Parser will invoke this method once for each 
      processing instruction found: note that processing 
      instructions may occur before or after the main 
      document element.
	  
      A Parser must never report an XML declaration 
      (XML 1.0 spec., § 2.8) or a text declaration 
      (XML 1.0 spec., § 4.3.1) using this method.

      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - targ
         A wideString specifying the processing 
         instruction target.
      - data
         The processing instruction data, or an empty 
         wideString if none was supplied. The data does 
         not include any whitespace separating it from 
         the target.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure skippedEntity(const sender: TdomCustomParser;
                            const locator: TdomStandardLocator;
                            const name: WideString); virtual;
    <literallayout>
      Receive notification of a skipped entity. 

      The Parser will invoke this method once for each 
      entity skipped. Non-validating processors may skip 
      entities if they have not seen the declarations 
      (because, for example, the entity was declared
      in an external DTD subset).

      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - name
         The name of the skipped entity. If it is a 
         parameter entity, the name will begin with '%', 
         and if it is the external DTD subset, it will be 
         the string "[dtd]".
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure startDocument(const sender: TdomCustomParser
                            const locator: TdomStandardLocator;
                                  defaultRoot: wideString); virtual;
    <literallayout>
      Receive notification of the beginning of a 
      document.

      The Parser will invoke this method only once, 
      before any other methods in this interface or 
      in TdomCustomDTDHandler.

      Parameters:
      - sender
         The TdomCustomParser object that invokes 
         this method, or nil if it is not invoked 
         by a TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - defaultRoot
         Specifies the default root name.  This is 
         only of importance for parsers which require 
         and/or expect a certain root name for 
         creating a registered document class.  For 
         more information about registering document 
         classes see the description of 
         TdomImplementation.RegisterDocumentClass.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure startElement(const sender: TdomCustomParser;
                           const locator: TdomStandardLocator;
                           const namespaceURI,
                                 localName,
                                 tagName: wideString;
                                 attributes: TdomNameValueList); virtual;
    <literallayout>
      Receive notification of the beginning of an element. 

      The Parser will invoke this method at the beginning 
      of every element in the XML document; there will be 
      a corresponding endElement event for every 
      startElement event (even when the element is 
      empty). All of the element's content will be 
      reported, in order, before the corresponding 
      endElement event.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - namespaceURI
         The Namespace URI, or the empty string if the 
         element has no Namespace URI or if Namespace 
         processing is not being performed.
      - localName
         The local name (without prefix), or the empty 
         string if Namespace processing is not being 
         performed.
      - tagName
         The XML 1.0 tag name (with prefix), or the 
         empty string if qualified names  are not 
         available.
      - attributes
         The attributes attached to the element in a
         TdomNameValueList object. If there are no 
         attributes, it shall be a list with no items. 
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure startPrefixMapping(const sender: TdomCustomParser;
                                 const locator: TdomStandardLocator;
                                 const prefix,
                                       uri: WideString); virtual;
    <literallayout>
      Begin the scope of a prefix-URI Namespace mapping. 

      Note that start/endPrefixMapping events are not 
      guaranteed to be properly nested relative to 
      each-other: all startPrefixMapping events will 
      occur before the corresponding startElement event,
      and all endPrefixMapping events will occur after 
      the corresponding endElement event, but their 
      order is not otherwise guaranteed.
	  
      There should never be start/endPrefixMapping 
      events for the "xml" prefix, since it is 
      predeclared and immutable.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - prefix
         The Namespace prefix being declared.
      - prefix
         The Namespace URI the prefix is mapped to.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure xmlDeclaration(const sender: TdomCustomParser;
                             const locator: TdomStandardLocator;
                             const version,
                                   encDl,
                                   sdDl: WideString); virtual;
    <literallayout>
      Receive notification of an XML declaration.

      The Parser will invoke this method once for 
      each XML declaration found: note that an XML 
      declaration may occur only once at the beginning 
      of an XML document.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - version
         The version number of the XML declaration.
      - encDl
         The encoding declaration of the XML declaration.
      - sdDl
         The standalone declaration of the XML 
         declaration. Valid values are 'yes', 'no', or 
         an empty wideString if no standalone 
         declaration is being provided.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomCustomDTDHandler = class</title>

  <para>If the Parser needs to be informed of basic parsing events while parsing a DTD, it implements a DTD Handler and reports to it basic DTD-related events like element type declarations or entity declarations.</para>

  <para>The order of events is very important, and mirrors the order of information in the DTD itself.</para>

  <para>Note, that TdomCustomDTDHandler is just a default interface that developers can override to provide their own DTD Handlers. It should not be used directly in an application.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure attributeDefinition(const sender: TdomCustomParser;
                                  const locator: TdomStandardLocator;
                                  const name,
                                        attType,
                                        bracket,
                                        defaultDecl,
                                        attValue: WideString); virtual;
    <literallayout>
      Receive notification of an attribute definition. 
      The Parser will invoke this method once for each 
      attribute definition found. 
	  
      Note that an attribute definition is not an 
      attribute-list declaration, but is part of it. 
      In the following attribute-list declaration:
            &lt;!ATTLIST termdef
                      id       ID      #REQUIRED
                      name     CDATA   #IMPLIED&gt;
      there are two attribute definitions: 
      'id ID #REQUIRED' and 'name CDATA #IMPLIED'.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes 
         this method, or nil if it is not invoked 
         by a TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data 
         in the input source, or nil if no Locator 
         is specified.
      - name
         The name of the attribute definition, i.e. 
         the name of the attribute whoes valid 
         values are being defined.
      - attType
         A wideString whoes value is either 
         'NOTATION', 'CDATA', 'ID', 'IDREF', 
         'IDREFS', 'ENTITY', 'ENTITIES', 'NMTOKEN', 
         'NMTOKENS', or which is an empty wideString.
      - bracket
         The text which enumarates the possible values 
         of an attribute resp. the text which specifies 
         the system and/or public identifier if the 
         definition is of type NOTATION, i.e. the 
         characters between the delimiters '(' and ')', 
         including the delimiters itself.
      - defaultDecl
         A wideString whoes value is either '#REQUIRED', 
         '#IMPLIED', '#FIXED', or which is an empty 
         wideString.
      - attValue
         The literal default attribute value, if the 
         parameter defaultDecl is neither '#REQUIRED' 
         nor '#IMPLIED'.  
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure comment(const sender: TdomCustomParser;
                      const locator: TdomStandardLocator;
                      const data: WideString); virtual;
                     <literallayout>
      Receive notification of a comment. 

      The Parser will invoke this method once for each 
      comment found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - data
         The text of the comment, i.e. the characters 
         between the delimiters '&lt;!--' and '--&gt;', 
         but not the delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure conditionalSection(const sender: TdomCustomParser;
                                 const locator: TdomStandardLocator;
                                 const includeStmt,
                                       data: WideString); virtual;
    <literallayout>
      Receive notification of a conditional section. 

      The Parser will invoke this method once for each 
      conditional section found, but not for other 
      conditional sections which are included in this 
      conditional section. If the conditional section 
      is of type 'INCLUDE' a DTD Handler might choose 
      to internally implement its own Parser to parse 
      the content of the included conditional section.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data 
         in the input source, or nil if no Locator is 
         specified.
      - includeStmt
         A wideString whoes value is either 'INCLUDE', 
         'IGNORE' or a parameter entity reference.
      - data
         The text of the conditional section, i.e. the 
         characters between the delimiters 
         '[' and ']]&gt;', but not the delimiters 
         itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure elementTypeDeclaration(const sender: TdomCustomParser;
                                     const locator: TdomStandardLocator;
                                     const name,
                                           data: WideString); virtual;
    <literallayout>
      Receive notification of an element type declaration. 

      The Parser will invoke this method once for each 
      element type declaration found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is specified.
      - name
         The name of the element to be declared.
      - data
         The content specification of the element to be 
         declared contained in a single wideString.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure endAttListDeclaration(const sender: TdomCustomParser;
                                    const locator: TdomStandardLocator); virtual;
                     <literallayout>
      Receive notification of the end of an attribute-list 
      declaration. 

      The Parser will invoke this method  at the end of 
      every attribute-list declaration in the DTD 
      document; there will be a corresponding 
      startAttListDeclaration event for every 
      endAttListDeclaration event.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure endDtd(const sender: TdomCustomParser); virtual;
    <literallayout>
      Receive notification of the end of an internal or 
      external subset of a DTD. 

      The Parser will invoke this method only once, and 
      it will be the last method invoked during the parse 
      of an internal or external subset.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure entityDeclaration(const sender: TdomCustomParser;
                                const locator: TdomStandardLocator;
                                const name,
                                      entityValue,
                                      pubId,
                                      sysId,
                                      notaName: WideString); virtual;
    <literallayout>
      Receive notification of an entity declaration. 

      The Parser will invoke this method once for each 
      entity declaration found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - name
         The name of the entity to be declared.
      - entityValue
         The literal entity value if the entity is internal, 
         or an empty string if the entity is external.
      - pubId
         Public Literal if the entity is external and of 
         type 'PUBLIC', otherwise an empty string.
      - sysId
         System Literal if the entity is external, or an 
         empty string if entity is internal.
      - notaName
         The name of a declared notation, if the entity is 
         a general unparsed entity, otherwise an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure parameterEntityDeclaration(const sender: TdomCustomParser;
                                         const locator: TdomStandardLocator;
                                         const name,
                                               entityValue,
                                               pubId,
                                               sysId: WideString); virtual;
    <literallayout>
      Receive notification of a parameter entity declaration. 

      The Parser will invoke this method once for each 
      parameter entity declaration found. 
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - name
         The name of the parameter entity to be declared.
      - entityValue
         The entity Value if the parameter entity is 
         internal, or an empty string if the entity is 
         external.
      - pubId
         Public Literal if the parameter entity is 
         external and of type 'PUBLIC', otherwise an 
         empty string.
      - sysId
         System Literal if the parameter entity is external 
         and of type 'PUBLIC', otherwise an empty string.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure parameterEntityRef(const sender: TdomCustomParser;
                                 const locator: TdomStandardLocator;
                                 const name: WideString); virtual;
    <literallayout>
      Receive notification of a parameter entity reference. 

      The Parser will invoke this method once for each 
      parameter entity reference found. 
	  
      Parameters:
	  - sender
         The TdomCustomParser object that invokes this method, 
         or nil if it is not invoked by a TdomCustomParser 
         object.
	  - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in the 
         input source, or nil if no Locator is specified.
	  - name
         The name of the parameter entity reference, i.e. the 
         characters between the delimiters '%' and ';', but 
         not the delimiters itself.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure processingInstruction(const sender: TdomCustomParser;
                                    const locator: TdomStandardLocator;
                                    const targ,
                                          data : WideString); virtual;
    <literallayout>
      Receive notification of processing instruction. 

      The Parser will invoke this method once for 
      each processing instruction found.
	  
      A Parser must never report an XML declaration 
      (XML 1.0 spec., § 2.8) or a text declaration 
      (XML 1.0 spec., § 4.3.1) using this method.

      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - targ
         A wideString specifying the processing 
         instruction target.
      - data
         The processing instruction data, or an empty 
         wideString if none was supplied. The data does 
         not include any whitespace separating it from 
         the target.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure startAttListDeclaration(const sender: TdomCustomParser;
                                      const locator: TdomStandardLocator;
                                      const name: wideString); virtual;
    <literallayout>
      Receive notification of the beginning of an 
      attribute-list declaration. 

      The Parser will invoke this method at the beginning 
      of every attribute-list declaration in the DTD; there 
      will be a corresponding endAttListDeclaration event 
      for every startAttListDeclaration event. All of the 
      attribute-list declaration's attribute definitions 
      will be reported, in order, before the corresponding 
      endAttListDeclaration event.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this method, 
         or nil if it is not invoked by a TdomCustomParser 
         object.
      - locator
         A TdomStandardLocator object that provides information 
         about the location of the data in the input source, or 
         nil if no Locator is specified.
      - name
         The element type for which the attributs are declared.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure startDtd(const sender: TdomCustomParser;
                       const pubId,
                             sysId: wideString); virtual;
    <literallayout>
      Receive notification of the beginning of an internal or 
      external subset of a DTD. 

      The Parser will invoke this method only once, before any
      other methods in this interface.

      Parameters:
      - sender
         The TdomCustomParser object that invokes this method, 
         or nil if it is not invoked by a TdomCustomParser 
         object.
      - pubId 
         The public identifier of the document that contains
         the internal or external subset, or nil if the
         public identifier is not provided.
      - sysId 
         The system identifier of the document that contains
         the internal or external subset, or nil if the
         system identifier is not provided.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure textDeclaration(const sender: TdomCustomParser;
                              const locator: TdomStandardLocator;
                              const version,
                                    encDl: WideString); virtual;
    <literallayout>
      Receive notification of a text declaration.

      The Parser will invoke this method once for each 
      text declaration found: note that a text declaration 
      may occur only once at the beginning of an external 
      parsed entity.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - version
         The version number of the text declaration.
      - encDl
         The encoding declaration of the text declaration.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomCustomErrorHandler = class</title>
		 
  <para>If a Parser needs to implement customized error handling, it must implement this interface. The Parser will then report all errors and warnings through this interface.</para>

  <para>WARNING: If a Parser does not implement an Error Handler, XML parsing errors will go unreported and bizarre behaviour may result.</para>

  <para>For XML processing errors, a Parser must use this interface instead of throwing an exception: it is up to the Parser to decide whether to throw an exception for different types of errors and warnings. Note, however, that there is no requirement that the Parser continue to provide useful information after a call to fatalError (in other words, a Parser could catch an exception and report a fatalError).</para>
		 
  <para>Note, that TdomCustomErrorHandler is just a default interface that developers can override to provide their own Error Handlers. It should not be used directly in an application.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure error(const sender: TdomCustomParser;
                    const locator: TdomStandardLocator;
                    const e: EParserException;
                    const code: wideString); virtual;
                     <literallayout>
      Receive notification of a recoverable error. 

      This corresponds to the definition of "error" in 
      XML 1.0 spec., § 1.2.  For example, a validating 
      Parser would use this callback to report the 
      violation of a validity constraint. The default 
      behaviour is to take no action.
	  
      The Parser must continue to provide normal parsing 
      events after invoking this method: it should still 
      be possible for the application to process the 
      document through to the end. If the application 
      cannot do so, then the parser should report a 
      fatal error even if the XML 1.0 recommendation 
      does not require it to do so.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data 
         in the input source, or nil if no Locator is 
         specified.
      - e
         An EParserException whoes type reflects the 
         cause of the error.
      - code
         The XML characters which caused the error, 
         or an empty string if this information is 
         not available.
    </literallayout>
    </para>
    </listitem>

               <listitem>
                  <para>
                      
    procedure fatalError(const sender: TdomCustomParser;
                         const locator: TdomStandardLocator;
                         const e: EParserException;
                         const code: wideString); virtual;
                     <literallayout>
      Receive notification of a non-recoverable error. 

      This corresponds to the definition of "fatal error" 
      in section 1.2 of the W3C XML 1.0 Recommendation. For 
      example, a parser would use this callback to report the 
      violation of a well-formedness constraint.
	  
      The Parser must assume that the document is unusable 
      after this method has been invoked, and should continue 
      (if at all) only for the sake of collecting addition 
      error messages: in fact, Parsers are free to stop 
      reporting any other events once this method has been 
      invoked.

	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this method, 
         or nil if it is not invoked by a TdomCustomParser 
         object.
      - locator
         A TdomStandardLocator object that provides information 
         about the location of the data in the input source, or 
         nil if no Locator is specified.
      - e
         An EParserException whoes type reflects the cause of 
         the fatal error.
      - code
         The XML characters which caused the fatal error, or 
         an empty string if this information is not available.
                     </literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure warning(const sender: TdomCustomParser;
                      const locator: TdomStandardLocator;
                      const e: EParserException;
                      const code: wideString); virtual;
                     <literallayout>
      Receive notification of a warning. 

      Parsers will use this method to report conditions 
      that are not errors or fatal errors as defined by 
      the XML 1.0 spec.  The default behaviour is to take 
      no action.
	  
      The Parser must continue to provide normal parsing 
      events after invoking this method: it should still 
      be possible to process the document through to the 
      end.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - locator
         A TdomStandardLocator object that provides 
         information about the location of the data in 
         the input source, or nil if no Locator is 
         specified.
      - e
         An EParserException whoes type reflects the 
         cause of the warning.
      - code
         The XML characters which caused the warning, or an 
         empty string if this information is not available.
                     </literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>


  <sect1>
  <title>TdomCustomXMLReader = class</title>
		 
  <para>A Parser must implement one or more TdomCustomXMLReader objects to register Event Handlers for document processing, and to initiate a document parse.</para>

  <para>Note, that TdomCustomXMLReader is just a default interface that developers can override to provide their own Readers. It should not be used directly in an application.</para>
		 
  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property contentHandler: TdomCustomContentHandler
    <literallayout>
      Allow an application to register a content event handler. 
	  
      If the application does not register a content handler, 
      all content events reported by the Parser will be 
      silently ignored.

      Applications may register a new or different handler in 
      the middle of a parse, and the Parser must begin using 
      the new handler immediately.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property dtdHandler: TdomCustomDTDHandler
    <literallayout>
      Allow an application to register a dtd event handler. 
	  
      If the application does not register a dtd handler, 
      all dtd events reported by the Parser will be 
      silently ignored.

      Applications may register a new or different handler 
      in the middle of a parse, and the Parser must begin 
      using the new handler immediately.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property errorHandler: TdomCustomErrorHandler
    <literallayout>
      Allow an application to register an error event handler. 
	  
      If the application does not register an error handler, 
      all error events reported by the Parser will be silently 
      ignored; however, normal processing may not continue. It 
      is highly recommended that all applications implement an 
      error handler to avoid unexpected bugs.

      Applications may register a new or different handler 
      in the middle of a parse, and the Parser must begin 
      using the new handler immediately.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property Locator: TdomStandardLocator (readonly)
    <literallayout>
      The TdomStandardLocator object that is
      associated with this Reader.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    function parse(const sender: TdomCustomParser;
                   const inputSource: TXmlInputSource):boolean; virtual;
    <literallayout>
      Parse an XML document or an external entity. 

      The application can use this method to instruct 
      the Reader to begin parsing an XML document from 
      any valid input source.
	  
      Applications may not invoke this method while a 
      parse is in progress (they should create a new 
      Reader instead for each nested XML document). Once 
      a parse is complete, an application may reuse the 
      same Reader object, possibly with a different
      input source.
	  
      During the parse, the XMLReader will provide 
      information about the XML document through the 
      registered event handlers.

      This method is synchronous: it will not return 
      until parsing has ended.  If a client application 
      wants to terminate parsing early, it should throw 
      an exception.
	  
      Parameters:
      - sender
         The TdomCustomParser object that invokes this 
         method, or nil if it is not invoked by a 
         TdomCustomParser object.
      - inputSource
         The TXmlInputSource object containing the 
         document entity or the external parsed entity 
         to be parsed.

      Return Value:
         'True' if the parsing was succesfull, 'false' 
         if a fatal error occured while parsing.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomStandardDocXMLReader = class (TdomCustomXMLReader)</title>
	 
  <para>This class derived from TdomCustomXMLReader, is a Reader specialized in reading an XML document by interacting with a Content Handler.</para>
		 
  <para>For a detailed description of its properties and methods, see the documentation of the TdomCustomXMLReader class.</para>

  </sect1>


  <sect1>
  <title>TdomStandardIntSubsetXMLReader = class (TdomCustomXMLReader)</title>
		 
  <para>This class derived from TdomCustomXMLReader, is a Reader specialized in reading an internal subset of a DTD by interacting with a DTD Handler.</para>
		 
  <para>For a detailed description of its properties and methods, see the documentation of the TdomCustomXMLReader class.</para>
  </sect1>


  <sect1>
  <title>TdomStandardExtSubsetXMLReader = class (TdomStandardIntSubsetXMLReader)</title>
		 
  <para>This class derived from TdomCustomXMLReader, is a Reader specialized in reading an external subset of a DTD by interacting with a DTD Handler.</para>
		 
  <para>For a detailed description of its properties and methods, see the documentation of the TdomCustomXMLReader class.</para>
  </sect1>


  <sect1>
  <title>TdomStandardDocBuilder = class(TdomCustomContentHandler)</title>
		 
  <para>TdomStandardDocBuilder is a Content Handler specialized in building a DOM tree while handling XML document related event calls from a Reader.</para>
		 
  <para>For a detailed description of its methods, see the documentation of the TdomCustomContentHandler class.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property ReferenceDocument: TdomDocument (readonly)
    <literallayout>
      The TdomDocument object that holds the DOM tree 
      to be build. This object is automatically being
      created when the startDocument method is called
      by a TXmlToDomParser object as Sender.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
                     
    property ReferenceNode: TdomNode
    <literallayout>
      The TdomNode relative to which the next event call 
      attaches new TdomNodes. After invoking an event call 
      the value of ReferenceNode may change. If ReferenceNode 
      is nil no new TdomNodes will be attached and no 
      wellformedness constrain will be tested; therefore, it 
      is highly recommended not to set ReferenceNode to nil.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

  <sect1>
  <title>TdomStandardExtSubsetBuilder = class(TdomStandardIntSubsetBuilder)</title>
		 
  <para>TdomStandardExtSubsetBuilder is a DTD Handler specialized in building an external subset DOM tree while handling DTD related event calls from a Reader.</para>
		 
  <para>For a detailed description of its methods, see the documentation of the TdomCustomDtdHandler class.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ReferenceNode: TdomCMNode
    <literallayout>
      The TdomCMNode relative to which the next event 
      call attaches new TdomCMNode. After invoking an 
      event call the value of ReferenceNode may change. 
      If ReferenceNode is nil no new TdomCMNode will be 
      attached and no wellformedness constrain will be 
      tested; therefore, it is highly recommended not 
      to set ReferenceNode to nil.
      
      Exceptions on setting:
      - EInvalid_Access_Err
         Raised if the specified reference node is 
         neither nil nor is its owner content model 
         (see TdomCMNode.OwnerCMObject) of type 
         TdomCMExternalObject.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

      
  <sect1>
  <title>TdomDTDContentModelHandler = class(TdomCustomDTDHandler)</title>

  <para>TdomDTDContentModelHandler is a DTD Handler specialized in processing the content model information for a TdomCMObject object while handling DTD related event calls from a Reader. It is internally used by the TdomDtdAnalyzer class. For a detailed description of its methods, see the documentation of the TdomCustomDtdHandler class.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property contentModel: TdomCMObject (readonly)
    <literallayout>
      The TdomCMObject object for which the information
      is being processed.
    </literallayout>
    </para>
    </listitem>
  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomStandardIntSubsetBuilder = class(TdomCustomDtdHandler)</title>
		 
  <para>TdomStandardIntSubsetBuilder is a DTD Handler specialized in building an internal subset DOM tree while handling DTD related event calls from a Reader.</para>
		 
  <para>For a detailed description of its methods, see the documentation of the TdomCustomDtdHandler class.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property ReferenceNode: TdomCMNode
    <literallayout>
      The TdomCMNode relative to which the next event 
      call attaches new TdomCMNode. After invoking an 
      event call the value of ReferenceNode may change. 
      If ReferenceNode is nil no new TdomCMNode will be 
      attached and no wellformedness constrain will be 
      tested; therefore, it is highly recommended not 
      to set ReferenceNode to nil.
      
      Exceptions on setting:
      - EInvalid_Access_Err
         Raised if the specified reference node is 
         neither nil nor is its owner content model 
         (see TdomCMNode.OwnerCMObject) of type 
         TdomCMInternalObject.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomStandardErrorHandler = class(TdomCustomErrorHandler)</title>
		 
  <para>TdomStandardErrorHandler is a Error Handler specialized in collecting and storing warnings, errors and fatal errors as TXmlParserError objects in a list.</para>
		 
  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property errorList: TList
    <literallayout>
      A native Delphi TList sequently storing each 
      reported warning, error or fatal error as a 
      separate TXmlParserError object. 
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    procedure clearErrorList; virtual;
    <literallayout>
      Clears the errorList of the TdomStandardErrorHandler 
      after freeing all listed TXmlParserError object. It 
      is recommended, that Parsers use this method before 
      starting to parse a new document to guarantee that 
      all TXmlParserError objects created by previously 
      parsing a document have been removed.
    </literallayout>
    </para>
    </listitem>

    <listitem>
      <para>For a detailed description of other methods, see the documentation of the TdomCustomErrorHandler class.</para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

  <sect1>
  <title>Event classes</title>

  <sect2>
  <title>TXmlParserEvent = procedure(      sender: TObject;
                              const parentSystemId: wideString;
                                var publicId,
                                    systemId,
                                    content: WideString;
                                var action: TXmlParserAction) of object;</title>

  <para>Defines the event class which is used for OnExternalSubset and OnExternalParsedEntity events in TXmlToDomParser objects. For a description of its properties, see below.</para>

  </sect2>
  </sect1>


  <sect1>
  <title>TdomCustomParser = class (TComponent)</title>

  <para>TCustomParser is a general class where you can derive your own parser classes from. You cannot use this node type in your Delphi projects directly.</para>

  </sect1>

      
  <sect1>
  <title>TdomDtdAnalyzer = class (TdomCustomParser)</title>

  <para>TdomDtdAnalyzer is internally used by some XDOM routines and might not be of general interest.</para>

  </sect1>

  <sect1>
  <title>TXmlToDomParser = class (TdomCustomParser)</title>

  <para>This component is the fundamental interface to the XML parser which can be placed as a non-visual component on every formular. Before it can be used a TdomDocument object must be assigned to its Document property. Currently the parser supports Latin-1 (ISO-8859-1), Latin-2 (ISO-8859-2), Latin-3 (ISO-8859-3), Latin-4 (ISO-8859-4), Cyrillic (ISO-8859-3), Arabic (ISO-8859-6), Modern Greek (ISO-8859-7), Hebrew (ISO-8859-8), Latin-5 (ISO-8859-9), Latin-6 (ISO-8859-10), Latin-7 (ISO-8859-13), Latin-8 (ISO-8859-14), Latin-9 (ISO-8859-15), KOI8-R, cp10000_MacRoman, cp1250, cp1251, and big endian and little endian UTF-16 files.</para>

  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property DocBuilder: TdomStandardDocBuilder
    <literallayout>
      Property to access the internal 
      TdomStandardDocBuilder object which is used to 
      build the DOM tree.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property DocXMLReader: TdomStandardDocXMLReader
    <literallayout>
      Property to access the internal 
      TdomStandardDocXMLReader object which is used to 
      parse the XML document.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ErrorHandler: TdomStandardErrorHandler
    <literallayout>
      Property to access the internal 
      TdomStandardErrorHandler object which is used 
      to handle parsing errors.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ExtDtdBuilder: TdomStandardExtSubsetBuilder
    <literallayout>
      Property to access the internal 
      TdomStandardExtSubsetBuilder object which is used 
      to build the DOM tree of the external subset of a 
      DTD.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ExtDtdReader: TdomStandardExtSubsetXMLReader
    <literallayout>
      Property to access the internal TdomStandardDocBuilder 
      object which is used to parse the external subset of a
      DTD.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IntDtdBuilder: TdomStandardIntSubsetBuilder
    <literallayout>
      Property to access the internal TdomStandardDocBuilder 
      object which is used to build the DOM tree of the 
      internal subset of a DTD.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property IntDtdReader: TdomStandardIntSubsetXMLReader
    <literallayout>
      Property to access the internal TdomStandardDocBuilder 
      object which is used to parse the internal subset of a
      DTD.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Published properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property domImpl: TdomImplementation
    <literallayout>
      The TdomImplementation object to which the document 
      tree will be attached while parsing an XML file using 
      the fileToDom method, etc.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Events</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property OnExternalSubset: TXmlParserEvent
    <literallayout>
      TXmlParserEvent = 
          procedure(      sender: TObject;
                    const parentSystemId: wideString;
                      var publicId,
                          systemId,
                          content: WideString;
                      var action: TXmlParserAction)
                   of object;

      This event is called when the parser finds an external
      subset declaration while parsing a document and the 
      document is not declared being standalone by a standalone 
      document declaration of the value 'yes'.

      Parameters:
      - sender
         The parser object that called the event.
      - parentSystemId
         The system identifier of the document which
         referred to the external subset, or an empty
         wideString if none is provided.  If provided,
         this should be an absolute, not a relative URI,
         though a parser is not required to test this
         [this might be changed in a future XDOM release].

      Var-Parameters:
      - publicId 
         The public identifier of the external subset 
         declaration as specified in the document type
         declaration, or an empty string, if none is
         specified.  An event method may modify it, e.g.
         to normalize public identifiers or to retrieve
         a public identifier from a system identifier.
      - systemId 
         The system identifier of the external subset 
         declaration as specified in the document type
         declaration, or an empty string, if none is
         specified.  An event method may modify it, e.g.
         to normalize system identifiers or to retrieve
         a system identifier if only a public identifier
         is specified.
      - content
         If 'action' is set to 'paOK' then the event routine 
         for OnExternalSubset must return the text of the 
         external subset as an UTF-16BE encoded wideString.
      - action
         By default 'action' is set to 'paFail', which 
         means, that the requested external subset could 
         not be retrieved.  If the requested external subset 
         is available, 'action' must be set to 'paOK' and 
         the content of the external subset be returned via 
         the 'content' parameter.  If 'action' is set to 
         'paRetry', the parser immediately calls the event 
         routine for OnExternalSubset again using the 
         parameters as they have been modified meanwhile.  
         When setting 'action' to 'paRetry' one has to be 
         careful to avoid infinite loops.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>


  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

  <listitem>
  <para>
    constructor Create(aOwner: TComponent); override;
    <literallayout>
      Creates a new TXmlToDomParser object. Note, that 
      TXmlToDomParser objects are being created automatically 
      when adding them from the component's palette onto a 
      form.
      
      If you derive your own parser class from TXmlToDomParser
      which is calling the inherited Create constructor of 
      TXmlToDomParser you should take care of freeing the 
      Handlers, Builders and Readers created here which are 
      not longer of use. Code example:
      
        type TMyParser = class(TXmlToDomParser) ...
        type TMyXMLReader = class(TdomStandardDocXMLReader) ...

        constructor TMyParser.Create(aOwner:TComponent);
        begin
          Inherited Create(aOwner);
          FDocXMLReader.free;
          FDocXMLReader:= TMyXMLReader.create;
          FDocXMLReader.ContentHandler:= FDocBuilder;
          FDocXMLReader.ErrorHandler:= FErrorHandler;
        end;
      
      Parameters:
      - AOwner
         The component that holds the new TXmlToDomParser
         object.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function fileToDom(const filename: TFileName): TdomDocument; virtual;
    <literallayout>
      Reads an XML document from a data medium and parses 
      both, the whole document as well as its DTD, into a 
      tree of nodes.
      
      The parsed document is neither automatically 
      validated nor are its entity references, including 
      the predefined entities "lt", "gt", "amp", "apos", 
      and "quote", being resolved.   E.g., if the XML 
      document to be parsed contains the line
          &lt;foo> &amp;amp; &lt;/foo>
      this will result in a TdomElement node with three 
      child nodes: 1. a TdomText node whoes nodeValue is 
      a space character, 2. a TdomEntityReference node
      whoes nodeName is 'amp' (but without any child
      node), 3. again a TdomText node whoes nodeValue 
      is a space character.
      
      To validate the document and expand or replace its
      entity references call its 'validate' function.

      If the document to be parsed has a DTD the returned 
      TdomDocument object's 'contentmodel' property points 
      to a new TdomCMObject object which provides information 
      about the DTD.  If the DTD has an internal subset, then
      this is modeled by a TdomCMInternalObject object attached
      to the TdomCMObject object.  If the DTD has an external 
      subset, then this is modeled by a TdomCMExternalObject 
      object attached to the TdomCMObject object.  
      
      The 'fileToDom' method automatically calls the 
      'prepare' function of this TdomCMObject.  For details 
      see the description of the TdomCMObject class.

      If there is a reference to an external subset in the DTD 
      and the document is not declared being standalone the 
      OnExternalSubset event is called to retrieve the 
      external subset.  If either no OnExternalSubset event is 
      specified or the specified OnExternalSubset event 
      returns 'paFail' an EParserExternal_Subset_Not_Found_Err
      is raised.  Similarly the OnExternalParsedEntity event of
      the TdomImplementation object associated with this 
      TdomParser object is called if an external parsed entity 
      is declared.  If either no OnExternalParsedEntity event is 
      specified or the specified OnExternalParsedEntity event 
      returns 'paFail' an EParserExternal_Entity_Not_Found_Err
      is raised.  

      Parameters:
      - filename
         The filename of the document to be parsed.

      Return Value:
         A newly created TdomDocument node containing the 
         resulting document tree of the parsing process, 
         or an object of a class derived from TdomDocument 
         if this class has previously been registered with 
         the specified name (see the description of 
         TdomImplementation.RegisterDocumentFormat for 
         more details). The Filename property of this 
         TdomDocument is set to the specified 'filename' 
         value. This TdomDocument node is attached to the
         TDOMImplementation object specified by the 
         DOMImpl property at the time the function is 
         called -- which means that this TdomDocument node 
         is automatically freed, when the TDOMImplementation 
         object is being destroyed. However the document can 
         be freed explicitly by calling the FreeDocument 
         method of the TDOMImplementation belonging to it. 
         Here is  a code example:
                procedure parseAndFree;
                var
                  doc: TdomDocument;
                begin
                  doc:= myParser.fileToDom('myFile.xml');
                  ... // Code ommitted here.
                  myParser.DOMImpl.freeDocument(doc);
                end;

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity.  Details about the XML code that caused the 
         exception can be accessed via the property 
         'errorHandler'. Here is a source-code example, how to
         display the parsing errors in a TMemo component:

             with myMemo do begin
               clear;
               with myXmlToDomParser.errorHandler.errorList do 
               begin
                 for i:= 0 to count-1 do
                   memo2.Lines.Add(
                     UTF16BEToUTF8Str(
                       TXmlParserError(Items[i]).GetErrorStr(en)
                     )
                   );
               end;
               if text = '' 
                 then text:= 'Document successfully parsed.';
               update;
             end;

         Note that not every violation of a well-formedness 
         constraint as defined in the XML 1.0 spec. can be 
         detected by parsing a document.  Some of them can 
         only be discovered by validating the document.
      - EParserExternal_Subset_Not_Found_Err
         Raised if there is a reference to an external subset 
         in the DTD and the document is not declared being 
         standalone, but either no OnExternalSubset event is 
         specified or the specified OnExternalSubset event 
         returns 'paFail'.
      - EParserExternal_Entity_Not_Found_Err
         Raised if there is an external parsed entity declared
         in the DTD, but either no OnExternalParsedEntity event
         is specified on the TdomImplementation object 
         associated with this TdomParser object or the 
         specified OnExternalParsedEntity event returns 'paFail'.
      is raised. 
      - EAccessViolation
         This Delphi exception is raised, if no DOMImpl is 
         assigned or no filename specified.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function memoryToDom(const Ptr: Pointer;
                         const Size: Longint): TdomDocument; virtual;
    <literallayout>
      Reads an XML document from the computer's memory. If 
      the document to be parsed starts with '$feff' it is 
      assumed, that it is encoded in UTF-16BE; if it starts 
      with '$fffe' it is assumed, that it is encoded in 
      UTF-16LE; otherwise it is assumed, that is is encoded 
      in UTF-8. For details, see the description of the 
      'fileToDom' function.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function sourceCodeToDom(const IntDtdSourceCode: TXmlSourceCode): TdomDocument; virtual;
    <literallayout>
      Parses a sequence of TXmlSourceCodePiece[s] which are 
      listed in the TXmlSourceCode object into a document 
      tree. For details, see the description of the 'fileToDom' 
      function.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function streamToDom(const Stream: TStream): TdomDocument; virtual;
    <literallayout>
      Reads an XML document from a stream. If the stream to 
      be parsed starts with '$feff' it is assumed, that it 
      is encoded in UTF-16BE; if it starts with '$fffe' it 
      is assumed, that it is encoded in UTF-16LE; otherwise 
      it is assumed, that is is encoded in UTF-8. For details, 
      see the description of the 'fileToDom' function.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function stringToDom(const Str: String): TdomDocument; virtual;
    <literallayout>
      Reads an XML document from a string. For details, see 
      the description of the 'fileToDom' function.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function wideStringToDom(Str: WideString): TdomDocument; virtual;
    <literallayout>
      Reads an XML document from a wideString. For details, 
      see the description of the 'fileToDom' function.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure DocMemoryToDom(const Ptr: Pointer;
                             const Size: Longint;
                             const pubId,
                                   sysId: wideString;
                             const RefNode: TdomNode); virtual;
    <literallayout>
      Reads an XML document from the computer's memory 
      and attaches it to the TdomNode specified. If the 
      document to be parsed starts with '$feff' it is 
      assumed, that it is encoded in UTF-16BE; if it 
      starts with '$fffe' it is assumed, that it is 
      encoded in UTF-16LE; otherwise it is assumed, that 
      is is encoded in UTF-8.
      Parameters:
      - Ptr
         This points to the beginning of the memory block 
         to be parsed.
      - Size
         The size of the memory block to be parsed.
      - PubId 
         The public identifier of the document, or an 
         empty string if non is available.
      - SysId 
         The system identifier of the document, or an 
         empty string if non is available.
      - RefNode
         The node were the result of the parsing process 
         is to be inserted.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure DocSourceCodeToDom(const DocSourceCode: TXmlSourceCode;
                                 const pubId,
                                       sysId: wideString;
                                 const RefNode: TdomNode); virtual;
    <literallayout>
      Parses a sequence of TXmlSourceCodePiece[s] which 
      are listed in the TXmlSourceCode object into a 
      document tree.

      Parameters:
      - DocSourceCode
         The TXmlSourceCode object to be parsed.
      - PubId 
         The public identifier of the document, or an 
         empty string if non is available.
      - SysId 
         The system identifier of the document, or an 
         empty string if non is available.
      - RefNode
         The node were the result of the parsing process 
         is to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure DocStreamToDom(const Stream: TStream;
                             const pubId,
                                   sysId: wideString;
                             const RefNode: TdomNode); virtual;
    <literallayout>
      Reads an XML document from a stream and attaches 
      it to the TdomNode specified. If the stream to 
      be parsed starts with '$feff' it is assumed, that 
      it is encoded in UTF-16BE; if it starts with '$fffe' 
      it is assumed, that it is encoded in UTF-16LE; 
      otherwise it is assumed, that is is encoded in UTF-8.

      Parameters:
      - Stream
         The stream to be parsed.
      - PubId 
         The public identifier of the document, or an 
         empty string if non is available.
      - SysId 
         The system identifier of the document, or an 
         empty string if non is available.
      - RefNode
         The node were the result of the parsing process 
         is to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure DocStringToDom(const Str: string;
                             const pubId,
                                   sysId: wideString;
                             const RefNode: TdomNode); virtual;
    <literallayout>
      Reads an XML document from a string and attaches 
      it to the TdomNode specified. 

      Parameters:
      - Str
         The string to be parsed.
      - PubId 
         The public identifier of the document, or an 
         empty string if non is available.
      - SysId 
         The system identifier of the document, or an 
         empty string if non is available.
      - RefNode
         The node were the result of the parsing process 
         is to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure DocWideStringToDom(      Str: WideString;
                                 const pubId,
                                       sysId: wideString;
                                 const RefNode: TdomNode); virtual;
    <literallayout>
      Reads an XML document from a wideString and 
      attaches it to the TdomNode specified. 

      Parameters:
      - Str
         The WideString to be parsed.
      - PubId 
         The public identifier of the document, or an 
         empty string if non is available.
      - SysId 
         The system identifier of the document, or an 
         empty string if non is available.
      - RefNode
         The node were the result of the parsing process 
         is to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ExtDtdMemoryToDom(const Ptr: Pointer;
                                const Size: Longint;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the external subset of a document type 
      definition from the computer's memory. Note, that, 
      unlike the XML 1.0 spec. states, parameter entities 
      will only be resolved correctly, if they appear in 
      those places where they might appear in an internal 
      subset, too. A complete XML 1.0 compatible treatment 
      of external subsets has been postponed to a further 
      release of the XDOM. For a description of the 
      parameters, see 'DocMemoryToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ExtDtdSourceCodeToDom(const ExtDtdSourceCode: TXmlSourceCode;
                                    const pubId,
                                          sysId: wideString;
                                    const RefNode: TdomCMNode); virtual;
    <literallayout>
      Parses a sequence of TXmlSourceCodePiece[s] which 
      are listed in the ExtDtdSourceCode object into a 
      document tree.  Only TXmlSourceCodePiece[s] modeling 
      an external subset of a DTD are allowed, otherwise an 
      EParserException will be raised. 

      Parameters:
      - ExtDtdSourceCode
         The TXmlSourceCode object to be parsed.
      - PubId 
         The public identifier of the external DTD, or an 
         empty wideString if non is available.
      - SysId 
         The system identifier of the external DTD, or an 
         empty wideString if non is available.
      - RefNode
         The node were the result of the parsing process is 
         to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ExtDtdStreamToDom(const Stream: TStream;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the external subset of a document type 
      definition from a stream. Note, that, unlike the 
      XML 1.0 spec. states, parameter entities will only 
      be resolved correctly, if they appear in those 
      places where they might appear in an internal 
      subset, too. A completely XML 1.0 compatible 
      treatment of external subsets has been postponed 
      to a further release of the XDOM. For a 
      description of the parameters, see 
      'DocStreamToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ExtDtdStringToDom(const Str: string;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the external subset of a document type 
      definition from a string. Note, that, unlike the 
      XML 1.0 spec. states, parameter entities will only 
      be resolved correctly, if they appear in those 
      places where they might appear in an internal 
      subset, too. A completely XML 1.0 compatible 
      treatment of external subsets has been postponed 
      to a further release of the XDOM. For a 
      description of the parameters, see 
      'DocStreamToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ExtDtdWideStringToDom(      Str: WideString;
                                    const pubId,
                                          sysId: wideString;
                                    const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the external subset of a document type 
      definition from a wideString. Note, that, unlike the 
      XML 1.0 spec. states, parameter entities will only 
      be resolved correctly, if they appear in those 
      places where they might appear in an internal 
      subset, too. A completely XML 1.0 compatible 
      treatment of external subsets has been postponed 
      to a further release of the XDOM. For a 
      description of the parameters, see 
      'DocStreamToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure IntDtdMemoryToDom(const Ptr: Pointer;
                                const Size: Longint;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the internal subset of a document type definition 
      from the computer's memory. For a description of the 
      parameters, see 'DocMemoryToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure IntDtdSourceCodeToDom(const IntDtdSourceCode: TXmlSourceCode;
                                    const pubId,
                                          sysId: wideString;
                                    const RefNode: TdomCMNode); virtual;
    <literallayout>
      Parses a sequence of TXmlSourceCodePiece[s] which are 
      listed in the IntDtdSourceCode object into a document 
      tree.  Only TXmlSourceCodePiece[s] modeling an internal 
      subset of a DTD are allowed, otherwise an 
      EParserException will be raised. 

      Parameters:
      - IntDtdSourceCode
         The TXmlSourceCode object to be parsed.
      - PubId 
         The public identifier of the document, or an empty 
         string if non is available.
      - SysId 
         The system identifier of the document, or an empty 
         string if non is available.
      - RefNode
         The node were the result of the parsing process is 
         to be inserted.

      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed 
         entity. For details see the description of the 
         EParserException of the  fileToDom method.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure IntDtdStreamToDom(const Stream: TStream;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the internal subset of a document type definition 
      from a stream. For a description of the parameters, see 
      'DocStreamToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure IntDtdStringToDom(const Str: string;
                                const pubId,
                                      sysId: wideString;
                                const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the internal subset of a document type definition 
      from a string. For a description of the parameters, see 
      'DocStringToDom'.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure IntDtdWideStringToDom(      Str: WideString;
                                    const pubId,
                                          sysId: wideString;
                                    const RefNode: TdomCMNode); virtual;
    <literallayout>
      Reads the internal subset of a document type definition 
      from a wideString. For a description of the parameters, 
      see 'DocWideStringToDom'.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>
      
      
  <sect1>
  <title>TXmlSourceCode = class(TList);</title>

  <para>This class defines a sequential view of the source code of an XML document. It consists of a list of TXmlSourceCodePiece objects which represent distinct parts of an XML document such as e.g. text, start tags, end tags, empty element tags, or processing instructions. TXmlSourceCode objects might be created and used by an application in order to get easy access to a sequential rather than a tree view of an XML document. As TXMLSourceCode is derived from TList it holds the same properties, methods and functions. The following only describes where the TXmlSourceCode methods depart from the corresponding TList methods. For a full discribtion of the TList methods see the Delphi online manual.</para>

  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property NameOfFirstTag: wideString
    <literallayout>
      The name of the first tag (start tag or empty element 
      tag) in the list or an empty string if there is no start 
      tag in the list.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function Add(Item: Pointer): Integer;
    <literallayout>
      Adds a new source code piece to the end of the list 
      setting its ownerSourceCode to this TXMLSourceCode 
      object, and calculates the 'offset' of the added item. 
      If the previous item is a nil pointer the whole list 
      is packed and afterwards the 'offset' of all list 
      items is re-calculated. The application has to make 
      sure, that the specified item points to an object of 
      type TXmlSourceCodePiece.

      Exceptions:		 
      - EListError
         This native Delphi exception is raised if 'item' 
         is nil or points to a TXmlSourceCodePiece object 
         that is already inuse in this list or elsewhere.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Clear;
    <literallayout>
      Removes all source code pieces from the list 
      setting their offset to '0' and their 
      ownerSourceCode to nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure ClearAndFree;
    <literallayout>
      Removes all source code pieces from the list and 
      frees them.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Delete(Index: Integer);
    <literallayout>
      Deletes the source code piece at the specified 
      index position from the list setting its offset to 
      '0' and its ownerSourceCode to nil, and
      re-calculates the 'offset' of all list items whoes 
      index is greater than or equals the specified 
      'index'. If a nil pointer is found during 
      re-calculation the list is packed and afterwards 
      the 'offset' of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Exchange(Index1, Index2: Integer);
    <literallayout>
      Exchanges the two specified source code pieces and 
      re-calculates the 'offset' of  all list items whoes 
      index is greater than or equals the smallest of the 
      two specified index values. If a nil pointer is 
      found during re-calculation the list is packed and 
      afterwards the 'offset' of all list items is 
      recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function GetPieceAtPos(pos: integer): TXmlSourceCodePiece;
    <literallayout>
      Returns the source code piece that holds the 
      character at the specified position in the XML 
      document. If a nil pointer is found during 
      evaluation the list is packed and the evaluation 
      is started again.

      Parameters:
      - pos
         The position of the character in the XML 
         document, starting with 1 for the first character.
      Return Value:
         The TXmlSourceCodePiece object which holds the 
         character at the specified position in the XML 
         document, or nil if there is no such 
         TXmlSourceCodePiece object or pos is smaller 
         than 1.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Insert(Index: Integer; Item: Pointer);
    <literallayout>
      Adds a new source code piece at the specified 
      index position to the list setting its 
      ownerSourceCode to this TXMLSourceCode object, 
      and re-calculates the 'offset'  of all list 
      items whoes index is greater than or equals the 
      specified 'index'. If a nil pointer is found 
      during re-calculation the list is packed and 
      afterwards the 'offset' of all list items is 
      recalculated. The application has to make sure, 
      that the specified item points to an object of 
      type TXmlSourceCodePiece.

      Exceptions:		 
      - EListError
         This native Delphi exception is raised if 
         'item' is nil or points to a TXmlSourceCodePiece 
         object that is already inuse in this list or
         elsewhere.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Move(CurIndex, NewIndex: Integer);
    <literallayout>
      Moves the source code piece from 'CurIndex' to 
      'NewInde' and re-calculates the 'offset' of all 
      list items whoes index is greater than or equals 
      the smallest of the two specified index values. 
      If a nil pointer is found during re-calculation 
      the list is packed and afterwards the 'offset' 
      of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Pack;
    <literallayout>
      Deletes all nil-pointers from the list and 
      re-calculates the 'offset' of all list items. 
      WARNING: Do not use nil pointers to remove items 
      from the list unless to free them, because their 
      ownerSourceCode property will not be updated and 
      any attempt to add or insert them again will lead 
      to an EListError exception. Also take into account, 
      that modifying the pointer items directly will not 
      automatically re-calculate the list items' offset
      property, which might lead to hardly predictable 
      results when modifying the list again, due to the 
      re-calculation behavior described above. However, 
      if you want to remove a series of source code 
      pieces from the list, it will be slow to remove 
      them individually, because that will always call 
      the offset re-calculation routine. Instead set 
      the respective pointer items to 'nil', free the 
      objects and call the pack procedure which will 
      automatically guarantee the list's integrity. 

      Here is a code example:

        with myXmlSourceCode do begin
          items[indexOf(myXmlSourceCodePiece1)]:= nil;
          items[indexOf(myXmlSourceCodePiece2)]:= nil;
          items[indexOf(myXmlSourceCodePiece3)]:= nil;
          myXmlSourceCodePiece1.free;
          myXmlSourceCodePiece2.free;
          myXmlSourceCodePiece3.free;
	  pack; // Don't forget this!
        end;
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function Remove(Item: Pointer): Integer;
    <literallayout>
      Remove a source code piece from the list setting 
      its offset to '0' and its ownerSourceCode to nil, 
      and re-calculates the 'offset' of all list items
      whoes index is greater than or equals (now) the 
      previous list position of the removed source code 
      piece. If a nil pointer is found during 
      re-calculation the list is packed and afterwards 
      the 'offset' of all list items is recalculated.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    procedure Sort(Compare: TListSortCompare);
    <literallayout>
      Sorts the list according the specified Compare 
      object and re-calculates the 'offset' of all list 
      items.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TXmlSourceCodePiece = class</title>

  <para>This defines the class of objects which are used in TXmlSourceCode to represent a sequential view of the source code of an XML document.</para>

  <para><emphasis>Public properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property pieceType: TdomPieceType (readonly)
    <literallayout>
      The type of the code pieces.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property text: wideString
    <literallayout>
      The text of the code pieces.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property offset: integer (readonly)
    <literallayout>
      The number of characters in the XML document which 
      proceed this code piece.  The offset of the first 
      code pieces is always '0'.  UTF-16 surrogates are 
      counting as two characters.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property ownerSourceCode: TXmlSourceCode (readonly)
    <literallayout>
      The TXmlSourceCode object that holds this code piece.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    constructor Create(pt: TdomPieceType); virtual;
    <literallayout>
      Creates a new TXmlSourceCodePiece object.

      Parameters:
      - pt
         The piece type of the new TXmlSourceCodePiece 
         object.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>

  </chapter>


  <chapter>
  <title>Document Object Model Traversal (#)</title>

  <para>For a detailed description of the behavior of Iterators and TreeWalkers see the corresponding part of the DOM 2 specification, namely: <quote>Document Object Model (DOM) Level 2 Traversal and Range Specification</quote>, section 1, available at "http://www.w3.org/TR/DOM-Level-2-Traversal-Range".</para>

  <sect1>
  <title>TdomNodeIterator = class (#)</title>

  <para>A TdomNodeIterator objects allows the members of a list of nodes to be returned sequentially. This list will always consist of the nodes of a subtree, presented in document order. When an iterator is first created, calling its nextNode() method returns the first node in the logical view of the subtree; in most cases, this is the root of the subtree. Each successive call advances the NodeIterator through the list, returning the next node available in the logical view. When no more nodes are visible, nextNode() returns nil.</para>
  
  <para>TdomNodeIterator objects are created using the createNodeIterator method found in the TdomDocument class. When an iterator is created, a set of flags can be used to determine which node types will be "visible" and which nodes will be "invisible" while traversing the tree. Nodes that are "invisible" are skipped over by the iterator as though they did not exist.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    property expandEntityReferences: boolean (readonly)
    <literallayout>
      The value of this flag determines whether the children 
      of entity reference nodes are totally ignored by the 
      iterator.  If false, they and their descendents will be 
      rejected.  Note that this rejection takes precedence over 
      whatToShow and the filter. Also note that this is currently 
      the only situation where Iterators may reject a complete 
      subtree rather than skipping individual nodes.
      
      To produce a view of the document that has entity 
      references expanded and does not expose the entity 
      reference node itself, use the whatToShow flags to hide 
      the entity reference node and set expandEntityReferences 
      to true when creating the iterator. To produce a view of 
      the document that has entity reference nodes but no 
      entity expansion, use the whatToShow flags to show the 
      entity reference node and set expandEntityReferences to 
      false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property filter: TdomNodeFilter (readonly)
    <literallayout>
      The filter used to screen nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property root: TdomNode (readonly)
    <literallayout>
      The root node of the Iterator, as specified when it 
      was created.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property whatToShow: TdomWhatToShow (readonly)
    <literallayout>
      This attribute determines which node types are presented 
      via the iterator.  The available set of constants is 
      defined in the TdomNodeFilter interface.  Nodes not 
      accepted by whatToShow will be skipped, but their 
      children may still be considered. Note that this skip 
      takes precedence over the filter, if any.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    procedure detach; virtual;
    <literallayout>
      Detaches the iterator from the set which it iterated 
      over, releasing any computational resources and 
      placing the iterator in the INVALID state.  After 
      detach has been invoked, calls to nextNode or 
      previousNode will raise the exception 
      INVALID_STATE_ERR.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function NextNode: TdomNode; virtual;
    <literallayout>
      Returns the next node in the set and advances the 
      position of the iterator in the set. After a 
      NodeIterator is created, the first call to nextNode
      returns the first node in the set.

      Return Value:
         The next Node in the set being iterated over, or 
         nil if there are no more members in that set.
      Exceptions:		 
      - EInvalid_State_Err
          Raised if this method is called after the detach 
          method was invoked.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function PreviousNode: TdomNode; virtual;
    <literallayout>
      Returns the previous node in the set and moves the 
      position of the iterator backwards in the set.

      Return Value:
         The next Node in the set being iterated over, or 
         nil if there are no more members in that set.

      Exceptions:
      - EInvalid_State_Err
          Raised if this method is called after the detach 
          method was invoked.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>TdomTreeWalker = class (#)</title>

  <para>The TdomTreeWalker class provides many of the same benefits as the TdomNodeIterator class. The main difference between these two classes is that the TreeWalker presents a tree-oriented view of the nodes in a subtree, rather than the Iterators list-oriented view. In other words, an Iterator allows you to move forward or back, but a TreeWalker allows you to also move to the parent of a node, to one of its children, or to a sibling.</para>

  <para>Using a TreeWalker is quite similar to navigation using the Node directly, and the navigation methods for the two classes are analogous. The advantage of using a TreeWalker instead of direct Node navigation is that the TreeWalker allows the user to choose an appropriate view of the tree. Flags may be used to show or hide Comments or ProcessingInstructions; entities may be expanded or shown as EntityReference nodes. In addition, TdomNodeFilter objects may be used to present a custom view of the tree.</para>

  <para>Omitting nodes from the logical view of a subtree can result in a structure that is substantially different from the same subtree in the complete, unfiltered document. Nodes that are siblings in the TreeWalker view may be children of different, widely separated nodes in the original view. For instance, consider a Filter that skips all nodes except for Text nodes and the root node of a document. In the logical view that results, all text nodes will be siblings and appear as direct children of the root node, no matter how deeply nested the structure of the original document.</para>

  <para><emphasis>Properties</emphasis></para>
  <para>
  <itemizedlist>
    <listitem>
    <para>
    property currentNode: TdomNode
    <literallayout>
      The node at which the TreeWalker is currently positioned. 
      The value must not be nil. Alterations to the DOM tree 
      may cause the current node to no longer be accepted by 
      the TreeWalker's associated filter. currentNode may also 
      be explicitly set to any node, whether or not it is 
      within the subtree specified by the root node or would 
      be accepted by the filter and whatToShow flags. Further 
      traversal occurs relative to currentNode even if it is 
      not part of the current view by applying the filters in 
      the requested direction (not changing currentNode where 
      no traversal is possible).

      Exceptions:
      - ENot_Supported_Err
         Raised if the specified currentNode is nil.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property expandEntityReferences: boolean (readonly)
    <literallayout>
      The value of this flag determines whether the children 
      of entity reference nodes are visible to the TreeWalker. 
      If false, they and their descendents will be rejected. 
      Note that this rejection takes precedence over whatToShow 
      and the filter, if any.  
      
      To produce a view of the document that has entity 
      references expanded and does not expose the entity 
      reference node itself, use the whatToShow flags to 
      hide the entity reference node and set 
      expandEntityReferences to true when creating the 
      TreeWalker. 

      To produce a view of the document that has entity 
      reference nodes but no entity expansion, use the 
      whatToShow flags to show the entity reference node 
      and set expandEntityReferences to false.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property filter: TdomNodeFilter (readonly)
    <literallayout>
      The filter used to screen nodes.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property root: TdomNode (readonly)
    <literallayout>
      The root node of the Iterator, as specified when 
      it was created.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    property whatToShow: TdomWhatToShow (readonly)
    <literallayout>
      This attribute determines which node types are 
      presented via the TreeWalker.  The available set 
      of constants is defined in the TdomNodeFilter 
      interface. Nodes not accepted by whatToShow will 
      be skipped, but their children may still be 
      considered. Note that this skip takes precedence 
      over the filter, if any.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>
  <listitem>
  <para>
    function firstChild: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the first visible child 
      of the current node, and returns the new node. If the 
      current node has no visible children, returns nil, and 
      retains the current node.

      Return Value:
         The new node, or nil if the current node has no 
         visible children in the TdomTreeWalker's logical 
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function lastChild: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the last visible 
      child of the current node, and returns the new 
      node.  If the current node has no visible 
      children, returns nil, and retains the current 
      node.

      Return Value:
         The new node, or nil if the current node has 
         no visible children in the TdomTreeWalker's 
         logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function nextNode: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the next visible node 
      in document order relative to the current node, 
      and returns the new node.  If the current node has 
      no next node, or if the search for nextNode 
      attempts to step upward from the TdomTreeWalker's 
      root node, returns nil, and retains the current
      node.

      Return Value:
         The new node, or nil if the current node has no 
         next node in the TdomTreeWalker's logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function nextSibling: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the next sibling 
      of the current node. If the current node has 
      no visible next sibling returns nil, and retains
      the current node.

      Return Value:
         The new node, or nil if the current node has 
         no next sibling in the TdomTreeWalker's logical 
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function parentNode: TdomNode; virtual;
    <literallayout>
      Moves to and returns the closest visible ancestor 
      node of the current node.  If the search for 
      parentNode attempts to step upward from the
      TdomTreeWalker's root node, or if it fails to find 
      a visible ancestor node, this method retains the
      current position and returns nil.

      Return Value:
         The new parent node, or nil if the current node 
         has no parent in the TdomTreeWalker's logical 
         view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function previousNode: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the previous visible 
      node in document order relative to the current 
      node, and returns the new node. If the current 
      node has no previous node, or if the search for 
      previousNode attempts to step upward from the
      TdomTreeWalker's root node, returns nil, and 
      retains the current node.

      Return Value:
         The new node, or nil if the current node has 
         no previous node in the TdomTreeWalker's 
         logical view.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    function previousSibling: TdomNode; virtual;
    <literallayout>
      Moves the TdomTreeWalker to the previous sibling 
      of the current node. If the current node has no 
      visible previous sibling returns nil, and retains 
      the current node.

      Return Value:
         The new node, or nil if the current node has 
         no previous sibling in the TdomTreeWalker's 
         logical view.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect1>


  <sect1>
  <title>Filters</title>

  <sect2>
  <title>TdomWhatToShow (#)</title>

  <para>TdomWhatToShow = set of TDomNodeType;</para>

  <para>These are the available values for the whatToShow parameter used in TdomTreeWalkers and TdomIterators. If a node type is not contained in whatToShow, that will be taken as a request to skip over this type of node; the behavior in that case is similar to that of filter_skip.</para>

  </sect2>

  <sect2>
  <title>TdomFilterResult (#)</title>

  <para>The following constants are returned by the acceptNode method of the TdomFilter class.</para>

  <para>Defined Constants:</para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    filter_accept
    <literallayout>
      Accept the node. Navigation methods defined for 
      TdomNodeIterator or TdomTreeWalker will return 
      this node.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    filter_reject
    <literallayout>
      Reject the node. Navigation methods defined for 
      TdomNodeIterator or TreeWalker will not return 
      this node.  For TreeWalker, the children of this 
      node will also be rejected.  Iterators treat this 
      as a synonym for filter_skip.
    </literallayout>
    </para>
    </listitem>

    <listitem>
    <para>
    filter_skip
    <literallayout>
      Skip this single node. Navigation methods defined 
      for TdomNodeIterator or TdomTreeWalker will not 
      return this node.  For both TdomNodeIterator and 
      TdomTreewalker, the children of this node will 
      still be considered.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  <sect2>
  <title>TdomNodeFilter = class (#)</title>

  <para>TdomNodeFilter allow the user to create objects that "filter out" nodes. Each filter contains a user-written function that looks at a node and determines whether or not it should be presented as part of the traversals logical view of the document. To use a TdomNodeFilter, you create a TdomNodeIterator or a TdomTreeWalker that uses the filter. The traversal engine applies the filter to each node, and if the filter does not accept the node, traversal skips over the node as though it were not present in the document. NodeFilters need not know how to navigate the structure that contains the nodes on which they operate.</para>
  
  <para>Filters will be consulted when a traversal operation is performed, or when a TdomNodeIterators reference node is removed from the subtree being iterated over and it must select a new one. However, the exact timing of these filter calls may vary from one XDOM release to another. For that reason, TdomNodeFilters should not attempt to maintain state based on the history of past invocations; the resulting behavior may not be portable.</para>
  
  <para>Similarly, TdomTreeWalkers and TdomNodeIterators should behave as if they have no memory of past filter results, and no anticipation of future results. If the conditions a TdomNodeFilter is examining have changed (e.g., an attribute which it tests has been added or removed) since the last time the traversal logic examined this node, this change in visibility will be discovered only when the next traversal operation is performed. For example: if the filtering for the current node changes from filter_accept to filter_skip, a TdomTreeWalker will be able to navigate off that node in any direction, but not back to it unless the filtering conditions change again. TdomNodeFilters which change during a traversal can be written, but their behavior may be confusing and they should be avoided when possible.</para>

  <para><emphasis>Public Methods</emphasis></para>
  <para>
  <itemizedlist>

    <listitem>
    <para>
    function acceptNode(const n: TdomNode): TdomFilterResult; virtual;
    abstract;
    <literallayout>
      Test whether a specified node is visible in the logical 
      view of a TreeWalker or NodeIterator. This function will 
      be called by the implementation of TreeWalker and 
      NodeIterator; it is not intended to be called directly 
      from user code. (Though you could do so if you wanted to
      use the same filter to guide your own application logic.)

      Parameters:
      - n
         The node to check to see if it passes the filter or 
         not.

      Return Value:
         A constant to determine whether the node is accepted, 
         rejected, or skipped.
    </literallayout>
    </para>
    </listitem>

  </itemizedlist>
  </para>
  </sect2>

  </sect1>

</chapter>
</book>
