VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "CGateway"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'/////////////////////////////////////////////////////////////////////////////////////////////////
'//
'// Class       :   CGateway
'// Description :   This class acts as the client side proxy for the Government Gateway.
'//                 To use, set the properties that define the way the Gateway is accessed (URL,
'//                 Username, PAssword) and use the Send method to send GovTalk messages to the
'//                 Gateway server.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
'//
'//


Option Explicit

' Gateway attributes
Private mstrURL As String
Private mstrPassword As String
Private mstrUsername As String



'/////////////////////////////////////////////////////////////////////////////////////////////////
'// Name:   Property Get/Let URL()
'//         Get / Set the URL where the Government Gateway is accessed.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
Public Property Let URL(ByVal strURL As String)
    mstrURL = strURL
End Property

Public Property Get URL() As String
    URL = mstrURL
End Property


'/////////////////////////////////////////////////////////////////////////////////////////////////
'// Name:   Property Get/Let Password()
'//         Get / Set the password required to access the gateway.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
Public Property Let Password(ByVal strPassword As String)
    mstrPassword = strPassword
End Property

Public Property Get Password() As String
    Password = mstrPassword
End Property

'/////////////////////////////////////////////////////////////////////////////////////////////////
'// Name:   Property Get/Let Username()
'//         Get / Set the username required to access the gateway.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
Public Property Let Username(ByVal strUsername As String)
    mstrUsername = strUsername
End Property

Public Property Get Username() As String
    Username = mstrUsername
End Property

'/////////////////////////////////////////////////////////////////////////////////////////////////
'// Name:   Send()
'//         Send the specifed GovTalk message to the gateway.
'//
'// Inputs: objMessage - the GovTalk message to send to the Gateway server.
'// Returns:Response object including HTTP response and any XML response generated by the Gateway.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
Public Function Send(ByVal objMessage As CMessage) As CResponse
    On Error GoTo Handler

    ' Declare HTTP object, so that we can send the XML over HTTP to the server
    Dim objHTTP As MSXML2.XMLHTTP30
    Set objHTTP = New MSXML2.XMLHTTP30
    
    Dim objResponse As CResponse
    Set objResponse = New CResponse


    ' Initialise the HTTP request to use the POST method and be Async
    objHTTP.open "POST", mstrURL, False, mstrUsername, mstrPassword
    Dim strXYZ As String
    'objHTTP.Send strXYZ
    If (objMessage.TransmissionFormat = FORMAT_HTML) Then
        objHTTP.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    Else
        objHTTP.setRequestHeader "Content-Type", "text/xml"
    End If
    
    objHTTP.Send objMessage.GetMessageForTransmission ' send our XML doc to the gateway

    ' Assign the status code, status text and the return data to the function
    objResponse.HTTPStatus = objHTTP.Status
    objResponse.HTTPStatusText = objHTTP.statusText
    
    objResponse.ResponseText(objHTTP.ResponseText) = objMessage.TransmissionFormat
    'objResponse.XML = objHTTP.responseXML
    
    
    
    Set Send = objResponse

    ' Set scope of objects to nothing
    Set objHTTP = Nothing
    Exit Function
    
Handler:
    Dim lErrNumber As Long
    Dim strErrSource As String
    Dim strErrDesc As String
    
    lErrNumber = Err.Number
    strErrDesc = Err.Description
    strErrSource = Err.Source
    
    On Error GoTo Handler2
    
    objResponse.State = SS_ERROR
    

    Select Case lErrNumber
        Case -2146697211    ' This denotes the message could not be sent
            objResponse.StateText = "The message could not be sent.  This may mean that the Gateway server is currently offline or that the URL is incorrect."
            Set Send = objResponse
            
        Case -2146697208    ' internal MSXML3 Automation error
            ' This error sometimes occurs when the server certificate cannot be trusted
            Set Send = UntrustedCertificateResend(objMessage)
            
        Case Else
            objResponse.StateText = lErrNumber & ": " & strErrDesc
            Err.Raise lErrNumber, strErrSource, strErrDesc
    End Select
    Exit Function
    
Handler2:
    Err.Raise Err.Number, Err.Source, Err.Description

End Function


'/////////////////////////////////////////////////////////////////////////////////////////////////
'// Name:   UntrustedCertificateResend()
'//         This function tries sending a empty message to the Gateway server before resending
'//         the real message we want to send.  This can help if the original problem was due to
'//         an untrusted certificate.  Sending an empty message will cause IE5 to kick in and
'//         display a dialog asking if we want to display a certificate.
'//
'// Inputs: objMessage - the GovTalk message to send to the Gateway server.
'// Returns:Response object including HTTP response and any XML response generated by the Gateway.
'//
'/////////////////////////////////////////////////////////////////////////////////////////////////
Private Function UntrustedCertificateResend(ByVal objMessage As CMessage) As CResponse
    On Error GoTo Handler

    Dim strEmpty As String
    
    ' Declare HTTP object, so that we can send the XML over HTTP to the server
    Dim objHTTP As MSXML2.XMLHTTP30
    Set objHTTP = New MSXML2.XMLHTTP30
    
    Dim objResponse As CResponse
    Set objResponse = New CResponse


    ' Initialise the HTTP request to use the POST method and be Async
    objHTTP.open "POST", mstrURL, False, mstrUsername, mstrPassword
    
    ' If the problem is due to an untrusted certificate calling send with and empty string will cause IE5 to
    ' pop-up a dialog asking if we want to trust the certificate
    objHTTP.Send strEmpty
    
    ' after that we can try sending the real message again
    objHTTP.Send objMessage.XML ' send our XML doc to the gateway

    ' Assign the status code, status text and the return data to the function
    objResponse.HTTPStatus = objHTTP.Status
    objResponse.HTTPStatusText = objHTTP.statusText
    objResponse.XML = objHTTP.ResponseText
    
    Set UntrustedCertificateResend = objResponse

    ' Set scope of objects to nothing
    Set objHTTP = Nothing
    Exit Function
    
Handler:
    Dim lErrNumber As Long
    Dim strErrSource As String
    Dim strErrDesc As String
    
    lErrNumber = Err.Number
    strErrDesc = Err.Description
    strErrSource = Err.Source
    
    On Error Resume Next
    
    objResponse.State = SS_ERROR
    

    Select Case lErrNumber
        Case -2146697211, -2146697208    ' This denotes the message could not be sent
            objResponse.StateText = "The message could not be sent.  This may mean that the Gateway server is currently offline or that the URL is incorrect."
            Set UntrustedCertificateResend = objResponse
            
        Case Else
            objResponse.StateText = lErrNumber & ": " & strErrDesc
            Err.Raise lErrNumber, strErrSource, strErrDesc
    End Select

End Function



