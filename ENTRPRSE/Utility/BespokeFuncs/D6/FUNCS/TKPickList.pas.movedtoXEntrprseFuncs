unit TKPICKLIST;

{ nfrewer440 17:10 08/12/2003: Disabled Byte Alignment in Delphi 6.0 }
{$ALIGN 1}  { Variable Alignment Disabled }


interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms
  , Dialogs, StdCtrls, ExtCtrls, uMultiList, uComTKDataset, uDBMultiList
  , uBtrieveDataset, uExDatasets, uDBMColumns, Enterprise01_TLB
  , ComCtrls, COMObj, StrUtil, Menus, uSettings;

type

  TplType = (plSupplier, plGLCode, plCC, plDept, plCustomer, plProduct, plProductGroup
  , plLocation, plCustSalesAnalysis, plProductAndGroup, plProductInAGroup);

  TfrmTKPickList = class(TForm)
    btnOK: TButton;
    btnCancel: TButton;
    ctkDataSet: TComTKDataset;
    panList: TPanel;
    mlList: TDBMultiList;
    pmMain: TPopupMenu;
    Properties1: TMenuItem;
    SaveCoordinates1: TMenuItem;
    btnShowAll: TButton;
    procedure btnCancelClick(Sender: TObject);
    procedure GetFieldValue(Sender: TObject; ID: IDispatch; FieldName: String; var FieldValue: String);
    procedure SelectRecord(Sender: TObject; SelectType: TSelectType; Address: integer; ID: IDispatch);
//    procedure BuildIndex(Sender: TObject; ID: IDispatch; IndexNo : integer; var KeyStr : String);
    procedure btnOKClick(Sender: TObject);
//    procedure mlListSortColumn(Sender: TObject; ColIndex: Integer; SortAsc: Boolean);
    procedure FormShow(Sender: TObject);
    procedure mlListAfterInit(Sender: TObject);
    procedure mlListRowDblClick(Sender: TObject; RowIndex: Integer);
    procedure mlListAfterLoad(Sender: TObject);
    procedure mlListBeforeLoad(Sender: TObject; var Allow: Boolean);
    procedure mlListScrollButtonKeyPress(Key: Char);
    procedure ctkDataSetFilterRecord(Sender: TObject; ID: IDispatch;
      var Include: Boolean);
    procedure Properties1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnShowAllClick(Sender: TObject);
    procedure FormResize(Sender: TObject);
  private
    bRestore : boolean;
    procedure SaveAllSettings;
    procedure LoadAllSettings;
    procedure WMGetMinMaxInfo(var Message: TWMGetMinMaxInfo); Message WM_GetMinMaxInfo;
    function GetStockDescFromCode(sStockCode : string) : string;
  public
    oLToolkit : IToolkit;
    sParentCode : string[16];
    sFind : string;
    plType : TplType;
    iSearchCol : integer;
    constructor CreateWith(Sender: TComponent; AToolkit : IToolkit);
  end;

var
  frmTKPickList: TfrmTKPickList;

implementation

{$R *.dfm}

procedure TfrmTKPickList.btnCancelClick(Sender: TObject);
begin
  ModalResult := mrCancel;
end;

procedure TfrmTKPickList.GetFieldValue(Sender: TObject;
  ID: IDispatch; FieldName: String; var FieldValue: String);
begin
  case plType of
    plSupplier, plCustomer : begin
      with (ID as IAccount) do begin
        case FieldName[1] of
          'C' : FieldValue := acCode;
          'D' : FieldValue := acCompany;
        end;{case}
      end;{with}
    end;

    plProduct, plProductGroup, plProductAndGroup, plProductInAGroup : begin
      with (ID as IStock) do begin
        case FieldName[1] of
          'C' : FieldValue := stCode;
          'D' : FieldValue := stDesc[1];
        end;{case}
      end;{with}
    end;

    plGLCode : begin
      with (ID as IGeneralLedger) do begin
        case FieldName[1] of
          'C' : FieldValue := IntToStr(glCode);
          'D' : FieldValue := glName;
        end;{case}
      end;{with}
    end;

    plCC, plDept : begin
      with (ID as ICCDept) do begin
        case FieldName[1] of
          'C' : FieldValue := cdCode;
          'D' : FieldValue := cdName;
        end;{case}
      end;{with}
    end;

    plLocation : begin
      with (ID as ILocation) do begin
        case FieldName[1] of
          'C' : FieldValue := loCode;
          'D' : FieldValue := loName;
        end;{case}
      end;{with}
    end;

    plCustSalesAnalysis : begin
      with (ID as ICustomerSalesAnalysis) do begin
        case FieldName[1] of
          'C' : FieldValue := saStockCode;
          'D' : FieldValue := GetStockDescFromCode(saStockCode);
        end;{case}
      end;{with}
    end;

  end;{case}
end;
(*
procedure TfrmPickList.BuildIndex(Sender: TObject; ID: IDispatch; IndexNo : integer; var KeyStr: String);

  function StrToIndexInt(sKey : string) : integer;
  begin{StrToIndexInt}
    sKey := Trim(sKey);
    if Pos(StringOfChar(#255,200),sKey) > 0 then Result := 2147483647
    else begin
      sKey := RemoveAllChars(sKey,#255);
      Result := StrToIntDef(sKey,0);
    end;
  end;{StrToIndexInt}

begin{BuildIndex}
  exit;
  case plType of
    plSupplier : begin
      with (ID as IAccount) do begin
        case IndexNo of
          acIdxCode : KeyStr := BuildCodeIndex(KeyStr);
          acIdxName : KeyStr := BuildNameIndex(KeyStr);
    //      acIdxAltCode : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxVATRegNo : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxEmail : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxPhone : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxPostCode : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxOurCode : KeyStr := BuildCodeIndex(KeyStr);
    //      acIdxInvTo : KeyStr := BuildCodeIndex(KeyStr);
        end;{case}
      end;{with}
    end;

    plGLCode : begin
      with (ID as IGeneralLedger) do begin
        case IndexNo of
          glIdxCode : KeyStr := BuildCodeIndex(StrToIndexInt(KeyStr));
          glIdxName : KeyStr := BuildNameIndex(KeyStr);
        end;{case}
      end;{with}
    end;
  end;{case}
end;
*)
procedure TfrmTKPickList.SelectRecord(Sender: TObject; SelectType:
TSelectType; Address: integer; ID: IDispatch);
begin
  btnOK.Enabled := TRUE;
{  with (ID as IAccount) do begin
    lCode.caption := acCode;
    lDesc.caption := acCompany;
  end;{with}
end;

procedure TfrmTKPickList.btnOKClick(Sender: TObject);
begin
  ModalResult := mrOK;
end;
{
procedure TfrmPickList.mlListSortColumn(Sender: TObject;
  ColIndex: Integer; SortAsc: Boolean);
begin
  ctkDataSet.SearchIndex := ColIndex;
  ctkDataSet.SearchDataType := mlList.Columns[ColIndex].DataType;
end;
}
procedure TfrmTKPickList.FormShow(Sender: TObject);
begin
  bRestore := FALSE;
  case plType of
    plSupplier : begin
      Caption := 'Pick a Supplier';
      ctkDataSet.ToolkitObject := oLToolkit.supplier as IBtrieveFunctions2;
    end;

    plLocation : begin
      Caption := 'Pick a Location';
      ctkDataSet.ToolkitObject := oLToolkit.Location as IBtrieveFunctions2;
    end;

    plCustomer : begin
      Caption := 'Pick a Customer';
      ctkDataSet.ToolkitObject := oLToolkit.customer as IBtrieveFunctions2;
    end;

    plGLCode : begin
      Caption := 'Pick a GL Code';
      ctkDataSet.ToolkitObject := oLToolkit.GeneralLedger as IBtrieveFunctions2;
    end;

    plCC : begin
      Caption := 'Pick a Cost Centre';
      ctkDataSet.ToolkitObject := oLToolkit.CostCentre as IBtrieveFunctions2;
    end;

    plDept : begin
      Caption := 'Pick a Department';
      ctkDataSet.ToolkitObject := oLToolkit.Department as IBtrieveFunctions2;
    end;

    plProduct, plProductInAGroup : begin
      if plType = plProduct then Caption := 'Pick a Product'
      else Caption := 'Pick a Product from ' + sParentCode;
      ctkDataSet.ToolkitObject := oLToolkit.Stock as IBtrieveFunctions2;
      mlList.DesignColumns[0].IndexNo := 0;
      mlList.DesignColumns[1].IndexNo := 3;
{      mlList.DesignColumns[0].IndexNo := 1;
      mlList.DesignColumns[1].Searchable := FALSE;
      mlList.DesignColumns[1].Sortable := FALSE;}
    end;

    plProductGroup : begin
      Caption := 'Pick a Product Group';
      ctkDataSet.ToolkitObject := oLToolkit.Stock as IBtrieveFunctions2;
      mlList.DesignColumns[0].IndexNo := 0;
      mlList.DesignColumns[1].IndexNo := 3;
    end;

    plProductAndGroup : begin
      Caption := 'Pick a Product / Group';
      ctkDataSet.ToolkitObject := oLToolkit.Stock as IBtrieveFunctions2;
      mlList.DesignColumns[0].IndexNo := 0;
      mlList.DesignColumns[1].IndexNo := 3;
{      mlList.DesignColumns[0].IndexNo := 1;
      mlList.DesignColumns[1].Searchable := FALSE;
      mlList.DesignColumns[1].Sortable := FALSE;}
    end;

    plCustSalesAnalysis : begin
      Caption := 'Pick a Product';
      ctkDataSet.ToolkitObject := (oLToolkit.Customer as IAccount2).acSalesAnalysis as IBtrieveFunctions2;
      mlList.DesignColumns[0].IndexNo := 0;
      mlList.DesignColumns[1].Searchable := TRUE;
      mlList.DesignColumns[1].Sortable := TRUE;
      btnShowAll.Visible := TRUE;
    end;
  end;{case}

  if Assigned(Sender) then begin
    mlList.Dataset := ctkDataSet;
    mlList.SearchColumn(iSearchCol, TRUE, sFind);
  end;{if}
end;

procedure TfrmTKPickList.mlListAfterInit(Sender: TObject);
begin
//  mlList.SortColumn(0, TRUE);
//  mlList.SearchColumn(iSearchCol, TRUE, sFind);
end;

procedure TfrmTKPickList.mlListRowDblClick(Sender: TObject;
  RowIndex: Integer);
begin
  btnOKClick(btnOK);
end;

procedure TfrmTKPickList.mlListAfterLoad(Sender: TObject);
begin
// showmessage('mlListAfterLoad');
end;

procedure TfrmTKPickList.mlListBeforeLoad(Sender: TObject;
  var Allow: Boolean);
begin
//  showmessage('mlListBeforeLoad');
end;

procedure TfrmTKPickList.mlListScrollButtonKeyPress(Key: Char);
begin
  Case Ord(Key) of
    27 : ModalResult := mrCancel; //ESC
  end;{case}
end;

procedure TfrmTKPickList.ctkDataSetFilterRecord(Sender: TObject;
  ID: IDispatch; var Include: Boolean);
begin

// Include := TRUE;

  case plType of
    plLocation, plCC, plDept, plSupplier, plCustomer : Include := TRUE;

    plGLCode : begin
      with (ID as IGeneralLedger) do begin
        Include := glType in [glTypeProfitLoss, glTypeBalanceSheet];
      end;{with}
    end;

    plProduct : begin
      with (ID as IStock) do begin
        Include := stType in [stTypeProduct, stTypeDescription, stTypeBillOfMaterials];
      end;{with}
    end;

    plProductGroup : begin
      with (ID as IStock) do begin
        Include := stType = stTypeGroup;
      end;{with}
    end;

    plProductAndGroup : begin
      with (ID as IStock) do begin
        Include := stType in [stTypeGroup, stTypeProduct, stTypeDescription, stTypeBillOfMaterials];
      end;{with}
    end;

    plProductInAGroup : begin
      with (ID as IStock) do begin
        Include := (stType in [stTypeProduct, stTypeDescription, stTypeBillOfMaterials])
        and (Trim(stParentCode) = Trim(sParentCode));
      end;{with}
    end;
  end;{case}
end;

procedure TfrmTKPickList.WMGetMinMaxInfo(var Message: TWMGetMinMaxInfo);
begin
  With Message.MinMaxInfo^ Do Begin
    ptMinTrackSize.X:=193;
    ptMinTrackSize.Y:=204;
  End; { With Message }
end;


procedure TfrmTKPickList.Properties1Click(Sender: TObject);
begin
  case oSettings.Edit(mlList, Self.Name, nil) of
    mrRestoreDefaults : begin
      oSettings.RestoreListDefaults(mlList, Self.Name);
      oSettings.RestoreFormDefaults(Self.Name);
      bRestore := TRUE;
    end;
  end;{case}
end;

procedure TfrmTKPickList.LoadAllSettings;
begin
  oSettings.LoadForm(Self);
  oSettings.LoadList(mlList, Self.Name);
end;

procedure TfrmTKPickList.SaveAllSettings;
begin
  oSettings.SaveList(mlList, Self.Name);
  if SaveCoordinates1.Checked then oSettings.SaveForm(Self);
end;

procedure TfrmTKPickList.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  if not bRestore then SaveAllSettings;
end;

function TfrmTKPickList.GetStockDescFromCode(sStockCode : string) : string;
begin
  Result := '';
  with oLToolkit.Stock do begin
    Index := stIdxCode;
    if GetEqual(BuildCodeIndex(sStockCode)) = 0
    then Result := stDesc[1];
  end;{with}
end;

constructor TfrmTKPickList.CreateWith(Sender: TComponent; AToolkit: IToolkit);
begin
  if Assigned(AToolkit) then begin
    inherited create(sender);
    oLToolkit := AToolkit;
    LoadAllSettings;
  end;{if}
end;

procedure TfrmTKPickList.btnShowAllClick(Sender: TObject);
begin
  if btnShowAll.caption = '&Show All' then
  begin
    // Show All
    plType := plProduct;
    btnShowAll.caption := '&Sales Analysis';
  end else
  begin
   // Sales Analysis
    plType := plCustSalesAnalysis;
    btnShowAll.caption := '&Show All';
  end;
  FormShow(nil);
  mlList.RefreshDB;
end;

procedure TfrmTKPickList.FormResize(Sender: TObject);
begin
  panList.Width := ClientWidth - 16;
  panList.Height := ClientHeight- 44;

  btnShowAll.Top := ClientHeight- 29;
  btnOK.Top := btnShowAll.Top;
  btnCancel.Top := btnShowAll.Top;

  btnOK.Left := ClientWidth - 177;
  btnCancel.Left := ClientWidth - 89;
end;

end.
