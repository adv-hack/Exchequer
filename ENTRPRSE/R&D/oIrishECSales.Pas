unit oIrishECSales;

interface

Uses Classes, StrUtils, SysUtils, GlobVar, ETMiscU;

Type
  Str6  = String[6];
  Str35 = String[35];
  Str60 = String[60];

  //------------------------------

  // Generic interface for objects which implement a specific import type
  IIrishXMLVIESLineDetails = Interface
    ['{37D71D8F-1767-474B-B594-20B07D950770}']
    // --- Internal Methods to implement Public Properties ---
    Function GetCustomerNumber : Str30;
    Procedure SetCustomerNumber (Value : Str30);
    Function GetTriang : Boolean;
    Procedure SetTriang (Value : Boolean);
    Function GetValSupplies : Double;
    Procedure SetValSupplies (Value : Double);
    Function GetServices : Boolean;
    Procedure SetServices (Value : Boolean);

    // ------------------ Public Properties ------------------
    // Generic interface for objects which implement a specific import type
    Property CustomerNumber : Str30 Read GetCustomerNumber Write SetCustomerNumber;
    Property Triang : Boolean Read GetTriang Write SetTriang;  // Default = False
    Property ValSupplies : Double Read GetValSupplies Write SetValSupplies;
    //PR: 19/02/2014 ABSEXCH-15042
    Property Services : Boolean Read GetServices Write SetServices;  // Default = False

    // ------------------- Public Methods --------------------

    // Used to save a new item into the Items array once the fields are set
    Procedure Save;
  End; // IIrishXMLVIESLineDetails

  //------------------------------

  // Iris Intrastat XML Interface - IStat Element (Root)
  IIrishXMLVIES = Interface
    ['{CE501683-2D63-4A18-99A9-AFC1B6227027}']
    // --- Internal Methods to implement Public Properties ---
    // IStat Attributes
    Function GetFormVersion : Char;
    Procedure SetFormVersion (Value : Char);
    Function GetLanguage : Char;
    Procedure SetLanguage (Value : Char);
    Function GetPeriodStart : LongDate;
    Procedure SetPeriodStart (Value : LongDate);
    Function GetPeriodEnd : LongDate;
    Procedure SetPeriodEnd (Value : LongDate);

    // Header Element
    Function GetNilReturn : Boolean;
    Procedure SetNilReturn (Value : Boolean);
    Function GetPeriod : Str255;
    Procedure SetPeriod (Value : Str255);
    Function GetReturnType : Str255;
    Procedure SetReturnType (Value : Str255);
    Function GetThirdParty : Boolean;
    Procedure SetThirdParty (Value : Boolean);
    Function GetTraderNumber : Str30;
    Procedure SetTraderNumber (Value : Str30);

    // Item Element Array
    Function GetItemCount : LongInt;
    Function GetItems (Index : LongInt) : IIrishXMLVIESLineDetails;

    // Error message generated by SaveToFile
    Function GetLastError : ShortString;

    // ------------------ Public Properties ------------------
    // ViewsFile Attributes
    Property FormVersion : Char Read GetFormVersion Write SetFormVersion;  // Default = '1'
    Property Language : Char Read GetLanguage Write SetLanguage;   // Default = 'E'
    Property PeriodStart : LongDate Read GetPeriodStart Write SetPeriodStart;  // YYYYMMDD
    Property PeriodEnd : LongDate Read GetPeriodEnd Write SetPeriodEnd; // YYYYMMDD

    // Header Element
    Property NilReturn : Boolean Read GetNilReturn;  // Read-Only - Default = True, updated automatically when IIrishXMLVIESLineDetails added
    Property Period : Str255 Read GetPeriod Write SetPeriod;
    Property ReturnType : Str255 Read GetReturnType Write SetReturnType;
    Property ThirdParty : Boolean Read GetThirdParty Write SetThirdParty;  // Default = False
    Property TraderNumber : Str30 Read GetTraderNumber Write SetTraderNumber;

    // Item Element Array
    Property ItemCount : LongInt Read GetItemCount;
    Property Items [Index : LongInt] : IIrishXMLVIESLineDetails Read GetItems;

    // Error message generated by SaveToFile
    Property LastError : ShortString Read GetLastError;

    // ------------------- Public Methods --------------------
    // Returns a new IIXIItem for population and saving
    Function NewItem : IIrishXMLVIESLineDetails;

    // Save to XML file - 0 = AOK, anything else is BAD
    Function SaveToFile (Const Filename : ShortString) : LongInt;
  End; // IIrishXMLVIES


// Call this function to get a new instance of an IIrishXMLVIES object
Function NewIrisXMLVIESIntf : IIrishXMLVIES;


implementation

Uses GmXML;

Type
  TIrishXMLVIES = Class;

  //------------------------------

  // Generic interface for objects which implement a specific import type
  IIXILineDetailsInternal = Interface
    ['{720DEE3A-E3F9-430E-BE26-A0F82D972BE0}']
    // --- Internal Methods to implement Public Properties ---
    // ------------------ Public Properties ------------------
    // ------------------- Public Methods --------------------
    Procedure WriteElement (Const oIStatNode : TGmXmlNode);
  End; // IIXILineDetailsInternal

  //------------------------------

  TIrishXMLLineDetails = Class(TInterfacedObject, IIrishXMLVIESLineDetails, IIXILineDetailsInternal)
  Private
    FIrishXMLVIES : TIrishXMLVIES;
    FCustomerNumber : Str30;
    FTriang : Boolean;
    FServices : Boolean; //PR: 19/02/2014 ABSEXCH-15042
    FValSupplies : Double;

    // IIrishXMLVIESLineDetails
    Function GetCustomerNumber : Str30;
    Procedure SetCustomerNumber (Value : Str30);
    Function GetTriang : Boolean;
    Procedure SetTriang (Value : Boolean);

    //PR: 19/02/2014 ABSEXCH-15042
    Function GetServices : Boolean;
    Procedure SetServices (Value : Boolean);

    Function GetValSupplies : Double;
    Procedure SetValSupplies (Value : Double);
    // Used to save a new item into the Items array once the fields are set
    Procedure Save;

    // IIXILineDetailsInternal
    Procedure WriteElement (Const oViesNode : TGmXmlNode);
  Public
    Constructor Create (Const IrishXMLVIES : TIrishXMLVIES);
    Destructor Destroy; Override;
  End; // TIrishXMLLineDetails


  //------------------------------

  TIrishXMLVIES = Class(TInterfacedObject, IIrishXMLVIES)
  Private
    FFormVersion : Char;
    FLanguage : Char;
    FPeriodStart : LongDate;
    FPeriodEnd : LongDate;

    FNilReturn : Boolean;
    FPeriod : Str255;
    FReturnType : Str255;
    FThirdParty : Boolean;
    FTraderNumber : Str30;
    FItems : TInterfaceList;
    FLastError : ShortString;

    // IStat Attributes
    Function GetFormVersion : Char;
    Procedure SetFormVersion (Value : Char);
    Function GetLanguage : Char;
    Procedure SetLanguage (Value : Char);
    Function GetPeriodStart : LongDate;
    Procedure SetPeriodStart (Value : LongDate);
    Function GetPeriodEnd : LongDate;
    Procedure SetPeriodEnd (Value : LongDate);

    // Header Element
    Function GetNilReturn : Boolean;
    Procedure SetNilReturn (Value : Boolean);
    Function GetPeriod : Str255;
    Procedure SetPeriod (Value : Str255);
    Function GetReturnType : Str255;
    Procedure SetReturnType (Value : Str255);
    Function GetThirdParty : Boolean;
    Procedure SetThirdParty (Value : Boolean);
    Function GetTraderNumber : Str30;
    Procedure SetTraderNumber (Value : Str30);

    // Item Element Array
    Function GetItemCount : LongInt;
    Function GetItems (Index : LongInt) : IIrishXMLVIESLineDetails;

    // Error message generated by SaveToFile
    Function GetLastError : ShortString;

    // Returns a new IIXIItem for population and saving
    Function NewItem : IIrishXMLVIESLineDetails;

    // Save to XML file - 0 = AOK, anything else is BAD
    Function SaveToFile (Const Filename : ShortString) : LongInt;

    // Internal Methods
    Procedure WriteVIESAtts (Const oViesNode : TGmXmlNode);
    Procedure WriteHeaderElement (Const oViesNode : TGmXmlNode);
  Public
    Constructor Create;
    Destructor Destroy; Override;

    // Called from IIXIItem.Save to add itself into the items list
    Procedure SaveItem (Const Item : TIrishXMLLineDetails);
  End; // TIrishXMLVIES

//=========================================================================

// Call this function to get a new instance of an IIrishXMLIntrastat object
Function NewIrisXMLVIESIntf : IIrishXMLVIES;
Begin // NewIrisXMLVIESIntf
  Result := TIrishXMLVIES.Create;
End; // NewIrisXMLVIESIntf

//=========================================================================

Constructor TIrishXMLLineDetails.Create (Const IrishXMLVIES : TIrishXMLVIES);
Begin // Create
  Inherited Create;

  FIrishXMLVIES := IrishXMLVIES;

  FCustomerNumber := '';
  FTriang := False;

  //PR: 19/02/2014 ABSEXCH-15042
  FServices := False;
  FValSupplies := 0.0;
End; // Create

//------------------------------

Destructor TIrishXMLLineDetails.Destroy;
Begin // Destroy
  FIrishXMLVIES := NIL; // NOTE: Do not destroy object reference - handled elsewhere
  Inherited Destroy;
End; // Destroy

//-------------------------------------------------------------------------

Function TIrishXMLLineDetails.GetCustomerNumber : Str30;
Begin // GetCustomerNumber
  Result := FCustomerNumber;
End; // GetCustomerNumber
Procedure TIrishXMLLineDetails.SetCustomerNumber (Value : Str30);
Begin // SetCustomerNumber
  FCustomerNumber := Value;
End; // SetCustomerNumber

//------------------------------

Function TIrishXMLLineDetails.GetTriang : Boolean;
Begin // GetTriang
  Result := FTriang;
End; // GetTriang
Procedure TIrishXMLLineDetails.SetTriang (Value : Boolean);
Begin // SetTriang
  FTriang := Value;
End; // SetTriang

//------------------------------
//PR: 19/02/2014 ABSEXCH-15042
Function TIrishXMLLineDetails.GetServices : Boolean;
Begin // GetServices
  Result := FServices;
End; // GetServices
Procedure TIrishXMLLineDetails.SetServices (Value : Boolean);
Begin // SetServices
  FServices := Value;
End; // SetServices

//------------------------------

Function TIrishXMLLineDetails.GetValSupplies : Double;
Begin // GetValSupplies
  Result := FValSupplies;
End; // GetValSupplies
Procedure TIrishXMLLineDetails.SetValSupplies (Value : Double);
Begin // SetValSupplies
  FValSupplies := Value;
End; // SetValSupplies

//-------------------------------------------------------------------------

// Used to save a new item into the Items array once the fields are set
Procedure TIrishXMLLineDetails.Save;
Begin // Save
  FIrishXMLVIES.SaveItem (Self);
End; // Save


//-------------------------------------------------------------------------

Procedure TIrishXMLLineDetails.WriteElement (Const oViesNode : TGmXmlNode);
Begin // WriteElement
  With oViesNode.Children.AddOpenTag('LineItemDetails') Do
  Begin
    // Item Details
    With oViesNode.Children.AddOpenTag('Details') Do
    Begin
      Attributes.AddAttribute ('custnumber', FCustomerNumber);
      Attributes.AddAttribute ('valsupplies', Format('%0.0f', [Round_Up(FValSupplies,0)]));
      Attributes.AddAttribute ('triang', IfThen(FTriang, 'true', 'false'));
      //PR: 19/02/2014 ABSEXCH-15042 Add Services attribute
      Attributes.AddAttribute ('services', IfThen(FServices, 'true', 'false'));
    End; // With oIStatNode.Children.AddOpenTag('Details')
    oViesNode.Children.AddCloseTag;
  End; // With oViesNode.Children.AddOpenTag('LineItemDetails')
  oViesNode.Children.AddCloseTag;
End; // WriteElement

//=========================================================================

Constructor TIrishXMLVIES.Create;
Begin // Create
  Inherited Create;

  FFormVersion := '1';
  FLanguage := 'E';
  FPeriodStart := '';
  FPeriodEnd := '';

  FNilReturn := True;
  FPeriod := '';
  FReturnType := '';
  FThirdParty := False;
  FTraderNumber := '';

  FItems := TInterfaceList.Create;
  FLastError := '';
End; // Create

//------------------------------

Destructor TIrishXMLVIES.Destroy;
Begin // Destroy
  FItems.Clear;
  FItems.Free;

  Inherited Destroy;
End; // Destroy

//-------------------------------------------------------------------------

Function TIrishXMLVIES.GetFormVersion : Char;
Begin // GetFormVersion
  Result := FFormVersion;
End; // GetFormVersion
Procedure TIrishXMLVIES.SetFormVersion (Value : Char);
Begin // SetFormVersion
  FFormVersion := Value;
End; // SetFormVersion

//------------------------------

Function TIrishXMLVIES.GetLanguage : Char;
Begin // GetLanguage
  Result := FLanguage;
End; // GetLanguage
Procedure TIrishXMLVIES.SetLanguage (Value : Char);
Begin // SetLanguage
  FLanguage := Value;
End; // SetLanguage

//------------------------------

Function TIrishXMLVIES.GetPeriodStart : LongDate;
Begin // GetPeriodStart
  Result := FPeriodStart;
End; // GetPeriodStart
Procedure TIrishXMLVIES.SetPeriodStart (Value : LongDate);
Begin // SetPeriodStart
  FPeriodStart := Value;
End; // SetPeriodStart

//------------------------------

Function TIrishXMLVIES.GetPeriodEnd : LongDate;
Begin // GetPeriodEnd
  Result := FPeriodEnd;
End; // GetPeriodEnd
Procedure TIrishXMLVIES.SetPeriodEnd (Value : LongDate);
Begin // SetPeriodEnd
  FPeriodEnd := Value;
End; // SetPeriodEnd

//------------------------------

// Header Element
Function TIrishXMLVIES.GetNilReturn : Boolean;
Begin // GetNilReturn
  Result := FNilReturn;
End; // GetNilReturn
Procedure TIrishXMLVIES.SetNilReturn (Value : Boolean);
Begin // SetNilReturn
  FNilReturn := Value;
End; // SetNilReturn

//------------------------------

Function TIrishXMLVIES.GetPeriod : Str255;
Begin // GetPeriod
  Result := FPeriod;
End; // GetPeriod
Procedure TIrishXMLVIES.SetPeriod (Value : Str255);
Begin // SetPeriod
  FPeriod := Value;
End; // SetPeriod

//------------------------------

Function TIrishXMLVIES.GetReturnType : Str255;
Begin // GetReturnType
  Result := FReturnType;
End; // GetReturnType
Procedure TIrishXMLVIES.SetReturnType (Value : Str255);
Begin // SetReturnTyp
  FReturnType := Value;
End; // SetReturnTyp

//------------------------------

Function TIrishXMLVIES.GetThirdParty : Boolean;
Begin // GetThirdParty
  Result := FThirdParty;
End; // GetThirdParty
Procedure TIrishXMLVIES.SetThirdParty (Value : Boolean);
Begin // SetThirdParty
  FThirdParty := Value;
End; // SetThirdParty

//------------------------------

Function TIrishXMLVIES.GetTraderNumber : Str30;
Begin // GetTraderNumber
  Result := FTraderNumber
End; // GetTraderNumber
Procedure TIrishXMLVIES.SetTraderNumber (Value : Str30);
Begin // SetTraderNumber
  FTraderNumber := Value;
End; // SetTraderNumber

//------------------------------

// Item Element Array
Function TIrishXMLVIES.GetItemCount : LongInt;
Begin // GetItemCount
  Result := FItems.Count;
End; // GetItemCount
Function TIrishXMLVIES.GetItems (Index : LongInt) : IIrishXMLVIESLineDetails;
Begin // GetItems
  If (Index >= 0) And (Index < FItems.Count) Then
    Result := FItems.Items[Index] As IIrishXMLVIESLineDetails
  Else
    Raise Exception.Create ('TIrishXMLVIES.GetItems: Invalid Index (' + IntToStr(Index) + ')');
End; // GetItems

//------------------------------

// Error message generated by SaveToFile
Function TIrishXMLVIES.GetLastError : ShortString;
Begin // GetLastError
  Result := FLastError;
End; // GetLastError

//-------------------------------------------------------------------------

// Returns a new IIXIItem for population and saving
Function TIrishXMLVIES.NewItem : IIrishXMLVIESLineDetails;
Begin // NewItem
  Result := TIrishXMLLineDetails.Create (Self);
End; // NewItem

//-------------------------------------------------------------------------

// Called from IIXIItem.Save to add itself into the items list
Procedure TIrishXMLVIES.SaveItem (Const Item : TIrishXMLLineDetails);
Begin // SaveItem
  FNilReturn := False;
  FItems.Add(Item);
End; // SaveItem

//-------------------------------------------------------------------------

Procedure TIrishXMLVIES.WriteVIESAtts (Const oViesNode : TGmXmlNode);

  // Reformats InDate (YYYYMMDD) to DD/MM/YYYY
  Function FormatDate (Const InDate : LongDate) : ShortString;
  Begin // FormatDate
    If (InDate <> '') Then
      Result := Copy(InDate, 7, 2) + '/' + Copy(InDate, 5, 2) + '/' + Copy(InDate, 1, 4)
    Else
      Result := '';
  End; // FormatDate

Begin // WriteIStatAtts
  oViesNode.Attributes.AddAttribute ('formversion', FFormVersion);
  oViesNode.Attributes.AddAttribute ('periodstart', FormatDate (FPeriodStart));
  oViesNode.Attributes.AddAttribute ('periodend', FormatDate (FPeriodEnd));
  oViesNode.Attributes.AddAttribute ('language', FLanguage);
End; // WriteIStatAtts

//------------------------------

Procedure TIrishXMLVIES.WriteHeaderElement (Const oViesNode : TGmXmlNode);
Begin // WriteHeaderElement
  With oViesNode.Children.AddOpenTag('HeaderDetails') Do
  Begin
    With oViesNode.Children.AddOpenTag('Header') Do
    Begin
      Attributes.AddAttribute ('thirdparty', IfThen(FThirdParty, 'true', 'false'));
      Attributes.AddAttribute ('tradernumber', FTraderNumber);
      //Attributes.AddAttribute ('declarnumber', );
      Attributes.AddAttribute ('returntype', FReturnType);
      Attributes.AddAttribute ('period', FPeriod);
      Attributes.AddAttribute ('nilreturn', IfThen(FNilReturn, 'true', 'false'));
    End; // With oViesNode.Children.AddOpenTag('Header')
    oViesNode.Children.AddCloseTag;
  End; // With oViesNode.Children.AddOpenTag('Header')
  oViesNode.Children.AddCloseTag;
End; // WriteHeaderElement

//------------------------------

// Save to XML file - 0 = AOK, anything else is BAD
//
//  -1   Unhandled Exception - see LastError
//   0   AOK
//   1   File already exists
//
Function TIrishXMLVIES.SaveToFile (Const Filename : ShortString) : LongInt;
Var
  oXML : TGmXML;
  oVies : TGmXmlNode;
  iItem : SmallInt;
Begin // SaveToFile
  Try
    If (Not FileExists(Filename)) Then
    Begin
      oXML := TGmXML.Create(nil);
      Try
        oXML.Encoding := 'UTF-8';

        // IStat Attributes
        oVies := oXML.Nodes.AddOpenTag('ViesFile');
        WriteVIESAtts (oVies);

        // Header Element
        WriteHeaderElement (oVies);

        // Items
        For iItem := 0 To (FItems.Count - 1) Do
          (FItems[iItem] As IIXILineDetailsInternal).WriteElement(oVies);

        // Close IStat element
        oXML.Nodes.AddCloseTag;

        oXML.SaveToFile(FileName);

        Result := 0;
        FLastError := '';
      Finally
        oXML.Free;
      End; // Try..Finally
    End // If (Not FileExists(Filename))
    Else
    Begin
      Result := 1;
      FLastError := 'Destination File ' + QuotedStr(FileName) + ' already exists';
    End; // Else
  Except
    On E:Exception Do
    Begin
      FLastError := 'Unhandled Exception - ' + E.Message;
      Result := -1;
    End;
  End; // Try..Except
End; // SaveToFile

//=========================================================================

end.
