using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CSH.Exchequer.Bespoke.Extensions.Primitives;
using Enterprise04;

namespace CSH.Exchequer.Bespoke.Exceptions
{
    /// <summary>
    /// Represents an error generated by Exchequer, includes affordances for return codes and retrieving toolkit last error string
    /// </summary>
    [Serializable]
    public sealed class ExchequerException : Exception
    {
        /// <summary>
        /// Gets the return code.
        /// </summary>
        public int? ReturnCode { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchequerException"/> class.
        /// </summary>
        public ExchequerException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchequerException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public ExchequerException(string message)
            : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchequerException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        public ExchequerException(string message, Exception innerException)
            : base(message, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchequerException"/> class.
        /// </summary>
        /// <param name="returnCode">The return code.</param>
        /// <param name="toolkit">The toolkit.</param>
        public ExchequerException(int returnCode, IToolkit toolkit)
            : base(toolkit.LastErrorString.NullToString())
        {
            this.ReturnCode = returnCode;
        }

        /// <summary>
        /// When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        /// <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
        ///   
        /// <PermissionSet>
        ///   <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
        ///   <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
        ///   </PermissionSet>
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);
        }

        /// <summary>
        /// Returns a <see cref="System.String"/> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this instance.
        /// </returns>
        /// <PermissionSet>
        ///   <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
        ///   </PermissionSet>
        public override string ToString()
        {
            string result = "";
            if (this.ReturnCode.HasValue)
            {
                result = this.ReturnCode.Value.ToString() + " : ";
            }

            result += base.ToString();
            return result;
        }
    }
}
