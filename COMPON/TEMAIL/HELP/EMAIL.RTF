{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn{\*\falt Times New Roman};}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv{\*\falt Arial};}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York{\*\falt Times New Roman};}{\f13\fswiss\fcharset0\fprq2 Geneva{\*\falt Arial};}{\f14\froman\fcharset0\fprq2 Bookman;}
{\f15\fdecor\fcharset2\fprq2 ZapfDingbats;}{\f16\froman\fcharset0\fprq2 Palatino;}{\f17\fswiss\fcharset0\fprq2 AvantGarde;}{\f18\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f19\froman\fcharset0\fprq2 NewCenturySchlbk;}
{\f20\froman\fcharset0\fprq2 ZapfChancery;}{\f21\fnil\fcharset2\fprq2 Marlett;}{\f22\fmodern\fcharset0\fprq1 Lucida Console;}{\f23\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f24\fnil\fcharset2\fprq2 Wingdings;}
{\f25\fscript\fcharset0\fprq2 Comic Sans MS;}{\f26\fswiss\fcharset0\fprq2 Verdana;}{\f27\froman\fcharset2\fprq2 Webdings;}{\f28\froman\fcharset2\fprq2 MT Extra;}{\f29\fswiss\fcharset0\fprq2 Arial Narrow;}{\f30\fswiss\fcharset0\fprq2 Arial Black;}
{\f31\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f32\froman\fcharset0\fprq2 Book Antiqua;}{\f33\froman\fcharset0\fprq2 Bookman Old Style;}{\f34\fswiss\fcharset0\fprq2 Century Gothic;}{\f35\froman\fcharset0\fprq2 Century Schoolbook;}
{\f36\froman\fcharset0\fprq2 Century Schoolbook BOLDITALIC;}{\f37\froman\fcharset0\fprq2 Map Symbols;}{\f38\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f39\fdecor\fcharset0\fprq2 Algerian;}{\f40\fdecor\fcharset0\fprq2 Braggadocio;}
{\f41\fswiss\fcharset0\fprq2 Britannic Bold;}{\f42\fscript\fcharset0\fprq2 Brush Script MT;}{\f43\fdecor\fcharset0\fprq2 Colonna MT;}{\f44\fdecor\fcharset0\fprq2 Desdemona;}{\f45\froman\fcharset0\fprq2 Footlight MT Light;}
{\f46\froman\fcharset0\fprq2 Garamond;}{\f47\fnil\fcharset0\fprq2 Garamond Medium;}{\f48\fnil\fcharset0\fprq2 Garamond Roman;}{\f49\fnil\fcharset0\fprq2 Garamond Roman Italic;}{\f50\fswiss\fcharset0\fprq2 Impact;}{\f51\fdecor\fcharset0\fprq2 Kino MT;}
{\f52\froman\fcharset0\fprq2 Wide Latin;}{\f53\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f54\fdecor\fcharset0\fprq2 Playbill;}{\f55\fmodern\fcharset2\fprq1 MS LineDraw;}{\f56\fnil\fcharset0\fprq2 Balloon;}{\f57\fnil\fcharset0\fprq2 Bodoni-DTC;}
{\f58\froman\fcharset0\fprq2 Cheltenhm BT;}{\f59\fscript\fcharset0\fprq2 CommercialScript BT;}{\f60\fnil\fcharset0\fprq2 Copperplate;}{\f61\fnil\fcharset0\fprq2 Dom Casual;}{\f62\froman\fcharset0\fprq2 Dutch 801 SWA;}
{\f63\fnil\fcharset0\fprq2 Fette Engschrift;}{\f64\fswiss\fcharset0\fprq2 Franklin Cond. Gothic;}{\f65\fswiss\fcharset0\fprq2 Franklin Extra Cond. Gothic;}{\f66\fswiss\fcharset0\fprq2 Franklin Gothic;}{\f67\fswiss\fcharset0\fprq2 Futura BdCn BT;}
{\f68\fswiss\fcharset0\fprq2 Futura XBlk BT;}{\f69\fswiss\fcharset0\fprq2 Futura XBlkIt BT;}{\f70\fswiss\fcharset0\fprq2 Futura XBlkCn BT;}{\f71\fswiss\fcharset0\fprq2 Futura XBlkCnIt BT;}{\f72\fswiss\fcharset0\fprq2 Futura MdCn BT;}
{\f73\fswiss\fcharset0\fprq2 Garrison Cond. Sans;}{\f74\fswiss\fcharset0\fprq2 Garrison ExtraBold Sans;}{\f75\fswiss\fcharset0\fprq2 Garrison ExtraCond. Sans;}{\f76\fswiss\fcharset0\fprq2 Garrison Light Sans;}{\f77\fswiss\fcharset0\fprq2 Garrison Sans;}
{\f78\fswiss\fcharset0\fprq2 Geometr415 Md BT;}{\f79\froman\fcharset0\fprq2 Goudy Old Style;}{\f80\froman\fcharset0\fprq2 ItalianGarmnd BT;}{\f81\fdecor\fcharset0\fprq2 Kauflinn;}{\f82\fnil\fcharset0\fprq2 Marriage;}
{\f83\fnil\fcharset0\fprq2 Mural Script;}{\f84\fnil\fcharset0\fprq2 Optimum;}{\f85\froman\fcharset0\fprq2 PosterBodoni BT;}{\f86\froman\fcharset0\fprq2 PosterBodoni It BT;}{\f87\fnil\fcharset0\fprq2 Serpentine;}
{\f88\froman\fcharset0\fprq2 Schadow BlkCn BT;}{\f89\fscript\fcharset0\fprq2 Staccato222 BT;}{\f90\fscript\fcharset0\fprq2 Staccato555 BT;}{\f91\fswiss\fcharset0\fprq2 Swis721 Blk BT;}{\f92\fswiss\fcharset0\fprq2 Swis721 Lt BT;}
{\f93\fswiss\fcharset0\fprq2 Swiss 721 Narrow SWA;}{\f94\fswiss\fcharset0\fprq2 Swiss 721 SWA;}{\f95\fdecor\fcharset0\fprq2 VAG Round;}{\f96\froman\fcharset0\fprq2 Village Square;}{\f97\fdecor\fcharset0\fprq2 Vivante-DTC;}
{\f98\fdecor\fcharset0\fprq2 Windsor;}{\f99\froman\fcharset0\fprq2 Zapf Calligraphic 801 SWA;}{\f100\froman\fcharset255\fprq2 Roman;}{\f101\fscript\fcharset255\fprq2 Script;}{\f102\fmodern\fcharset255\fprq2 Modern;}
{\f103\fswiss\fcharset0\fprq1 MS Dialog;}{\f104\fmodern\fcharset0\fprq1 Money OCR A;}{\f105\fswiss\fcharset0\fprq2 Tahoma;}{\f106\fnil\fcharset0\fprq2 Fences;}{\f107\fswiss\fcharset0\fprq2 Arial Super;}
{\f108\fscript\fcharset238\fprq2 Benguiat Frisky ATT;}{\f109\froman\fcharset238\fprq2 Poster Bodoni ATT;}{\f110\fswiss\fcharset238\fprq2 Gill Sans MT Shadow;}{\f111\froman\fcharset238\fprq2 Goudy Old Style ATT;}
{\f112\fscript\fcharset238\fprq2 Graphite Light ATT;}{\f113\fscript\fcharset238\fprq2 Graphite Light Narrow ATT;}{\f114\fscript\fcharset238\fprq2 Lucida Casual;}{\f115\fnil\fcharset2\fprq2 Milestones;}{\f116\fscript\fcharset238\fprq2 Phyllis ATT;}
{\f117\fscript\fcharset238\fprq2 Signet Roundhand ATT;}{\f118\froman\fcharset2\fprq2 Wingdings 3;}{\f119\fswiss\fcharset0\fprq2 Copperplate Gothic Bold;}{\f120\fswiss\fcharset0\fprq2 Copperplate Gothic Light;}{\f121\fdecor\fcharset0\fprq2 Flexure;}
{\f122\froman\fcharset0\fprq2 Goudy Stout;}{\f123\fdecor\fcharset0\fprq2 Harrington;}{\f124\fdecor\fcharset0\fprq2 Imprint MT Shadow;}{\f125\fscript\fcharset0\fprq2 Lucida Calligraphy;}{\f126\fscript\fcharset0\fprq2 Lucida Handwriting;}
{\f127\froman\fcharset0\fprq2 Rockwell;}{\f128\froman\fcharset0\fprq2 Rockwell Condensed;}{\f129\froman\fcharset0\fprq2 Rockwell Extra Bold;}{\f130\fswiss\fcharset0\fprq2 Maiandra GD;}{\f131\fnil\fcharset0\fprq2 Rockwell Condensed Bold;}
{\f132\froman\fcharset2\fprq2 Wingdings 2;}{\f133\fmodern\fcharset2\fprq1 FoxPrint;}{\f134\fnil\fcharset0\fprq2 barcod39;}{\f135\froman\fcharset0\fprq2 ITC Bookman;}{\f136\fnil\fcharset2\fprq2 Monotype Sorts{\*\falt ZapfDingbats};}
{\f137\fnil\fcharset2\fprq2 MS Outlook;}{\f138\froman\fcharset2\fprq2 Symbol Set SWA;}{\f139\fswiss\fcharset2\fprq2 Bookshelf Symbol 1;}{\f140\fnil\fcharset2\fprq2 Bookshelf Symbol 2;}{\f141\froman\fcharset2\fprq2 Bookshelf Symbol 3;}
{\f142\fswiss\fcharset2\fprq2 Bookshelf Symbol 4;}{\f143\fnil\fcharset2\fprq2 Bookshelf Symbol 5;}{\f144\fmodern\fcharset0\fprq1 Monotype.com;}{\f145\froman\fcharset0\fprq2 Georgia;}{\f146\fswiss\fcharset0\fprq2 Trebuchet MS;}
{\f147\fdecor\fcharset0\fprq2 Beesknees ITC;}{\f148\fscript\fcharset0\fprq2 Bradley Hand ITC;}{\f149\froman\fcharset0\fprq2 Calisto MT;}{\f150\fdecor\fcharset0\fprq2 Curlz MT;}{\f151\froman\fcharset0\fprq2 Elephant;}
{\f152\fswiss\fcharset0\fprq2 Eras Bold ITC;}{\f153\fswiss\fcharset0\fprq2 Eras Demi ITC;}{\f154\fswiss\fcharset0\fprq2 Eras Light ITC;}{\f155\fswiss\fcharset0\fprq2 Eras Medium ITC;}{\f156\fswiss\fcharset0\fprq2 Eras Ultra ITC;}
{\f157\fdecor\fcharset0\fprq2 Juice ITC;}{\f158\fdecor\fcharset0\fprq2 Matisse ITC;}{\f159\fdecor\fcharset0\fprq2 Snap ITC;}{\f160\fdecor\fcharset0\fprq2 Tempus Sans ITC;}{\f161\fscript\fcharset0\fprq2 Viner Hand ITC;}
{\f162\fnil\fcharset238\fprq2 Arial MT Black;}{\f163\fnil\fcharset0\fprq2 Info15;}{\f164\fnil\fcharset0\fprq2 Info25;}{\f165\froman\fcharset0\fprq0 (normaler Text);}{\f166\froman\fcharset238\fprq2 Garamond CE;}
{\f167\froman\fcharset204\fprq2 Garamond Cyr;}{\f168\froman\fcharset161\fprq2 Garamond Greek;}{\f169\froman\fcharset162\fprq2 Garamond Tur;}{\f170\froman\fcharset186\fprq2 Garamond Baltic;}{\f171\froman\fcharset238\fprq2 Times New Roman CE;}
{\f172\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f173\froman\fcharset161\fprq2 Times New Roman Greek;}{\f174\froman\fcharset162\fprq2 Times New Roman Tur;}{\f175\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f176\fswiss\fcharset238\fprq2 Arial CE;}{\f177\fswiss\fcharset204\fprq2 Arial Cyr;}{\f178\fswiss\fcharset161\fprq2 Arial Greek;}{\f179\fswiss\fcharset162\fprq2 Arial Tur;}{\f180\fswiss\fcharset186\fprq2 Arial Baltic;}
{\f181\fmodern\fcharset238\fprq1 Courier New CE;}{\f182\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f183\fmodern\fcharset161\fprq1 Courier New Greek;}{\f184\fmodern\fcharset162\fprq1 Courier New Tur;}{\f185\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f186\froman\fcharset238\fprq2 TIMES CE;}{\f187\froman\fcharset204\fprq2 TIMES Cyr;}{\f188\froman\fcharset161\fprq2 TIMES Greek;}{\f189\froman\fcharset162\fprq2 TIMES Tur;}{\f190\froman\fcharset186\fprq2 TIMES Baltic;}
{\f191\fswiss\fcharset238\fprq2 HELVETICA CE;}{\f192\fswiss\fcharset204\fprq2 HELVETICA Cyr;}{\f193\fswiss\fcharset161\fprq2 HELVETICA Greek;}{\f194\fswiss\fcharset162\fprq2 HELVETICA Tur;}{\f195\fswiss\fcharset186\fprq2 HELVETICA Baltic;}
{\f196\fswiss\fcharset238\fprq2 Tahoma CE;}{\f197\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f198\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f199\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f200\fswiss\fcharset186\fprq2 Tahoma Baltic;}
{\f201\fswiss\fcharset238\fprq2 Verdana CE;}{\f202\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f203\fswiss\fcharset161\fprq2 Verdana Greek;}{\f204\fswiss\fcharset162\fprq2 Verdana Tur;}{\f205\fswiss\fcharset186\fprq2 Verdana Baltic;}
{\f206\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f207\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f208\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f209\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f210\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f211\fswiss\fcharset238\fprq2 Arial Black CE;}{\f212\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f213\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f214\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f215\fswiss\fcharset186\fprq2 Arial Black Baltic;}
{\f216\fswiss\fcharset238\fprq2 Impact CE;}{\f217\fswiss\fcharset204\fprq2 Impact Cyr;}{\f218\fswiss\fcharset161\fprq2 Impact Greek;}{\f219\fswiss\fcharset162\fprq2 Impact Tur;}{\f220\fswiss\fcharset186\fprq2 Impact Baltic;}
{\f221\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f222\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f223\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f224\froman\fcharset162\fprq2 Bookman Old Style Tur;}
{\f225\froman\fcharset186\fprq2 Bookman Old Style Baltic;}{\f226\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f227\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f228\fmodern\fcharset161\fprq1 Lucida Console Greek;}
{\f229\fmodern\fcharset162\fprq1 Lucida Console Tur;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar \f4\fs20\lang2057 \snext0 Normal;}{
\s1\sb240\sa60\keepn\nowidctlpar \b\f5\fs28\lang2057 \sbasedon0\snext0 heading 1;}{\s2\sb240\sa60\nowidctlpar \b\f5\lang2057 \sbasedon0\snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar \f4\fs20\lang2057 \sbasedon0\snext15 
footnote text;}{\s16\nowidctlpar \f11\fs20\lang2057 \sbasedon0\snext16 Listing;}{\s17\nowidctlpar\tx567\tx1985\tx3402\tx4820 \f4\fs20\lang2057 \sbasedon0\snext17 Tab4;}{\*\cs18 \additive\super \sbasedon10 endnote reference;}{\*\cs19 \additive\super 
\sbasedon10 footnote reference;}{\s20\nowidctlpar\tqc\tx4703\tqr\tx9406 \f4\fs20\lang2057 \sbasedon0\snext20 header;}{\s21\nowidctlpar\tqc\tx4703\tqr\tx9406 \f4\fs20\lang2057 \sbasedon0\snext21 footer;}{\s22\qj\keep\widctlpar \f11\fs20\lang1024 
\sbasedon0\snext22 WinHelp_Declaration;}{\s23\qj\keepn\widctlpar\tx1418\tx2835\tx4253 \cbpat16 \f5\fs20\lang2057 \sbasedon0\snext23 WinHelp_NonScroll;}{\*\cs24 \additive\fs28\cf2 \sbasedon10 WinHelp_NoScrollHeader;}{\s25\keep\widctlpar \f11\fs20\lang2057 
\sbasedon22\snext25 FixedText;}}{\*\revtbl {Unknown;}{Stefan Hoffmeister;}}{\info{\title # + $ K Unit Email}{\author Danny Heijl}{\operator Stefan Hoffmeister}{\creatim\yr1998\mo2\dy19\hr22\min18}{\revtim\yr1998\mo10\dy23\hr13\min58}{\version2}{\edmins0}{\nofpages57}{\nofwords5690}
{\nofchars32436}{\*\company CEVI VZW}{\vern57431}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1134 \deftab709\widowctrl\ftnbj\aenddoc\hyphhotz425\hyphcaps0 \fet0{\*\docvar {IPSpeechSession$}{FALSE}}
{\*\docvar {IPSpeechSessionSaved$}{FALSE}}{\*\docvar {VTypeTags}{}}{\*\docvar {VTypeTags2}{}}\sectd \linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s23\qj\keepn\widctlpar\tx1418\tx2835\tx4253 \cbpat16 \f5\fs20\lang2057 {\cs24\fs28\cf2 #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} unit_Email} +{\footnote \pard\plain \s15\nowidctlpar 
\f4\fs20\lang2057 {\cs19\super +} TEmailSequence} ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super $} Email (unit)} K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Email} Unit Email 2.10.0
\par }\pard \s23\qj\keepn\widctlpar\tx2268\tx2835\tx4253 \cbpat16 {\ul Contributors}{\v Involved_Page}\tab {\uldb Release history}{\v version_history}
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par 
\par Please see the {\uldb Known Problems page}{\v TEmailProblems} if you have trouble using the component.
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b unit} Email;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b uses}
\par   WinTypes, WinProcs,
\par   Classes, SysUtils,
\par   {\ul SMapi}{\v SMapi_description};
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par \pard\plain \s2\sb240\sa60\widctlpar \b\f5\lang2057 Global Constants
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b const}
\par   {\uldb EMAIL_OK}{\v ConstEMAIL_OK}
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par See the Microsoft- or Inprise-supplied MAPI.HLP file for all other constant values that can be returned from the MAPI sub-system and an explanation of the meaning of these constants.
\par 
\par {\f11 SMAPI.PAS} contains symbolic declarations for each of the constants.
\par \pard\plain \s2\sb240\sa60\widctlpar \b\f5\lang2057 Classes and data types
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b type}
\par   {\uldb TEmail}{\v class_TEmail} = {\b class}(TComponent)
\par 
\par   {\uldb EMAPIunavailable}{\v class_EMAPIunavailable} = {\b class}(Exception)
\par 
\par   SString = \{$IFDEF Win32\} ShortString \{$ELSE\} {\b string} \{$ENDIF\}
\par 
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super #} SMapi_description}} This is the 16bit and 32bit MAPI import unit for the component.
\par See the Microsoft- or Inprise-supplied MAPI.HLP file for information about each of the elements declared in this unit.
\par \page {\cs19\super #{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super #} Involved_page}}Ordered by time of first contribution:
\par \pard \nowidctlpar\tx2127 
\par Keith Darragh
\par Danny Heijl\tab <Danny.Heijl@cevi.be>
\par Rudy Claasen\tab <R.Claasen@tip.nl>
\par Stefan Hoffmeister\tab <Stefan.Hoffmeister@Econos.de>
\par Ismail Esmail\tab <iesmail@edc.gov.ab.ca>
\par Roman Popov\tab <rem@mega.tomsk.ru>
\par Steve Pinneo\tab <stevep@direct.ca>
\par Nikolai Soumarokov\tab <N.Soumarokov@iaea.org>
\par Michael Wilcox\tab <mwilcox@economatics.co.uk>
\par Ulrik Schoth\tab <schoth@krohne.mhs.compuserve.com>
\par Michael Kennedy\tab <kennedym@indigo.ie>
\par Daniel Easton\tab < daniel.easton@launch.com>
\par Gerald Patel\tab <G.Patel@Wanadoo.fr>
\par Jesse C. Slicer\tab <JSlicer@hrblock.com>
\par Maurice Benzaquen\tab <mbenzaquen@fiduciaire-de-france.fr>
\par \'85 and all the people reporting problems with MAPI.
\par 
\par Please contact {\b only one} contributor at a time!
\par 
\par Efforts are co-ordinated by Danny Heijl and Stefan Hoffmeister 
\par \pard\plain \s23\qj\keepn\widctlpar\tx1418\tx2835\tx4253 \cbpat16 \f5\fs20\lang2057 \page 
\par {\cs24\fs28\cf2 #{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super #} version_history} Version History}
\par 
\par \pard\plain \s25\keep\widctlpar \f11\fs20\lang2057 \{----------------------------------------------\}
\par \{ TEmail component for Borland Delphi          \}
\par \{                                              \}
\par \{ Written by Keith Darragh, (c) SWIFTsoft 1995 \}
\par \{                                              \}
\par \{ Version : 1.00                               \}
\par \{                                              \}
\par \{ History :                                    \}
\par \{                                              \}
\par \{ 1.00 : Initial version                       \}
\par \{----------------------------------------------\}
\par 
\par   substantially extended by Danny Heijl, (c) CEVI VZW 1996
\par 
\par   2.00.00 : my version
\par 
\par   - MAPI header file moved to a separate "smapi.pas" (s[imple]mapi.pas)
\par   - adds Acknowledge property (acknowledge receipt)
\par   - adds CC property (multiple CCs in a string list)
\par   - adds support for multiple recipients (in a string list)
\par   - adds support for multiple attachments (in a string list)
\par   - adds SetLongText method, in case your message happens to be > 255 bytes
\par   - adds CheckRecipient method
\par   - adds CheckAttachment method
\par   - adds GetNextMessageId method
\par   - adds ReadMail method
\par   - adds LeaveUnread property for ReadMail
\par   - adds NoAttachments property for ReadMail
\par   - adds HeaderOnly property for ReadMail
\par   - adds support for Delphi 2.0
\par 
\par   November 96, Danny.Heijl@cevi.be
\par 
\par   2.00.0a :
\par 
\par    -  added DeleteMail, for completeness,  Danny Heijl, dec 1996
\par 
\par   2.00.0b : enhancements by Rudy Claasen (R.Claasen@tip.nl)
\par 
\par    -  added Blind Carbon Copy list, Rudy Claasen, Jan 1997
\par    -  added "Address" (select addresses), Rudy Claasen, Jan 1997
\par    -  Internal procedure List to RecipArray, Rudy Claasen, Jan 1997
\par    -  fixed small bug in "check implementation limits", Danny Heijl, Jan 1997
\par 
\par   2.00.0c :
\par    - added profile and password properties, Danny Heijl, Jan '97
\par    - added UseDefProfile for Win32 users,   Danny Heijl, Jan '97
\par 
\par 
\par   2.01.00 :
\par 
\par Modifications by Stefan Hoffmeister (Stefan.Hoffmeister@PoBoxes.com),
\par February 1997:
\par 
\par - added direct addressing, circumventing address books
\par   (use an address like '[FAX:123456]' - see MAPI.HLP documentation)
\par - changed two procedure declarations to feature "const \'85:SString" instead
\par   of " \'85 :SString" (save stack space)
\par - MAPI(32).DLL loaded dynamically (see Smapi.pas).
\par - added check (+read-only property) whether MAPI is available on system
\par - dynamically allocate memory for recipients and attachments arrays.
\par 
\par   (note that the dynamic array code remains valid if the arrays
\par    have zero elements -- dh --)
\par 
\par 
\par   2.02.00 :
\par 
\par Modifications by Stefan Hoffmeister (Stefan.Hoffmeister@PoBoxes.com),
\par March 1997:
\par - enabled UseDefProfile for 16bit systems running on Win32
\par   (if you don't like it -> remove the define UseGenericThunks (below)
\par    and delete CALL32NT.PAS -> you won't need it then )
\par   (in my opinion there should be no reason to ever do this)
\par - changed search strategy for MAPI32.DLL (see SMAPI.PAS)
\par - Added property "ShowDialog" to TEmail -> initialises MAPI message and
\par   then offers editing by MAPI client itself on MAPISend
\par - reduce stack usage by redeclaring array[0..256] as PChar and allocating
\par   memory dynamically
\par - fixes a couple of bugs that would show up when cancelling a logon
\par   (this had to do with the dynamic allocation of memory and freeing it
\par    in version 2.01.00  --> added some initialisation + test code)
\par 
\par 
\par  2.02.0a, April 6, 1997 (Danny)
\par 
\par - Minor bug fixes in the 2.02.00 code of Stefan :
\par   The changes to conserve stack space for 16 bit Delphi (using StrAlloc 
\par   and StrNew) caused GPF's in CountUnRead & ReadMail & DeleteMail with 
\par   16 bit DELPHI, because of the 16 bit syntax for the MAPI calls 
\par   where the address of a pointer was required: 
\par   @pointer^ required for PChar, instead of @pointer for array[..] of char 
\par   (caused no problems for 32bit Delphi).
\par   Just to be on the safe side, I replaced all StrNew(\'85)
\par   (formerly Array[\'85] of Char) with fixed-size StrAlloc(\'85).
\par   Maybe not necessary, but I am a great fan of defensive programming.
\par   That way I am sure MAPI will not accidentally overwrite anything.
\par 
\par - Change suggested by Ismail Esmail (iesmail@edc.gov.ab.ca),
\par   who got tired of re-implementing the changes with each new release.
\par   He added a new property : the mail address of the originator: 
\par   "OrigAddress", a read-only public (not published) run-time property
\par   filled in by ReadMail.
\par 
\par 
\par  2.03.00, May 6, 1997
\par 
\par - I include a fix suggested by Roman Popov (rem@mega.tomsk.ru):
\par   if the lpszFilename member of the MapiFileDesc structure is empty,
\par   we use the lpszPathName member now. This is not documented, but I suspect
\par   that the filename is used if the attachment is not requested, and that
\par   the path name is used if the attachment has been requested.
\par   Also, according to Roman, not all MAPI implementations use lpszFileName,
\par   his only uses lpszPathName. Microsoft uses both if attachments are
\par   requested.
\par   As a bonus, in all cases you will get the path names in a new read-only
\par   runtime string list property (AttPathNames) if you requested attachments.
\par 
\par - Roman also suggested a useful new method : "CopyAttachment", which I
\par   implemented immediately. Simply read a message with NoAttachments :=
\par   False, and then call CopyAttachment with the index of the attachment 
\par   in the string list, the destination path name, and the delete-after-copy 
\par   flag.
\par 
\par 2.04.00, June 2, 1997
\par 
\par - If UseDefProfile = true was used in a 16bit Windows environment, error
\par   messages would be shown, though the component would continue to
\par   work. This has been fixed.
\par - Added "Known Problems" page
\par - Added property UnreadOnly as suggested by Nikolai Soumarokov
\par   (N.Soumarokov@iaea.org) - this will only retrieve unread mail.
\par - Some changes to the help file and documentation.
\par - Added FAX broadcast demo courtesy of Michael Wilcox 
\par   <mwilcox@economatics.co.uk>.
\par   This application demonstrates how to amend a database of address
\par   details and fax a letter to people automatically using MS Exchange.
\par 
\par 
\par 2.05.00, June 25, 1997 (Danny)
\par 
\par - Implemented new property DownLoadFirst and new procedure DownLoad
\par   on suggestion of Roman Popov (rem@mega.tomsk.ru).
\par - Updates to the documentation
\par 
\par 2.05.01, September 19, 1997 (Ulrik Schoth)
\par 
\par - The component now uses the correct registry key for the 
\par   default profile on Windows NT.
\par 
\par 2.06.00, November 1, 1997 (Stefan)
\par 
\par - Added code provided by Michael Kennedy (kennedym@indigo.ie) for
\par   adding file{\b name} information to attachments
\par - Memory leak has been fixed
\par - Minor code revision
\par - Added Borland C++ Builder 1.0 compatibility
\par - Updates to the documentation
\par 
\par 2.07.00, January 15, 1997 (Stefan)
\par 
\par - Integrated code for {\uldb SendMail}{\v func_TEmailSaveMail} and {\uldb NewSession}{\v prop_TEmailNewSession} written by 
\par   Daniel Easton (daniel.easton@launch.com)
\par - Bug in 2.06.00 thunking code fixed (non-initialised pointer)
\par - changed MAPI detection logic
\par - Some internal restructuring, in particular flLogonFlags has been 
\par   promoted from private to protected status
\par - Updates to the documentation
\par 
\par 2.08.00, February 1, 1998 (Stefan)
\par 
\par - Fixed a long-standing issue that would prevent TEmail to send
\par   email to a recipient where the name could not be resolved
\par   uniquely in the address book, e.g. two entries for \rdblquote Stefan Hoffmeister\rdblquote .
\par - Fixed a problem in SMAPI.PAS that would prevent compilation
\par   with C++ Builder (THandle instead of HREG had been used).
\par - Added "MessageType" property (Danny).
\par 
\par 
\par 2.08.01, July 16, 1998 (Danny) (never published)
\par 
\par - A fix supplied by Ken Clark (chronological@dial.pipex.com) needed
\par   when using the Eudora PRO 3 and 4 MAPI support DLL.
\par - A new "Version\rdblquote  property (read-only).
\par 
\par 
\par 2.09.00-2.09.02, August 1998 (Stefan)
\par 
\par - Added Clear method suggested by Daniel Tobar (dtobar@redestb.es)
\par - Added C++ Builder 1.0/3.0 demonstration projects
\par   created by Gerald Patel (G.Patel@Wanadoo.fr)
\par - Changed conditional defines in SMAPI.PAS and EMAIL.PAS for
\par   compatibility with C++ Builder 3.0 and Delphi 4.0
\par - Changed two declarations in MAPI detection logic of SMAPI.PAS 
\par   from "integer" to "DWORD" to prevent problems with Delphi 4
\par - Really {\i messed} around with undocumented features to work
\par   around C++ Builder 3.0 Pascal header generation bug
\par - Removed \{$L-\} compiler switches that could lead to internal
\par   errors in the Delphi 3 compiler (redundant anyway)
\par - Added BPK for C++ Builder 3.0 and DPK for Delphi 4
\par - Added a few project files for C++ Builder 3.0
\par - Sanitised UMAPI.PAS (ENHDEMO folder) of tab stops
\par - Cleaned up the QM32DEMO application and fixed issues
\par   like writing (don\rquote t!) a key to the registry in the
\par   wrong place
\par - Move constant TEMAIL_VERSION from SMAPI.PAS to TEMAIL.PAS
\par - Change Version property to getter method (frees 256 byte of memory)
\par - Moved Logoff in Destroy to the end of the destructor and wrapped
\par   exception handler around it
\par - Some code reformatting, clean up, to get closer to common
\par   coding practice
\par - Changed plenty of tests for "0" to tests for "SUCCESS_SUCCESS"
\par   and EMAIL_OK respectively in both the component and the 
\par    demonstration projects where-ever that was applicable
\par - Slightly expanded online help support by supplying TOC file
\par - Plenty of updates and changes to the documentation
\par - Fixed problem in SetLongText that surfaced due to the
\par   addition of the .Clear method (had been a hidden issue in
\par   every 2.0x release of TEmail)
\par - Added try..finally block for temporary resource allocation
\par   in UMAPI.PAS (demo application)
\par - Added use of .Clear method to UMAPI.PAS
\par 
\par 2.10, November 1998 (Stefan)
\par 
\par - Added a slew of events based upon code sent in by
\par   Jesse C. Slicer (JSlicer@hrblock.com)
\par \pard\plain \s22\keep\widctlpar \f11\fs20\lang1024 - Added fix for getting mail from Novell GroupWise 5.2 servers
\par   provided by Maurice Benzaquen (mbenzaquen@fiduciaire-de-france.fr):
\par     MAPI_LONG_MSGID added
\par - Added test for nil in attachment code that might fix problems
\par   with attachments in Outlook Express (Windows 98)
\par - Added another test for nil (safety) in ReadMail
\par - Updates to the Known Problems section
\par - Minor spelling and formatting updates
\par 
\par \pard\plain \s1\sb240\sa60\keepn\nowidctlpar \b\f5\fs28\lang2057 \page {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}${\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super $}
 Known Problems}} {\cs19\super K{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super K} Problems;Known Problems}} {\cs19\super #{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super #} TEmailProblems}} Known Problems

\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par \pard \qc\nowidctlpar {\b\f5\fs28\cf6 Most problems can be fixed by updating the MAPI system with the latest Exchange Service Pack(s).}
\par \pard \nowidctlpar 
\par If you think that you have identified a {\b reproducible} bug in TEmail, please do send a {\b small }source code-only sample application, at most 100 lines or 5 KB, to only one of the authors.
\par 
\par Please do provide all the necessary steps in greatest detail to reproduce the problem. We would be very grateful if you could add your ideas on a possible fix for the problem.
\par 
\par \pard \nowidctlpar\tx2127 {\b If you have a solution} for one of the following problems, please, do send it to Danny Heijl <Danny.Heijl@cevi.be> or Stefan Hoffmeister <Stefan.Hoffmeister@PoBoxes.com >!
\par 
\par 
\par It seems as if MAPI for Windows 95 and Windows NT is volatile and buggy. {\b Please always install the latest available Exchange Service Pack, available from http://www.microsoft.com/, to exclude the possibility of a system bug. }
As of 20 June 1997 http://www.microsoft.com/exchange/ was a good bet, too\'85
\par \pard \nowidctlpar 
\par Also please note that some {\b MAPI emulations} are available. Usually these cause many problems, none of which can be attributed to TEmail.
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 MS Exchange and heavy duty service
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 According to {\b Michael Wilcox} (mwilcox@economatics.co.uk) MS Exchange has been known to c
rash for some unknown reason in module MAPISP32, but restarting the machine will allow MS Exchange to continue. If you find out why MS Exchange crashes or have a reliable workaround we would be {\b very} interested in your comments.
\par 
\par {\b\ul Solution}: At the moment there is no known solution.
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 Lotus cc:Mail problems
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 
\par Two problems have been observed by {\b Haris Zujo} (haris.zujo@abm.si) when using TEmail in combination with the MAPI emulation library coming with Lotus cc:Mail
\par 
\par {\pntext\pard\plain\fs20\lang2057 1.\tab}\pard \fi-360\li644\nowidctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}Once logged on to the mail system the unread
 count will stay the same, i.e. the first time it is retrieved it will report the correct value, but subsequently, if new messages have arrived, a wrong count will be returned.
\par {\pntext\pard\plain\fs20\lang2057 2.\tab}When using the cc:Mail release 7 add-on to the in-box an Invalid Page Fault in KERNEL32.DLL will be caused on each TEmail.Logoff.
\par \pard \li284\nowidctlpar 
\par {\b\ul Solution}: At the moment there is no known solution.
\par 
\par Both problems probably are caused by flaws in the MAPI emulation library provided by Lotus cc:Mail. The only environment that (simple) MAPI is guaranteed to work in, is MS-Mail or MS-Exchange, because MAPI is an invention of Microsoft. 
\par  [Information provided by {\b Danny Heijl}]
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 Novell GroupWise 4.1a oddity
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 Please note first of all that Novell GroupWise 4.1a {\b seems to be the best MAPI emulation} available - only very few problems have surfaced.
\par 
\par {\b Michael Fitzpatrick} (MFITZPATRICK@gw.dot.state.ny.us) has identified some odd behaviour with Novell GroupWise 4.1a running together with Microsoft Windows 3.11.
\par \pard \nowidctlpar 
\par \pard \li284\nowidctlpar He observed that when
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}\pard \fi-360\li709\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}adding {\i one} attachment, {\i no} attachment was received;
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}when adding {\i two} attachments, only the name of the {\i second} attachment would appear, but the contents were from the first attachment.
\par \pard \nowidctlpar{\*\pn \pnlvlcont\pndec }
\par \pard \li284\nowidctlpar{\*\pn \pnlvlcont\pndec }When 
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}\pard \fi-360\li709\nowidctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}adding {\i four} attachments, only the names of the {\i second} and {\i fourth}
 attachment would appear, but the contents were from the {\i first} and {\i third} attachment respectively;
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}adding {\i six} attachments, only the names of the {\i second}, {\i fourth} and {\i sixth} attachment would appear, but the contents were from the {\i first}, {\i third,} and {\i fifth}
 attachment respectively.
\par \pard \nowidctlpar 
\par \pard \li284\nowidctlpar {\b\ul\cf6 Solution}: Instead of using the following code as a {\b\cf6 work around} for attachments (see {\f11 UMAPI.PAS})
\par 
\par \pard\plain \s22\qj\li284\keep\widctlpar \f11\fs20\lang1024 {\b   if} (Listbox3.Items.Count > 0) {\b then}
\par     Email1.Attachment.Assign(Listbox3.Items); 
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 
\par you can work around the problem by using
\par 
\par \pard\plain \s22\qj\li284\keep\widctlpar \f11\fs20\lang1024 {\b   with}\~Email1 {\b do  
\par     for} i := 0 {\b to} Listbox3.Items.Count-1 {\b do}
\par       {\b begin}
\par         Attachment.Add(Listbox3.Items[i]);
\par         Attachment.Add(Listbox3.Items[i]);
\par       {\b end};
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 
\par This will {\i add} each attachment twice \endash  but only {\i send} it once.
\par [Solution provided by {\b Michael Fitzpatrick}]
\par \pard \nowidctlpar 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 Borland Database Engine (BDE) and TEmail
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b Viv Raines}
 (rainesv@enersis.co.nz) reports that an application that uses the BDE will run into trouble if TEmail is active in a different application, that connects to the same database: usually start up of BDE will fail.
\par 
\par The reason for this misbehaviour seems to be a new version of MAPI32.DLL (4.00.993.3) installed with Microsoft Office 97 (Microsoft Office). If this new MAPI32.DLL is not present everything works as expected.
\par 
\par {\b\ul\cf6 Solution}: If possible, {\b\cf6 use a different version of MAPI32.DLL} until Microsoft has fixed the problem. [Analysis provided by {\b Viv Raines}]
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 MAPI and Windows NT 4.0:
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b Richard Lauth} (richard_lauth@dynasys.tm.fr) has identified a MAPI problem in combination with Windows NT 4.0.
\par 
\par If TEmail is used with the {\uldb ShowDialog}{\v prop_TEmailShowDialog} property set to True and if the mail sent also has {\uldb CC}{\v prop_TEmailCC} recipients, MAPI will crash. Mail sent to normal {\uldb Recipient}{\v prop_TEmailRecipient}
 is not affected by this problem.
\par 
\par This problem seems to exist {\b only} on Windows NT 4.0; other 32bit versions of Windows (Windows 95 for example) seem to work correctly.
\par 
\par This is a problem within the {\b Windows NT 4.0} MAPI implementation.
\par 
\par {\b\ul\cf6 Solution}:{\cf6  }Updating the Windows NT 4.0 Workstation installation with the  {\b\cf6 Exchange Service Pack 3} solves the problem. [Solution provided by {\b Richard Lauth}]
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 32bit MS Exchange {\i Server} 4.0 and 16bit programs
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b Achim Kalwa} (achim.kalwa@do.netsurf.de) reports that using a 16bit client (i.e. a program created with Delphi 1.02) causes trouble with the MAPI client shipped with the 32bit MS Exchange {\b\i Server}
 4.0 (including Service Pack 3) running on Windows 95. It seems as if a 16bit client is unable to open any non-default messaging profile.
\par 
\par The same source code, only compiled to 32bit with Delphi 2 or Delphi 3 works perfectly on the same system with MS Exchange {\b\i Server} 4.0. The same 16bit client works perfectly with "{\b\i normal}
" 32bit MS Exchange clients like the one shipped with Microsoft Windows 95.
\par 
\par It is believed that this is a problem with the {\i original} MS Exchange {\b\i Server} 4.0 distribution.
\par 
\par {\b\ul\cf6 Solution}: Update the MS Exchange installation by installing the {\b\cf6 Exchange Service Pack 4}. [Solution provided by {\b Achim Kalwa}]
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 Ambiguous recipient errors
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b Willi Blum}
 (Willi_Blum@t-online.de) reports that the address book matches entries not with the EQUALS operator but with the LIKE operator. This has the undesirable side-effect that similar entries might not be distinguished. An example for this would be the presenc
e of "Address" and "Address-1".
\par 
\par {\b\ul\cf6 Solution}: When addressing a message, never use the alias (i.e. "Address") but the complete address (i.e. "Address@Any.Host.domain") [Solution provided by {\b Willi Blum}]
\par 
\par \pard\plain \s2\sb240\sa60\nowidctlpar \b\f5\lang2057 Timing problem with Eudora Light MAPI support
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 
\par {\b Gerald Weissenbacher} (wei1@technodat.co.at) reports that Qualcomm Eudora Light 3.0.6 (32 bit), MAPI DLL version 3.0.2.4, on Windows NT 4.0 might have a timing problem.
\par 
\par Legal MAPI code will work for the first email sent, but will silently fail on subsequent attempts to send email.
\par 
\par {\b\ul\cf6 Solution}: Before calling the SendMail method of TEmail, delay for approximately one second, for instance by using the Sleep API call. [Solution provided by {\b Willi Blum}]
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} ConstEMAIL_OK}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {
\cs19\super +} TEmailSequence}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super $} EMAIL_OK (const)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} EMAIL_OK}} Const EMAIL_OK
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s16\widctlpar \f11\fs20\lang2057 {\b const} EMAIL_OK = SUCCESS_SUCCESS;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This value is returned by functions that return a status.
\par 
\par If you get any error that is not equal to -1 (the value of SUCCESS_SUCCESS and EMAIL_OK), chances are that the error code can be found in the MAPI help file shipped with C++ Builder or Delphi 2, 3 or 4.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} class_EMAPIunavailable}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} EMAPIunavailable (class)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} EMAPIunavailable}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} class_EMAPIunavailable}} Class EMAPIunavailable
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 EMAPIunavailable = {\b class}(Exception);
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This exception is raised if MAPI services are not available and functions are accessed that require the MAPI system.
\par 
\par Possible causes are that MAPI.DLL or MAPI32.DLL can not be found or the MAPI system has not been properly installed.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} class_TEmail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super $}
 TEmail (class)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} TEmail}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super B{\footnote \pard\plain 
\s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} class_TEmail}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_Object;TEmail}} Class TEmail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par Please see the {\uldb Known Problems page}{\v TEmailProblems} if you have trouble using the component.
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 TEmail = {\b class}(TComponent)
\par    {\b constructor} Create(AOwner: TComponent); {\b override};
\par    {\b destructor} Destroy; {\b override};
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par \pard\plain \s2\sb240\sa60\widctlpar \b\f5\lang2057 Properties
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b Runtime properties:}
\par \pard\plain \s17\keep\widctlpar\tx567\tx1985\tx3402\tx4820 \f4\fs20\lang2057 \tab {\uldb AttPathNames}{\v prop_TEmailAttPathNames}\tab {\uldb DateRecvd}{\v prop_TEmailDateRecvd}\tab {\uldb HeaderOnly}{\v prop_TEmailHeaderOnly}\tab {\uldb LeaveUnread}{\v 
prop_TEmailLeaveUnread}
\par \tab {\uldb MessageId}{\v prop_TEmailMessageId\tab }\tab {\uldb MessageType}{\v prop_TEmailMessageType}\tab {\uldb Originator}{\v prop_TEmailOriginator}\tab \tab {\uldb OrigAddress}{\v prop_TEmailOrigAddress}
\par \tab {\uldb NoAttachments}{\v prop_TEmailNoAttachments}\tab {\uldb Unread}{\v prop_TEmailUnread}
\par \pard\plain \li284\nowidctlpar \f4\fs20\lang2057 {\b 
\par Design-time properties:}
\par \pard\plain \s17\keep\widctlpar\tx567\tx1985\tx3402\tx4820 \f4\fs20\lang2057 \tab {\uldb Acknowledge}{\v prop_TEmailAcknowledge}\tab {\uldb Attachment}{\v prop_TEmailAttachment}\tab {\uldb Bcc}{\v prop_TEmailBcc}\tab {\uldb CC}{\v prop_TEmailCC}
\par \tab {\uldb DownLoadFirst}{\v prop_TEmailDownloadFirst}\tab {\uldb MAPIavail}{\v prop_TEmailMAPIavail}\tab {\uldb NewSession}{\v prop_TEmailNewSession}\tab {\uldb Password}{\v prop_TEmailPassword}
\par \tab {\uldb Profile}{\v prop_TEmailProfile}\tab {\uldb Recipient}{\v prop_TEmailRecipient}\tab {\uldb ShowDialog}{\v prop_TEmailShowDialog}\tab {\uldb Subject}{\v prop_TEmailSubject}
\par \tab {\uldb Text}{\v prop_TEmailText}\tab {\uldb TruncAttFN}{\v prop_TEmailTruncAttFN}\tab {\uldb UnreadOnly}{\v prop_TEmailUnreadOnly}\tab {\uldb UseDefProfile}{\v prop_TEmailUseDefProfile}
\par \pard \s17\widctlpar\tx567\tx1985\tx3402\tx4820 \tab {\uldb Version}{\v prop_TEmailVersion}
\par 
\par \pard\plain \s2\sb240\sa60\widctlpar \b\f5\lang2057 Methods
\par \pard\plain \s17\keep\widctlpar\tx567\tx1985\tx3828\tx5529 \f4\fs20\lang2057 \tab {\uldb Address}{\v func_TEmailAddress}\tab {\uldb CheckAttachment}{\v func_TEmailCheckAttachment}\tab {\uldb CheckRecipient}{\v func_TEmailCheckRecipient}\tab {\uldb Clear}{
\v func_TEmailClear}
\par \tab {\uldb CopyAttachment}{\v func_TEmailCopyAttachment}\tab {\uldb CountUnread}{\v func_TEmailCountUnread}\tab {\uldb DeleteMail}{\v func_TEmailDeleteMail}\tab {\uldb DownLoad}{\v func_TEmailDownload}
\par \tab {\uldb GetLongText}{\v func_TEmailGetLongText}\tab {\uldb GetNextMessageId}{\v func_TEmailGetNextMessageId}\tab {\uldb Logoff}{\v func_TEmailLogoff}\tab {\uldb Logon}{\v func_TEmailLogon}
\par \tab {\uldb ReadMail}{\v func_TEmailReadMail}\tab {\uldb SendMail}{\v func_TEmailSendMail}\tab {\uldb SaveMail}{\v func_TEmailSaveMail}\tab {\uldb SetLongText}{\v func_TEmailSetLongText}
\par \tab {\uldb TruncAttachmentFN}{\v func_TEmailTruncAttachmentFN}
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailAddress}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Address (TEmail function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Address, TEmail}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailAddress}} Function TEmail.Address
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} Address: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Launches the standard MAPI address dialogue box.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailCheckAttachment}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} CheckAttachment (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} CheckAttachment}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailCheckAttachment}} Function TEmail.CheckAttachment
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} CheckAttachment({\b const} AnAttachment: SString): SString;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Checks if an attachment can be found before you send it.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailCheckRecipient}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} CheckRecipient (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} CheckRecipient}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailCheckRecipient}} Function TEmail.CheckRecipient
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} CheckRecipient({\b const} ARecipient: SString): SString;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Checks a recipient against the mail system's address list.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailClear}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Clear (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Clear; TEmail}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailClear}} Function TEmail.Clear
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b procedure} Clear;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Calling this method will erase the content of the following properties:
\par 
\par \pard\plain \s22\qj\li567\keep\widctlpar \f11\fs20\lang1024 Acknowledge
\par Attachment
\par BCC
\par CC
\par Recipient
\par Subject
\par Text
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailCopyAttachment}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} CopyAttachment (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} CopyAttachment}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailCopyAttachment}} Function TEmail.CopyAttachment
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\keep\widctlpar \f11\fs20\lang1024 {\b function} CopyAttachment( Index: Integer; {\b const} DestPathName: SString;
\par                          DeleteAfterCopy: boolean): Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Copies the attachment file that "index" points to in the attachment TStrings to the destination path name.
\par 
\par If {\f11 DeleteAfterCopy} is true, the temporary copy that {\uldb ReadMail}{\v func_TEmailReadMail} created is deleted after a successful copy operation.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailCountUnread}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} CountUnread (function)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} CountUnread}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super B{\footnote 
\pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailCountUnread}} Function TEmail.CountUnread
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} CountUnread: ULONG;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Returns the number of unread email messages.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailDeleteMail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} DeleteMail (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} DeleteMail}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailDeleteMail}} Function TEmail.DeleteMail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} DeleteMail: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Deletes the email message that the current {\uldb MessageId}{\v prop_TEmailMessageID} property points to.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailDownLoad}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} DownLoad (procedure)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} DownLoad}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailDownLoad}} Procedure TEmail.DownLoad
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b procedure} DownLoad;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This procedure will automate a mail download process. It first terminates an existing MAPI session using {\uldb Logoff}{\v func_TEmailLogoff}, then uses {\uldb Logon}{\v func_TEmailLogon} in combination with the {\uldb DownLoadFirst}{\v 
prop_TEmailDownLoadFirst} property set to True.
\par 
\par A side-effect of calling DownLoad is that the {\uldb DownLoadFirst}{\v prop_TEmailDownLoadFirst} property will be set to true.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailGetLongText}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} GetLongText (function)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} GetLongText}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailGetLongText}} Function TEmail.GetLongText
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} GetLongText: PChar;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Returns the body text of the current message in a PChar. You {\b\i must} {\b\i not} de-allocate this PChar as it is just the copy of a pointer to an internally allocated memory block.
\par 
\par If you retrieve a mail with {\uldb ReadMail}{\v func_TEmailReadMail} and the message body is shorter than 256 bytes, GetLongText will return {\b nil} and {\uldb Text}{\v prop_TEmailText} will contain the complete message body.
\par 
\par If you have assigned a message body using {\uldb SetLongText}{\v func_TEmailSetLongText} then GetLongText will return the body, even if it is shorter than 256 bytes.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailGetNextMessageId}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 
{\cs19\super $} GetNextMessageId (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} GetNextMessageId}}
 {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailGetNextMessageId}} Function TEmail.GetNextMessageId
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} GetNextMessageId: SString;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Returns the MessageId of the next email message in the {\uldb MessageId}{\v prop_TEmailMessageID} property.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailLogoff}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Logoff (TEmail function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Logoff}} {\cs19\super 
B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailLogoff}} Function TEmail.Logoff
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} Logoff: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Logs off from the mail subsystem (closes the mail session).
\par 
\par Use {\uldb Logon}{\v func_TEmailLogon} to log in into the MAPI system.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailLogon}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Logon (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Logon}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailLogon}} Function TEmail.Logon
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} Logon: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Logs on to the mail subsystem (establishes a mail session). Use the {\uldb Logoff}{\v func_TEmailLogoff} method to terminate the current MAPI session.
\par 
\par You can specify a logon profile and password in the {\uldb Profile}{\v prop_TEmailProfile} and {\uldb Password}{\v prop_TEmailPassword} properties.
\par 
\par You can set {\uldb UseDefProfile}{\v prop_TEmailUseDefProfile} to select the default profile from the registry.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailReadMail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} ReadMail (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} ReadMail}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailReadMail}} Function TEmail.ReadMail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} ReadMail: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Upon calling this method, the email message identified by the current {\uldb MessageId}{\v prop_TEmailMessageId} property.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailSaveMail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} SaveMail (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} SaveMail}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailSendMail}} Function TEmail.SaveMail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} SaveMail: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Saves an email message to the message store.
\par 
\par The {\uldb MessageID}{\v prop_TEmailMessageID} property is used to determine the message which is to be replaced; if MessageID is empty, a new message will be created.
\par 
\par If the necessary properties are not set up properly (for instance if the recipient is missing) a standard email entry form is shown, enabling the user to enter all the necessary information.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailSendMail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} SendMail (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} SendMail}} {\cs19\super B
{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailSendMail}} Function TEmail.SendMail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} SendMail: Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Sends an email message.
\par 
\par If the necessary properties are not set up properly (for instance if the recipient is missing) a standard email entry form is shown, enabling the user to enter all the necessary information.
\par 
\par If the call succeeded, SUCCESS_SUCCESS is returned, otherwise an error code.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailSetLongText}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} SetLongText (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} SetLongText}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailSetLongText}} Function TEmail.SetLongText
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} SetLongText(pLongText: PChar): Integer;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This method allows you to set a long message body text.
\par 
\par If you assign a body text using SetLongText, the {\uldb Text}{\v prop_TEmailText} property will be cleared, too.
\par 
\par The length of the newly set text is returned.
\par \pard\plain \s1\sb240\sa60\keepn\nowidctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} func_TEmailTruncAttachmentFN}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar 
\f4\fs20\lang2057 {\cs19\super $} TruncAttachmentFN (function)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K}
 TruncAttachmentFN}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} func_TEmailTruncAttachmentFN}} Function TEmail.TruncAttachmentFN
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b function} TruncAttachmentFN({\b const} LongFN: SString): SString; {\b virtual};
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This protected function will be used to truncate attachment filenames (by default to 8.3 with the {\i leading} characters discarded; the code for this has been provided by Michael Kennedy, see EMAIL.PAS) if the {\uldb TruncAttFN}{\v prop_TEmailTruncAttFN}
 property has been set to true.
\par 
\par If you need different behaviour for the truncation mechanism you need to override this function in a descending class.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailAttPathNames}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} AttPathNames (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} AttPathNames}} {
\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailAttPathNames}} Property TEmail.AttPathNames
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} AttPathNames: TStrings {\b read} FAttPathNames;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par TStrings with the path names of the attachments of the message last read.
\par 
\par This is a read-only runtime property.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailDateRecvd}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} DateRecvd (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} DateRecvd}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A
{\footnote \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs19\b\super A} TEmail_DateRecvd;DateRecvd_Property;DateRecvd}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailDateRecvd}} Property TEmail.DateRecvd

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} DateRecvd: SString {\b read} FDateRecvd;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This is the date when the current message was received.
\par 
\par This is a read-only runtime property.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailHeaderOnly}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} HeaderOnly (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} HeaderOnly}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmailHeaderOnly;HeaderOnly_Property;HeaderOnly}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailHeaderOnly}} Property TEmail.HeaderOnly

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} HeaderOnly: boolean {\b read} FHeaderOnly {\b write} FHeaderOnly
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Set this property to True if you do not want {\uldb ReadMail}{\v func_TEmailReadMail} to return the message body, but only the message "envelope".
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailLeaveUnread}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} LeaveUnread (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_LeaveUnread;LeaveUnread_Property;LeaveUnread}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super K} LeaveUnread}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailLeaveUnread}}
 Property TEmail.LeaveUnread
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} LeaveUnread: boolean {\b read} FLeaveUnread {\b write} FLeaveUnread {\b default} True;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Set this property to True if you do not want {\uldb ReadMail}{\v func_TEmailReadMail} to mark the message as "Read".
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailMessageId}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} MessageId (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} MessageId}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_MessageId;MessageId_Property;MessageId}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailMessageId}} Property TEmail.MessageId
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} MessageId: SString {\b read} FMessageId {\b write} FMessageId;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This property, returned by {\uldb GetNextMessageId}{\v func_TEmailGetNextMessageId}, uniquely identifies a message.
\par 
\par This property is used by {\uldb ReadMail}{\v func_TEmailReadMail} and {\uldb DeleteMail}{\v func_TEmailDeleteMail}.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailMessageType}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} MessageType(property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} MessageType}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_MessageType;MessageType_Property;MessageType}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailMessageType}} Property TEmail.MessageType

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} MessageType: SString {\b read} FMessageType {\b write} FMessageType;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Returns or sets the \ldblquote lpszMessagetype\rdblquote  member of the MapiMessage structure.
\par 
\par To quote from the {\i Microsoft} {\i MAPI} {\i documentation}: 
\par 
\par The lpszMessagetype "[p]oints to a string indicating a non-IPM type of message. Client applications can select message types for their non-IPM messages. Clients that only support IPM messages can ignore the lpszMessageType member when reading messages and
 set it to empty or NULL when sending messages.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailOriginator}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Originator (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Originator}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {
\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_Originator; Originator_Property; Originator}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailOriginator}}
 Property TEmail.Originator
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par \pard \nowidctlpar 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Originator: SString {\b read} FOriginator;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par The originator (sender) of the message that was last read.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailOrigAddress}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} OrigAddress (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} OrigAddress}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {
\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_OrigAddress; OrigAddress_Property; OrigAddress}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailOrigAddress}}
 Property TEmail.OrigAddress
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} OrigAddress: SString {\b read} FOrigAddress;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par The address of the originator (sender) of the message that was last read.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailNoAttachments}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} NoAttachments (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_NoAttachments; NoAttachments_Property; NoAttachments}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {
\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} NoAttachments}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailNoAttachments}}
 Property TEmail.NoAttachments
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} NoAttachments: boolean {\b read} FNoAttachments {\b write} FNoAttachments;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Set this property to True if you do not want {\uldb ReadMail}{\v func_TEmailReadMail} to return the attached files.
\par 
\par If you set NoAttachments to False, the following happens:
\par 
\par \trowd \trgaph70\trleft-70 \cellx142\cellx7230 \pard \nowidctlpar\intbl \bullet \cell The attachments are copied to a temporary location on disk. 
\par {\b You are responsible for deleting these temporary copies yourself!}\cell \pard \widctlpar\intbl \row \trowd \trgaph70\trleft-70 \cellx142\cellx7230 \pard \nowidctlpar\intbl \bullet \cell The items of {\uldb AttPathNames}{\v prop_TEmailAttPathNames}
 points to these temporary files.\cell \pard \widctlpar\intbl \row \trowd \trgaph70\trleft-70 \cellx142\cellx7230 \pard \nowidctlpar\intbl \bullet \cell {\uldb CopyAttachment}{\v func_TEmailCopyAttachment} allows you to copy an attachment.
\par It will optionally delete the temporary copy.\cell \pard \widctlpar\intbl \row \pard \nowidctlpar 
\par Again, if you set NoAttachments to False, then {\uldb ReadMail}{\v func_TEmailReadMail} will write all the attachments to a temporary directory, and {\b you have to delete these yourself}!
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailUnread}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Unread (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Unread}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_Unread; Unread_Property; Unread}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailUnread}} Property TEmail.Unread
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Unread: boolean {\b read} FUnread;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This flag that tells you whether a message has been read previously.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailAcknowledge}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Acknowledge (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_Acknowledge; Acknowledge_Property; Acknowledge}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar 
\f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Acknowledge}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B}
 prop_TEmailAcknowledge}} Property TEmail.Acknowledge
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Acknowledge: boolean {\b read} FAcknowledge {\b write} FAcknowledge;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par If the email service provider supports this capability, this flag will tell {\uldb SendMail}{\v func_TEmailSendMail} to request that receipts be acknowledged, i.e. the recipient will be asked for a receipt.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailAttachment}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Attachment (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Attachment}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_Attachment; Attachment_Property; Attachment}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailAttachment}} Property TEmail.Attachment

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Attachment: TStrings {\b read} FAttachment {\b write} SetAttachment;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par If used with {\uldb SendMail}{\v func_TEmailSendMail}, this property should contain the full paths and filenames of the attachments.
\par 
\par If you call {\uldb ReadMail}{\v func_TEmailReadMail}, the file names of the attachments are returned here.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailBcc}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super 
$} Bcc (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Bcc}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super A{\footnote \pard\plain 
\s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_BCC;BCC_Property;BCC}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailBcc}} Property TEmail.Bcc
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} BCC: TStrings {\b read} FBCC {\b write} SetBCC;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par TStrings with "Blind Carbon Copy" recipients.
\par 
\par You may address recipients directly, by-passing the MAPI address book completely. Depending on the transport providers available you can send Internet and CompuServe email, FAX letters and other messages using the MAPI client. 
\par 
\par {\ul Example:}
\par To send a FAX letter via MAPI to a known transport provider, you would add a recipient with the phone number "1234567" as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.BCC.Add('[FAX:1234567]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Of course the {\b transport provider} the corresponding service {\b needs to be installed}
. If you have an SMTP provider installed (like the Internet update for the Microsoft Exchange 4.0 client), you could try to address a recipient of the message as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.Recipient.Add('[SMTP:TheUser@some.domain]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par See MAPI.HLP for more information about direct addressing.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailCC}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super $
} CC (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} CC}A{\footnote \pard\plain \s15\nowidctlpar 
\f4\fs20\lang2057 {\cs19\super A} temail_cc;cc_Property;cc}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailCC}} Property TEmail.CC
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} CC: TStrings {\b read} FCC {\b write} SetCC;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par TStrings with "Carbon Copy" recipients.
\par 
\par You may encounter a {\uldb known problem}{\v TEmailProblems} with Windows NT 4.0 if you use this property in conjunction with the {\uldb ShowDialog}{\v prop_TEmailShowDialog} property set to True.
\par 
\par You may address recipients directly, by-passing the MAPI address book completely. Depending on the transport providers available you can send Internet and CompuServe email, FAX letters and other messages using the MAPI client. 
\par 
\par {\ul Example:}
\par To send a FAX letter via MAPI to a known transport provider, you would add a recipient with the phone number "1234567" as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.BCC.Add('[FAX:1234567]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Of course the {\b transport provider} the corresponding service {\b needs to be installed}
. If you have an SMTP provider installed (like the Internet update for the Microsoft Exchange 4.0 client), you could try to address a recipient of the message as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.Recipient.Add('[SMTP:TheUser@some.domain]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par See MAPI.HLP for more information about direct addressing.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailDownLoadFirst}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} DownLoadFirst (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} DownLoadFirst}A
{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} temail_DownLoadFirst; DownLoadFirst_Property; DownLoadFirst}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailDownLoadFirst}}
 Property TEmail.DownLoadFirst
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} DownLoadFirst: boolean {\b read} FDownLoadFirst {\b write} FDownLoadFirst;
\par \pard\plain \widctlpar \f4\fs20\lang2057 
\par \pard \nowidctlpar This property only has an effect when logging in into the MAPI system using the {\uldb Logon}{\v func_TEmailLogon} method.
\par 
\par If set to True an attempt will be made to download all of the user's messages immediately before returning from the login process. If set to False, messages may be downloaded in the background after returning from {\uldb Logon}{\v func_TEmailLogon}.

\par 
\par \pard\plain \s1\sb240\sa60\keepn\nowidctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailMAPIavail}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} MAPIavail (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} MAPIavail}A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} temail_mapiavail; mapiavail_Property; mapiavail}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailMAPIavail}} Property TEmail.MAPIavail
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} MAPIavail: boolean {\b read} GetMAPIavail;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This property tells you whether MAPI services could be located on your system and whether they have been configured correctly. This procedure relies on valid information returned by Windows.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailNewSession}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} NewSession (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} NewSession}} {
\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_NewSession;NewSession_Property;NewSession}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailNewSession}}
 Property TEmail.NewSession
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} NewSession: boolean {\b read} FNewSession {\b write} SetNewSession;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par If set to True, a new MAPI session will be launched on each log-in. An existing MAPI session will not be re-used.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailPassword}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Password (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Password}} {\cs19\super A
{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} Temail_password;password_Property;password}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailPassword}} Property TEmail.Password

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Password: SString {\b read} FPassword {\b write} FPassword;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par The optional email system log-in password.
\par 
\par You can leave the {\uldb Profile}{\v prop_TEmailProfile} and the Password property blank. If you are not logged in, and if you leave them blank, a form asking for log-in details will automatically been opened.
\par 
\par You can set {\uldb UseDefProfile}{\v prop_TEmailUseDefProfile} to select the default profile from the registry.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailProfile}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Profile (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} temail_profile;profile_Property;profile}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}}
 {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Profile}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailProfile}} Property TEmail.Profile
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Profile: SString {\b read} FProfile {\b write} FProfile;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par The optional email system log-in profile string.
\par 
\par You can leave the Profile and the {\uldb Password}{\v prop_TEmailPassword} property blank. If you are not logged on, and if you leave them blank, a form asking for log-in details will automatically been opened.
\par 
\par You can set {\uldb UseDefProfile}{\v prop_TEmailUseDefProfile} to select the default profile from the registry.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailRecipient}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Recipient (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_Recipient; Recipient_Property; Recipient}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {
\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Recipient}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailRecipient}}
 Property TEmail.Recipient
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Recipient: TStrings {\b read} FRecip {\b write} SetRecip;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par TStrings with the recipients of the message.
\par 
\par You may address recipients directly, by-passing the MAPI address book completely. Depending on the transport providers available you can send Internet and CompuServe email, FAX letters and other messages using the MAPI client. 
\par 
\par {\ul Example:}
\par To send a FAX letter via MAPI to a known transport provider, you would add a recipient with the phone number "1234567" as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.BCC.Add('[FAX:1234567]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Of course the {\b transport provider} the corresponding service {\b needs to be installed}
. If you have an SMTP provider installed (like the Internet update for the Microsoft Exchange 4.0 client), you could try to address a recipient of the message as follows:
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   Email1.Recipient.Add('[SMTP:TheUser@some.domain]');
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par See MAPI.HLP for more information about direct addressing.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailShowDialog}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} ShowDialog (property)}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} ShowDialog}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A}
 TEmail_ShowDialog; ShowDialog_Property; ShowDialog}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B}
 prop_TEmailShowDialog}} Property TEmail.ShowDialog
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} ShowDialog: boolean {\b read} FShowDialog {\b write} FShowDialog;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Set this property to True if you want to use the standard MAPI message dialogue to pop up when executing {\uldb SendMail}{\v func_TEmailSendMail}. 
\par 
\par This behaviour is useful, if you 
\par \trowd \trgaph70\trleft-70 \cellx142\cellx3969 \pard \nowidctlpar\intbl \bullet \cell assign a standard text to the message body or\cell \pard \widctlpar\intbl \row \trowd \trgaph70\trleft-70 \cellx142\cellx3969 \pard \nowidctlpar\intbl \bullet \cell 
fill in the subject and / or the address fields\cell \pard \widctlpar\intbl \row \pard \nowidctlpar and want the user to add the rest.
\par 
\par You may encounter a {\uldb known problem}{\v TEmailProblems} with Windows NT 4.0 if you set this property to true and send the mail to {\uldb CC}{\v prop_TEmailCC} recipients.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailSubject}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Subject (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Subject}A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_Subject; Subject_Property; Subject}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailSubject}} Property TEmail.Subject
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Subject: SString {\b read} FSubject {\b write} FSubject;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Assign this property to set the subject of a message.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailText}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Text (TEmail property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_Text; Text_Property; Text}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +}
 TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Text}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailText}} Property TEmail.Text
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Text: SString {\b read} FText {\b write} FText;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This property takes message body text if it fits into a {\i short} Pascal string. 
\par 
\par Use {\uldb GetLongText}{\v func_TEmailGetLongText} and {\uldb SetLongText}{\v func_TEmailSetLongText} if the message body is longer than 255 characters. If you assign a string through the Text property, data assigned through SetLongText will be lost.

\par 
\par If you retrieve a mail with {\uldb ReadMail}{\v func_TEmailReadMail} and the message body is larger than 255 bytes, this property will be empty and the message body can be retrieved by reading {\uldb GetLongText}{\v func_TEmailGetLongText}.
\par 
\par This restriction applies to all 32 bit versions of Delphi and C++ Builder, too, as the property in fact is a ShortString (a non-reference counted, Pascal-style string with a size restriction of 255 characters).
\par 
\par \pard\plain \s1\sb240\sa60\keepn\nowidctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailTruncAttFN}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} TruncAttFN (TEmail property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_TruncAttFN; TruncAttFN_Property; TruncAttFN}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar 
\f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} TruncAttFN}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B}
 prop_TEmailTruncAttFN}} Property TEmail.TruncAttFN
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\keep\widctlpar \f11\fs20\lang1024 {\b property} TruncAttFN: Boolean {\b read} FTruncAttFN {\b write} FTruncAttFN {\b default} true;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This property determines whether the filename of the attachment will be truncated in some way. This is useful if you send mail to a Windows 3.1 system or to a main frame system with restrictively sized filenames.
\par 
\par Please note that {\i by default attachments }{\b\i are}{\i  truncated} using the protected virtual function {\uldb TruncAttachmentFN}{\v func_TEmailTruncAttachmentFN}.
\par 
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailUnreadOnly}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} UnreadOnly (property)}} {\cs19\super +{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} UnreadOnly}A{\footnote 
\pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} temail_UnreadOnly; UnreadOnly_Property; UnreadOnly}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailUnreadOnly}} Property TEmail.UnreadOnly

\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} UnreadOnly: boolean {\b read} FUnreadOnly {\b write} FUnreadOnly;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par If set to True, {\uldb GetNextMessageId}{\v func_TEmailGetNextMessageId} will only return unread messages; if set to False, {\uldb GetNextMessageId}{\v func_TEmailGetNextMessageId} will return all messages and you will need to test the property {\uldb 
Unread}{\v prop_TEmailUnread} to see whether the retrieved message has been read already.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailUseDefProfile}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} UseDefProfile (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_UseDefProfile; UseDefProfile_Property; UseDefProfile}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {
\cs19\super +} TEmailSequence}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} UseDefProfile}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailUseDefProfile}}
 Property TEmail.UseDefProfile
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} UseDefProfile: boolean {\b read} FUseDefProfile {\b write} FUseDefProfile;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par If set to True, and the user is not logged into the MAPI system, the component will use the default profile for the MAPI service to log on. 
\par 
\par This will only work on a 32bit system like Windows 95 or Windows NT. On a 16bit system like Windows 3.1 or Windows for Workgroups this property has no effect.
\par 
\par Both the 16bit and 32bit version of the component do honour this setting, the former through thunking to the 32bit registry, the latter natively.
\par 
\par If this property is set to True and the component is compiled into a {\b 16bit}
 binary (DLL or program), generic thunking to the Win32 API is used to achieve the desired effect. If you prefer not to have thunking code in your binary, please add a dot to the conditional define for {\f11 UseGenericThunks} in {\f11 EMAIL.PAS}
, i.e. change the line
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   \{$DEFINE UseGenericThunks\}
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 to
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024   \{.$DEFINE UseGenericThunks\}
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par in order to disable thunking. No further changes to the component are necessary. You can disable generic thunking, too, if in {\b 16bit} code you always set the UseDefProfile property to False.
\par \pard\plain \s1\sb240\sa60\keepn\widctlpar \b\f5\fs28\lang2057 \page {\cs19\super #{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super #} prop_TEmailVersion}} {\cs19\super ${\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {
\cs19\super $} Version (property)}} {\cs19\super A{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super A} TEmail_Version; Version_Property; Version}+{\footnote \pard\plain \s15\nowidctlpar \f4\fs20\lang2057 {\cs19\super +} TEmailSequence
}} {\cs19\super K{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super K} Version}} {\cs19\super B{\footnote \pard\plain \s15\widctlpar \f4\fs20\lang2057 {\cs19\super B} prop_TEmailVersion}} Property TEmail.Version
\par \pard\plain \widctlpar \f4\fs20\lang2057 Unit: {\uldb Email}{\v unit_Email}
\par 
\par \pard\plain \s22\qj\keep\widctlpar \f11\fs20\lang1024 {\b property} Version: SString {\b read} GetVersion;
\par \pard\plain \nowidctlpar \f4\fs20\lang2057 
\par This read-only property returns a string with the current version number of the component.
\par 
\par }